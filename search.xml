<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode_176.第二高的薪水</title>
    <url>/2022/04/04/LeetCode-176-%E7%AC%AC%E4%BA%8C%E9%AB%98%E7%9A%84%E8%96%AA%E6%B0%B4/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><ul>
<li><p>原文地址：<a href="https://leetcode-cn.com/problems/second-highest-salary/">https://leetcode-cn.com/problems/second-highest-salary/</a></p>
</li>
<li><p>难度：简单</p>
</li>
</ul>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>编写一个 SQL 查询，获取 Employee 表中第二高的薪水（Salary） 。</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/2/17139e0fefbc4a4e~tplv-t2oaga2asx-image.image"><br>例如上述 Employee 表，SQL查询应该返回 200 作为第二高的薪水。如果不存在第二高的薪水，那么查询应返回 null。</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/2/17139e1266aa2c13~tplv-t2oaga2asx-image.image"></p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>对于oracle很容易就想到下面的做法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> salary <span class="keyword">as</span> SecondHighestSalary <span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> salary,rownum <span class="keyword">as</span> rn</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> salary <span class="keyword">from</span> employee <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span> ))</span><br><span class="line"><span class="keyword">where</span> rn<span class="operator">=</span><span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>貌似也没毛病。但其实毛病很大，很多<br>如果不存在第二高的薪水，分2种情况，一种是就1条记录，一种是SAL就一个。<br>那你根据ROWNUM就无法得到。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT MAX(Salary) as SecondHighestSalary  FROM Employee </span><br><span class="line">WHERE Salary!=(SELECT MAX(Salary) FROM Employee )</span><br></pre></td></tr></table></figure>
<p>这个思路貌似没问题，但在oracle中提交总是超时，我也不明所以。Mysql下提交通过的。</p>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>LeetCode</tag>
        <tag>完结</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode_217.存在重复元素</title>
    <url>/2022/04/04/LeetCode-217-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<ul>
<li><p>难度：简单</p>
</li>
<li><p>原文：<a href="https://leetcode-cn.com/problems/contains-duplicate/">https://leetcode-cn.com/problems/contains-duplicate/</a></p>
</li>
<li><p>题目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定一个整数数组，判断是否存在重复元素。</span><br><span class="line"></span><br><span class="line">如果任意一值在数组中出现至少两次，函数返回 true 。如果数组中每个元素都不相同，则返回 false 。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [1,2,3,1]</span><br><span class="line">输出: true</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: [1,2,3,4]</span><br><span class="line">输出: false</span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line">输入: [1,1,1,3,3,4,3,2,4,2]</span><br><span class="line">输出: true</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>思路：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">如果有重复排重后的长度就短了</span><br></pre></td></tr></table></figure></li>
<li><p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">containsDuplicate</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(nums)!=<span class="built_in">len</span>(<span class="built_in">set</span>(nums))</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>完结</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode_387. 字符串中的第一个唯一字符</title>
    <url>/2022/05/16/LeetCode-387-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><ul>
<li><p>原文地址：<a href="https://leetcode.cn/problems/first-unique-character-in-a-string/">https://leetcode.cn/problems/first-unique-character-in-a-string/</a></p>
</li>
<li><p>难度：简单</p>
</li>
</ul>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个字符串 s ，找到 它的第一个不重复的字符，并返回它的索引 。如果不存在，则返回 -1 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入: s = &quot;leetcode&quot;</span><br><span class="line">输出: 0</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: s = &quot;loveleetcode&quot;</span><br><span class="line">输出: 2</span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line">输入: s = &quot;aabb&quot;</span><br><span class="line">输出: -1</span><br><span class="line"></span><br><span class="line">提示:</span><br><span class="line"></span><br><span class="line">1 &lt;= s.length &lt;= 105</span><br><span class="line">s 只包含小写字母</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode.cn/problems/first-unique-character-in-a-string</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>



<h1 id="思路1："><a href="#思路1：" class="headerlink" title="思路1："></a>思路1：</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">firstUniqChar</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">for</span> index,_ <span class="keyword">in</span> <span class="built_in">enumerate</span>(s): <span class="comment">#遍历字符串获取索引 </span></span><br><span class="line">            <span class="keyword">if</span> s.count(_)==<span class="number">1</span>: <span class="comment">#如果计数为1</span></span><br><span class="line">                <span class="keyword">return</span> index <span class="comment">#则返回</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>  <span class="comment">#没找到计数为1的，就返回-1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>方法1的解决效果，写的时候就能想到，耗时比较慢，因为每次获取到一个字符都要从头去遍历一遍。</li>
</ul>
<h1 id="思路2：hash表"><a href="#思路2：hash表" class="headerlink" title="思路2：hash表"></a>思路2：hash表</h1><ul>
<li>count的问题可以通过hash表来规避</li>
<li>得到一个字符的时候设置其次数为1，第二次遇到就+1，依次类推，最终去找value为1的，没有就返回-1</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">firstUniqChar</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        hash_s = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> s:</span><br><span class="line">            hash_s[_] = hash_s[_]+<span class="number">1</span> <span class="keyword">if</span> _ <span class="keyword">in</span> hash_s <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> hash_s.items():</span><br><span class="line">            <span class="keyword">if</span> v==<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> s.index(k)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>





<h1 id="思路3："><a href="#思路3：" class="headerlink" title="思路3："></a>思路3：</h1><ul>
<li><p>其实hash表那部分代码就是python的一些标准库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">counter = Counter(s)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>(counter))  <span class="comment">#&#123;&#x27;h&#x27;: 1, &#x27;e&#x27;: 1, &#x27;l&#x27;: 2, &#x27;o&#x27;: 1&#125;  </span></span><br></pre></td></tr></table></figure></li>
<li><p>修改上述代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">firstUniqChar</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">        hash_s = <span class="built_in">dict</span>(Counter(s))</span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> hash_s.items():</span><br><span class="line">            <span class="keyword">if</span> v==<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> s.index(k)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>LeetCode</tag>
        <tag>完结</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode_512.游戏玩家分析2</title>
    <url>/2022/04/04/LeetCode-512-%E6%B8%B8%E6%88%8F%E7%8E%A9%E5%AE%B6%E5%88%86%E6%9E%902/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><ul>
<li><p>原文地址：<a href="https://leetcode-cn.com/problems/game-play-analysis-i/">https://leetcode-cn.com/problems/game-play-analysis-i/</a></p>
</li>
<li><p>难度：简单</p>
</li>
<li><p>收费（会员可看），我不是会员。</p>
</li>
</ul>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>Activity table:<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/2/17139d9dd6c27bf1~tplv-t2oaga2asx-image.image" alt="image.png"></p>
<p>Result table:<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/2/17139d9dd0c865ee~tplv-t2oaga2asx-image.image" alt="image.png"></p>
<p>题目是：Write a SQL query that reports the device that is first logged in for each player<br>翻译一下就是写一条sql，显示每个玩家首次登录的设备号（同时显示玩家ID）</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>如果做过题1，那这道题就简单一些了。我们可以先求出每次玩家首次登录的信息。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> player_id,<span class="built_in">MIN</span>(event_date)</span><br><span class="line"><span class="keyword">FROM</span> activity</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> player_id</span><br></pre></td></tr></table></figure>

<p>有了这个信息，我们可以根据它们找到指定id、指定时间的设备id信息。<br>但此处可能有很多方法：</p>
<h2 id="方法1，用in来做"><a href="#方法1，用in来做" class="headerlink" title="方法1，用in来做"></a>方法1，用in来做</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> player_id,device_id</span><br><span class="line"><span class="keyword">FROM</span> activity</span><br><span class="line"><span class="keyword">WHERE</span> (player_id,event_date) <span class="keyword">IN</span> (</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> player_id,<span class="built_in">MIN</span>(event_date)</span><br><span class="line"><span class="keyword">FROM</span> activity</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> player_id)</span><br></pre></td></tr></table></figure>

<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/2/17139d9dd5d5e9b9~tplv-t2oaga2asx-image.image" alt="image.png"></p>
<h2 id="方法2，用表关联来做"><a href="#方法2，用表关联来做" class="headerlink" title="方法2，用表关联来做"></a>方法2，用表关联来做</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> a.player_id,a.device_id</span><br><span class="line"><span class="keyword">FROM</span> activity <span class="keyword">AS</span> a,</span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> player_id,<span class="built_in">MIN</span>(event_date) <span class="keyword">AS</span> mindate</span><br><span class="line"><span class="keyword">FROM</span> activity</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> player_id) <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.`event_date`<span class="operator">=</span>b.mindate </span><br><span class="line"><span class="keyword">AND</span> a.`player_id`<span class="operator">=</span>b.player_id</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>LeetCode</tag>
        <tag>完结</tag>
      </tags>
  </entry>
  <entry>
    <title>Content-Type的那些事儿</title>
    <url>/2022/04/05/Content-Type/</url>
    <content><![CDATA[<h1 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h1><blockquote>
<p><a href="https://www.iana.org/assignments/media-types/media-types.xhtml">https://www.iana.org/assignments/media-types/media-types.xhtml</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/MIME_type">https://developer.mozilla.org/zh-CN/docs/Glossary/MIME_type</a></p>
</blockquote>
<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><ul>
<li>Content-Type 实体头部用于指示资源的MIME类型 media type 。</li>
<li>在响应中，Content-Type标头告诉客户端实际返回的内容的内容类型。浏览器会在某些情况下进行MIME查找，并不一定遵循此标题的值; 为了防止这种行为，可以将标题 X-Content-Type-Options 设置为 nosniff。</li>
<li>在请求中 (如POST 或 PUT)，客户端告诉服务器实际发送的数据类型</li>
</ul>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><ul>
<li><p>示例</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=something</span><br></pre></td></tr></table></figure></li>
<li><p>第一个字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type/subtype</span><br><span class="line">类型与子类型</span><br></pre></td></tr></table></figure>

<ul>
<li><p>不允许空格存在。<em>type</em> 表示可以被分多个子类的独立类别。<em>subtype 表示细分后的每个类型</em></p>
</li>
<li><p>独立类别</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">描述</th>
<th align="left">典型示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>text</code></td>
<td align="left">表明文件是普通文本，理论上是人类可读</td>
<td align="left"><code>text/plain</code>, <code>text/html</code>, <code>text/css, text/javascript</code></td>
</tr>
<tr>
<td align="left"><code>image</code></td>
<td align="left">表明是某种图像。不包括视频，但是动态图（比如动态gif）也使用image类型</td>
<td align="left"><code>image/gif</code>, <code>image/png</code>, <code>image/jpeg</code>, <code>image/bmp</code>, <code>image/webp</code>, <code>image/x-icon</code>, <code>image/vnd.microsoft.icon</code></td>
</tr>
<tr>
<td align="left"><code>audio</code></td>
<td align="left">表明是某种音频文件</td>
<td align="left"><code>audio/midi</code>, <code>audio/mpeg, audio/webm, audio/ogg, audio/wav</code></td>
</tr>
<tr>
<td align="left"><code>video</code></td>
<td align="left">表明是某种视频文件</td>
<td align="left"><code>video/webm</code>, <code>video/ogg</code></td>
</tr>
<tr>
<td align="left"><code>application</code></td>
<td align="left">表明是某种二进制数据</td>
<td align="left"><code>application/octet-stream</code>, <code>application/pkcs12</code>, <code>application/vnd.mspowerpoint</code>, <code>application/xhtml+xml</code>, <code>application/xml</code>,  <code>application/pdf</code></td>
</tr>
</tbody></table>
</li>
<li><p>对于text文件类型若没有特定的subtype，就使用 <code>text/plain</code>。类似的，二进制文件没有特定或已知的 subtype，即使用 <code>application/octet-stream</code></p>
</li>
<li><p><em>Multipart</em> 类型表示细分领域的文件类型的种类，经常对应不同的 MIME 类型。这是<em>复合</em>文件的一种表现方式。<code>multipart/form-data</code> 可用于联系 <a href="https://developer.mozilla.org/en-US/docs/Learn/Forms">HTML Forms</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST"><code>POST</code></a> 方法，此外 <code>multipart/byteranges</code>使用状态码<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/206"><code>206</code></a> <code>Partial Content</code>来发送整个文件的子集，而HTTP对不能处理的复合文件使用特殊的方式：将信息直接传送给浏览器（这时可能会建立一个“另存为”窗口，但是却不知道如何去显示内联文件。）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">multipart/form-data</span><br><span class="line">multipart/byteranges</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>charset:字符编码标准</p>
</li>
<li><p>boundary:对于多部分实体，boundary 是必需的，其包括来自一组字符的1到70个字符，已知通过电子邮件网关是非常健壮的，而不是以空白结尾。它用于封装消息的多个部分的边界</p>
</li>
</ul>
<h1 id="在HTML表单中"><a href="#在HTML表单中" class="headerlink" title="在HTML表单中"></a>在HTML表单中</h1><ul>
<li><p>在通过HTML form提交生成的<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST"><code>POST</code></a>请求中，请求头的Content-Type由<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form">``</a>元素上的enctype属性指定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">value</span>=<span class="string">&quot;some text&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myFile&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>请求头类似于</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/foo</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>68137</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=---------------------------974767299852498929531610575</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql"><span class="comment">---------------------------974767299852498929531610575</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;description&quot;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">some</span> <span class="type">text</span></span></span><br><span class="line"><span class="language-pgsql"><span class="comment">---------------------------974767299852498929531610575</span></span></span><br><span class="line"><span class="language-pgsql">Content-Disposition: form-data; <span class="type">name</span>=&quot;myFile&quot;; filename=&quot;foo.txt&quot;</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: <span class="type">text</span>/plain</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">(content <span class="keyword">of</span> the uploaded file foo.txt)</span></span><br><span class="line"><span class="language-pgsql"><span class="comment">---------------------------974767299852498929531610575</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>一个 <code>POST</code> 请求通常是通过 <a href="https://developer.mozilla.org/en-US/docs/Learn/Forms">HTML 表单</a>发送, 并返回服务器的修改结果. 在这种情况下, content type 是通过在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form">``</a> 元素中设置正确的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form#attr-enctype"><code>enctype</code></a> 属性, 或是在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input">``</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button">``</a> 元素中设置 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-formenctype"><code>formenctype</code></a> 属性来选择的:</p>
<ul>
<li><code>application/``x-www-form-urlencoded</code>: 数据被编码成以 <code>&#39;&amp;&#39;</code> 分隔的键-值对, 同时以 <code>&#39;=&#39;</code> 分隔键和值. 非字母或数字的字符会被 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/percent-encoding">percent-encoding</a>: 这也就是为什么这种类型不支持二进制数据(应使用 <code>multipart/form-data</code> 代替).</li>
<li><code>multipart/form-data</code></li>
<li><code>text/plain</code></li>
</ul>
</li>
</ul>
<h1 id="MIME"><a href="#MIME" class="headerlink" title="MIME"></a>MIME</h1><ul>
<li><strong>MIME type</strong> （现在称为“媒体类型(media type)”，但有时也是“内容类型(content type)”）是指示文件类型的字符串，与文件一起发送（例如，一个声音文件可能被标记为 <code>audio/ogg</code> ，一个图像文件可能是 <code>image/png</code> ）。它与传统Windows上的文件扩展名有相同目的</li>
</ul>
<h1 id="典型的Connect-Type"><a href="#典型的Connect-Type" class="headerlink" title="典型的Connect-Type"></a>典型的Connect-Type</h1><table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>text/html</td>
<td>HTML格式</td>
<td></td>
</tr>
<tr>
<td>text/plain</td>
<td>纯文本格式</td>
<td>可以传json，但和application/json有区别</td>
</tr>
<tr>
<td>text/xml</td>
<td>XML格式</td>
<td></td>
</tr>
<tr>
<td>image/gif</td>
<td>gif图片格式</td>
<td></td>
</tr>
<tr>
<td>image/jpeg</td>
<td>jpg图片格式</td>
<td></td>
</tr>
<tr>
<td>image/png</td>
<td>png图片格式</td>
<td></td>
</tr>
<tr>
<td>application/xhtml+xml</td>
<td>XHTML格式</td>
<td></td>
</tr>
<tr>
<td>application/xml</td>
<td>XML数据格式</td>
<td></td>
</tr>
<tr>
<td>application/atom+xml</td>
<td>Atom XML聚合格式</td>
<td></td>
</tr>
<tr>
<td><strong>application/json</strong></td>
<td>JSON数据格式</td>
<td>text/json没有官方支持，广泛应用的山寨版</td>
</tr>
<tr>
<td>application/pdf</td>
<td>pdf格式</td>
<td></td>
</tr>
<tr>
<td>application/msword</td>
<td>Word文档格式</td>
<td></td>
</tr>
<tr>
<td><strong>application/octet-stream</strong></td>
<td>二进制流数据（如常见的文件下载）</td>
<td></td>
</tr>
<tr>
<td><strong>application/x-www-form-urlencoded</strong></td>
<td>from表单编码格式</td>
<td>key/value格式发送服务器(表单默认格式）</td>
</tr>
<tr>
<td><strong>multipart/form-data</strong></td>
<td>表单中上传文件时，使用该格式</td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p><a href="https://www.iana.org/assignments/media-types/application/json">https://www.iana.org/assignments/media-types/application/json</a></p>
<p><a href="https://www.iana.org/assignments/media-types/application/x-www-form-urlencoded">https://www.iana.org/assignments/media-types/application/x-www-form-urlencoded</a></p>
<p><a href="https://www.iana.org/assignments/media-types/multipart/form-data">https://www.iana.org/assignments/media-types/multipart/form-data</a></p>
</blockquote>
<h1 id="所有的Connect-Type"><a href="#所有的Connect-Type" class="headerlink" title="所有的Connect-Type"></a>所有的Connect-Type</h1><blockquote>
<p><a href="https://www.iana.org/assignments/media-types/media-types.xhtml">https://www.iana.org/assignments/media-types/media-types.xhtml</a></p>
</blockquote>
]]></content>
      <categories>
        <category>http</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>待续</tag>
      </tags>
  </entry>
  <entry>
    <title>Github搜索技巧一览</title>
    <url>/2022/04/10/Github%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="Github搜索技巧一览"><a href="#Github搜索技巧一览" class="headerlink" title="Github搜索技巧一览"></a>Github搜索技巧一览</h1><blockquote>
<p><a href="https://docs.github.com/cn/search-github">https://docs.github.com/cn/search-github</a></p>
<p>都参考了官网</p>
</blockquote>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>示例</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;</td>
<td>cats stars:&gt;1000</td>
<td>匹配含有 “cats” 字样、星标超过 1000 个的仓库。</td>
</tr>
<tr>
<td>&gt;=</td>
<td>cats topics:&gt;=5</td>
<td>匹配含有 “cats” 字样、有 5 个或更多主题的仓库。</td>
</tr>
<tr>
<td>&lt;</td>
<td>cats size:&lt;10000</td>
<td>匹配小于 10 KB 的文件中含有 “cats” 字样的代码</td>
</tr>
<tr>
<td>&lt;=</td>
<td>cats stars:&lt;50</td>
<td>匹配含有 “cats” 字样、星标不超过 50 个的仓库。</td>
</tr>
</tbody></table>
<ul>
<li>跟everything的语法极其相似</li>
</ul>
<h2 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>示例</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>n..*</td>
<td>cats stars:10..*</td>
<td>等同于 <code>stars:&gt;=10</code> 并匹配含有 “cats” 字样、有 10 个或更多星号的仓库。</td>
</tr>
<tr>
<td>*..n</td>
<td>cats starts:*..10</td>
<td>等同于 <code>stars:&lt;=10</code> 并匹配含有 “cats” 字样、有不超过 10 个星号的仓库。</td>
</tr>
<tr>
<td>n..n</td>
<td>cats stars:10..50</td>
<td>匹配含有 “cats” 字样、有 10 到 50 个星号的仓库。</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><ul>
<li>日期格式遵循ISO8601，YYYY-MM-DD</li>
<li></li>
</ul>
<table>
<thead>
<tr>
<th>表达式</th>
<th>示例</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;YYYY-MM-DD</td>
<td>cats created:&gt;2016-04-29</td>
<td>匹配含有 “cats” 字样、在 2016 年 4 月 29 日之后创建的议题。</td>
</tr>
<tr>
<td></td>
<td>cats pushed:&lt;2012-07-05</td>
<td>匹配在 2012 年 7 月 5 日之前推送的仓库中含有 “cats” 字样的代码。</td>
</tr>
<tr>
<td>YYYY-MM-DD..YYYY-MM-DD</td>
<td>cats pushed:2016-04-30..2017-07-31</td>
<td>匹配含有 “cats” 字样、在 2016 年 4 月末到 7 月之间推送的仓库。</td>
</tr>
<tr>
<td>YYYY-MM-DD..*</td>
<td>cats created:2012-04-30..</td>
<td>匹配在 2012 年 4 月 30 日之后创建、含有 “cats” 字样的议题。</td>
</tr>
<tr>
<td>*..YYYY-MM-DD</td>
<td>cats created:*..2012-07-04</td>
<td>匹配在 2012 年 7 月 4 日之前创建、含有 “cats” 字样的议题。</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>您也可以在日期后添加可选的时间信息 <code>THH:MM:SS+00:00</code>，以便按小时、分钟和秒进行搜索。 这是 <code>T</code>，随后是 <code>HH:MM:SS</code>（时-分-秒）和 UTC 偏移 (<code>+00:00</code>)<ul>
<li><em>YYYY</em>-<em>MM</em>-<em>DD</em>T<em>HH</em>:<em>MM</em>:<em>SS</em>+<em>00</em>:<em>00</em></li>
<li><em>YYYY</em>-<em>MM</em>-<em>DD</em>T<em>HH</em>:<em>MM</em>:<em>SS</em>Z</li>
</ul>
</li>
</ul>
<h2 id="排除"><a href="#排除" class="headerlink" title="排除"></a>排除</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>示例</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>not</td>
<td>hello not world</td>
<td>匹配含有 “hello” 字样但不含有 “world” 字样的仓库</td>
</tr>
<tr>
<td>-</td>
<td><strong>cats stars:&gt;10 -language:javascript</strong></td>
<td>匹配含有 “cats” 字样、有超过 10 个星号但并非以 JavaScript 编写的仓库。</td>
</tr>
<tr>
<td></td>
<td><strong>mentions:defunkt -org:github</strong></td>
<td>匹配提及 @defunkt 且不在 GitHub 组织仓库中的议题</td>
</tr>
</tbody></table>
<h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><ul>
<li>如果搜索含有空格的查询，您需要用引号将其括起来。 例如：</li>
</ul>
<table>
<thead>
<tr>
<th>示例</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>cats NOT “hello world”</td>
<td>匹配含有 “cats” 字样但不含有 “hello world” 字样的仓库。</td>
</tr>
<tr>
<td>build label:”bug fix”</td>
<td>匹配具有标签 “bug fix”、含有 “build” 字样的议题。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="用户名"><a href="#用户名" class="headerlink" title="用户名"></a>用户名</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>示例</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>QUALIFIER:USERNAME</td>
<td>author:nat</td>
<td>匹配 @nat 创作的提交。</td>
</tr>
<tr>
<td>QUALIFIER:@me</td>
<td>is:issue assignee:@me</td>
<td>匹配已分配给结果查看者的议题</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="搜索实例"><a href="#搜索实例" class="headerlink" title="搜索实例"></a>搜索实例</h1><ul>
<li>关注打★的部分，其他应该不多见。</li>
</ul>
<h2 id="★★按仓库名称、说明或自述文件内容搜索"><a href="#★★按仓库名称、说明或自述文件内容搜索" class="headerlink" title="★★按仓库名称、说明或自述文件内容搜索"></a>★★按仓库名称、说明或自述文件内容搜索</h2><table>
<thead>
<tr>
<th align="left">限定符</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>in:name</code></td>
<td align="left">jquery in:name 匹配仓库名称中含有 “jquery” 的仓库。</td>
</tr>
<tr>
<td align="left"><code>in:description</code></td>
<td align="left">jquery in:name,description匹配仓库名称或说明中含有 “jquery” 的仓库。</td>
</tr>
<tr>
<td align="left"><code>in:readme</code></td>
<td align="left">jquery in:readme匹配仓库自述文件中提及 “jquery” 的仓库。</td>
</tr>
<tr>
<td align="left"><code>repo:owner/name</code></td>
<td align="left">repo:octocat/hello-world匹配特定仓库名称</td>
</tr>
</tbody></table>
<h2 id="在用户或组织的仓库内搜索"><a href="#在用户或组织的仓库内搜索" class="headerlink" title="在用户或组织的仓库内搜索"></a>在用户或组织的仓库内搜索</h2><table>
<thead>
<tr>
<th align="left">限定符</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>user:USERNAME</code></td>
<td align="left">user:defunkt forks:&gt;100 匹配来自 @defunkt、拥有超过 100 复刻的仓库。</td>
</tr>
<tr>
<td align="left"><code>org:ORGNAME</code></td>
<td align="left">org:github 匹配来自 GitHub 的仓库</td>
</tr>
</tbody></table>
<h2 id="按仓库大小搜索"><a href="#按仓库大小搜索" class="headerlink" title="按仓库大小搜索"></a>按仓库大小搜索</h2><table>
<thead>
<tr>
<th align="left">限定符</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">size:n</td>
<td align="left">size:1000 匹配恰好为 1 MB 的仓库。</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">size:&gt;=30000匹配至少为 30 MB 的仓库。</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">size:&lt;50匹配小于 50 KB 的仓库。</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">size:50..120 匹配介于 50 KB 与 120 KB 之间的仓库</td>
</tr>
</tbody></table>
<h2 id="★按关注者数量搜索"><a href="#★按关注者数量搜索" class="headerlink" title="★按关注者数量搜索"></a>★按关注者数量搜索</h2><table>
<thead>
<tr>
<th align="left">限定符</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">followers:n</td>
<td align="left">node followers:&gt;=10000 匹配有 10,000 或更多关注者提及文字 “node” 的仓库。</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">styleguide linter followers:1..10 匹配拥有 1 到 10 个关注者并且提及 “styleguide linter” 一词的的仓库。</td>
</tr>
</tbody></table>
<h2 id="★按fork数量搜索"><a href="#★按fork数量搜索" class="headerlink" title="★按fork数量搜索"></a>★按fork数量搜索</h2><table>
<thead>
<tr>
<th align="left">限定符</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">forks:n</td>
<td align="left">forks:5匹配只有 5 个复刻的仓库。</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">forks:&gt;=205匹配具有至少 205 个复刻的仓库。</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">forks:&lt;90 匹配具有少于 90 个复刻的仓库。</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">forks:10..20 匹配具有 10 到 20 个复刻的仓库</td>
</tr>
</tbody></table>
<h2 id="★★按星号数量搜索"><a href="#★★按星号数量搜索" class="headerlink" title="★★按星号数量搜索"></a>★★按星号数量搜索</h2><table>
<thead>
<tr>
<th>stars:n</th>
<th>stars:500匹配恰好具有 500 个星号的仓库。</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>stars:10..20 匹配具有 10 到 20 个星号、小于 1000 KB 的仓库。</td>
</tr>
<tr>
<td></td>
<td>stars:&gt;=500 fork:true language:php 匹配具有至少 500 个星号，包括复刻的星号（以 PHP 编写）的仓库。</td>
</tr>
</tbody></table>
<h2 id="★★按语言搜索"><a href="#★★按语言搜索" class="headerlink" title="★★按语言搜索"></a>★★按语言搜索</h2><table>
<thead>
<tr>
<th align="left">限定符</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">language:LANGUAGE</td>
<td align="left">rails language:javascript 匹配用 JavaScript 编写、包含单词“rails”的存储库</td>
</tr>
</tbody></table>
<h2 id="按主题搜索"><a href="#按主题搜索" class="headerlink" title="按主题搜索"></a>按主题搜索</h2><p>您可以找到按特定主题分类的所有仓库。 </p>
<table>
<thead>
<tr>
<th align="left">限定符</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>topic:*TOPIC*</code></td>
<td align="left">topic:jekyll 匹配属于 “Jekyll” 主题类别的存储库。</td>
</tr>
</tbody></table>
<h2 id="按主题数量搜索"><a href="#按主题数量搜索" class="headerlink" title="按主题数量搜索"></a>按主题数量搜索</h2><p>您可以使用 <code>topics</code> 限定符以及大于、小于和范围限定符，根据应用于仓库的主题数量来搜索仓库。</p>
<table>
<thead>
<tr>
<th align="left">限定符</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>topics:*n*</code></td>
<td align="left">topics:5 匹配具有五个主题的仓库。</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">topics:&gt;3 匹配超过三个主题的仓库。</td>
</tr>
</tbody></table>
<h2 id="按许可搜索"><a href="#按许可搜索" class="headerlink" title="按许可搜索"></a>按许可搜索</h2><p>您可以根据仓库中许可的类型搜索仓库。 您必须使用许可关键字，按特定许可或许可系列来过滤仓库。</p>
<table>
<thead>
<tr>
<th align="left">限定符</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>license:*LICENSE_KEYWORD*</code></td>
<td align="left">license:apache-2.0匹配根据 Apache License 2.0 授权的仓库。</td>
</tr>
</tbody></table>
<h2 id="按仓库可见性搜索"><a href="#按仓库可见性搜索" class="headerlink" title="按仓库可见性搜索"></a>按仓库可见性搜索</h2><p>您可以根据仓库的可见性过滤搜索。 </p>
<table>
<thead>
<tr>
<th>限定符</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>is:public</td>
<td>is:public org:github匹配 GitHub 拥有的公共存储库</td>
</tr>
<tr>
<td>is:private</td>
<td>is:private pages匹配您可以访问并且包含单词“pages”的存储库</td>
</tr>
</tbody></table>
<h2 id="基于仓库是否为镜像搜索"><a href="#基于仓库是否为镜像搜索" class="headerlink" title="基于仓库是否为镜像搜索"></a>基于仓库是否为镜像搜索</h2><p>您可以根据仓库是否为镜像以及托管于其他位置托管来搜索仓库。</p>
<table>
<thead>
<tr>
<th align="left">限定符</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>mirror:true</code></td>
<td align="left">mirror:true GNOME匹配是镜像且包含 “GNOME” 字样的仓库。</td>
</tr>
<tr>
<td align="left"><code>mirror:false</code></td>
<td align="left">mirror:false GNOME匹配并非镜像且包含 “GNOME” 字样的仓库。</td>
</tr>
</tbody></table>
<h2 id="基于仓库是否已存档搜索"><a href="#基于仓库是否已存档搜索" class="headerlink" title="基于仓库是否已存档搜索"></a>基于仓库是否已存档搜索</h2><p>您可以基于仓库是否已存档来搜索仓库。 </p>
<table>
<thead>
<tr>
<th align="left">限定符</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>archived:true</code></td>
<td align="left">archived:true GNOME匹配已存档且包含 “GNOME” 字样的仓库。</td>
</tr>
<tr>
<td align="left"><code>archived:false</code></td>
<td align="left">archived:false GNOME匹配未存档且包含 “GNOME” 字样的仓库。</td>
</tr>
</tbody></table>
<h2 id="基于具有-good-first-issue-或-help-wanted-标签的议题数量搜索"><a href="#基于具有-good-first-issue-或-help-wanted-标签的议题数量搜索" class="headerlink" title="基于具有 good first issue 或 help wanted 标签的议题数量搜索"></a>基于具有 <code>good first issue</code> 或 <code>help wanted</code> 标签的议题数量搜索</h2><p>您可以使用限定符 <code>help-wanted-issues:&gt;n</code> 和 <code>good-first-issues:&gt;n</code> 搜索具有最少数量标签为 <code>help-wanted</code> 或 <code>good-first-issue</code> 议题的仓库。。</p>
<table>
<thead>
<tr>
<th align="left">限定符</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>good-first-issues:&gt;n</code></td>
<td align="left">good-first-issues:&gt;2 javascript匹配具有超过两个标签为 <code>good-first-issue</code> 的议题并且包含单词“javascript”的存储库。</td>
</tr>
<tr>
<td align="left"><code>help-wanted-issues:&gt;n</code></td>
<td align="left">help-wanted-issues:&gt;4 react匹配具有超过四个标签为 <code>help-wanted</code> 的议题且包含 “React” 字样的仓库。</td>
</tr>
</tbody></table>
<h2 id="基于赞助能力的搜索"><a href="#基于赞助能力的搜索" class="headerlink" title="基于赞助能力的搜索"></a>基于赞助能力的搜索</h2><p>您可以使用 <code>is:sponsorable</code> 限定符在 GitHub 赞助者 上搜索其所有者可以赞助的仓库。 </p>
<p>您可以使用 <code>has:funding-file</code> 限定符搜索具有融资文件的仓库。</p>
<table>
<thead>
<tr>
<th align="left">限定符</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>is:sponsorable</code></td>
<td align="left">is:sponsorable匹配其所有者具有 GitHub 赞助者 配置文件的仓库。</td>
</tr>
<tr>
<td align="left"><code>has:funding-file</code></td>
<td align="left">has:funding-file 匹配具有 FUNDING.yml 文件的仓库。</td>
</tr>
</tbody></table>
<h1 id="说在最后的"><a href="#说在最后的" class="headerlink" title="说在最后的"></a>说在最后的</h1><ul>
<li><p>官网没有提到的，比如还有location</p>
<table>
<thead>
<tr>
<th>示例</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>location:china</td>
<td>匹配用户的地址填写在china的</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>完结</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode_804. 唯一摩尔斯密码词</title>
    <url>/2022/04/10/LeetCode-804-%E5%94%AF%E4%B8%80%E6%91%A9%E5%B0%94%E6%96%AF%E5%AF%86%E7%A0%81%E8%AF%8D/</url>
    <content><![CDATA[<h1 id="804-唯一摩尔斯密码词"><a href="#804-唯一摩尔斯密码词" class="headerlink" title="804. 唯一摩尔斯密码词"></a>804. 唯一摩尔斯密码词</h1><ul>
<li>难度：简单</li>
<li>原文：<a href="https://leetcode-cn.com/problems/unique-morse-code-words/">https://leetcode-cn.com/problems/unique-morse-code-words/</a></li>
<li>题目<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">国际摩尔斯密码定义一种标准编码方式，将每个字母对应于一个由一系列点和短线组成的字符串， 比如:</span><br><span class="line"></span><br><span class="line">&#x27;a&#x27; 对应 &quot;.-&quot; ，</span><br><span class="line">&#x27;b&#x27; 对应 &quot;-...&quot; ，</span><br><span class="line">&#x27;c&#x27; 对应 &quot;-.-.&quot; ，以此类推。</span><br><span class="line">为了方便，所有 26 个英文字母的摩尔斯密码表如下：</span><br><span class="line"></span><br><span class="line">[&quot;.-&quot;,&quot;-...&quot;,&quot;-.-.&quot;,&quot;-..&quot;,&quot;.&quot;,&quot;..-.&quot;,&quot;--.&quot;,&quot;....&quot;,&quot;..&quot;,&quot;.---&quot;,&quot;-.-&quot;,&quot;.-..&quot;,&quot;--&quot;,&quot;-.&quot;,&quot;---&quot;,&quot;.--.&quot;,&quot;--.-&quot;,&quot;.-.&quot;,&quot;...&quot;,&quot;-&quot;,&quot;..-&quot;,&quot;...-&quot;,&quot;.--&quot;,&quot;-..-&quot;,&quot;-.--&quot;,&quot;--..&quot;]</span><br><span class="line">给你一个字符串数组 words ，每个单词可以写成每个字母对应摩尔斯密码的组合。</span><br><span class="line"></span><br><span class="line">例如，&quot;cab&quot; 可以写成 &quot;-.-..--...&quot; ，(即 &quot;-.-.&quot; + &quot;.-&quot; + &quot;-...&quot; 字符串的结合)。我们将这样一个连接过程称作 单词翻译 。</span><br><span class="line">对 words 中所有单词进行单词翻译，返回不同 单词翻译 的数量。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入: words = [&quot;gin&quot;, &quot;zen&quot;, &quot;gig&quot;, &quot;msg&quot;]</span><br><span class="line">输出: 2</span><br><span class="line">解释: </span><br><span class="line">各单词翻译如下:</span><br><span class="line">&quot;gin&quot; -&gt; &quot;--...-.&quot;</span><br><span class="line">&quot;zen&quot; -&gt; &quot;--...-.&quot;</span><br><span class="line">&quot;gig&quot; -&gt; &quot;--...--.&quot;</span><br><span class="line">&quot;msg&quot; -&gt; &quot;--...--.&quot;</span><br><span class="line"></span><br><span class="line">共有 2 种不同翻译, &quot;--...-.&quot; 和 &quot;--...--.&quot;.</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：words = [&quot;a&quot;]</span><br><span class="line">输出：1</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">1 &lt;= words.length &lt;= 100</span><br><span class="line">1 &lt;= words[i].length &lt;= 12</span><br><span class="line">words[i] 由小写英文字母组成</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="我的思路"><a href="#我的思路" class="headerlink" title="我的思路"></a>我的思路</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 建立一个26个字母和密码的映射表</span><br><span class="line">2. 将目标字符串列表的元素取出并转换</span><br><span class="line">3. 弄成集合求长度</span><br></pre></td></tr></table></figure>

<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def uniqueMorseRepresentations(self, words: List[str]) -&gt; int:</span><br><span class="line">        morse_tab = [&quot;.-&quot;, &quot;-...&quot;, &quot;-.-.&quot;, &quot;-..&quot;, &quot;.&quot;, &quot;..-.&quot;, &quot;--.&quot;, &quot;....&quot;, &quot;..&quot;, &quot;.---&quot;, &quot;-.-&quot;, &quot;.-..&quot;, &quot;--&quot;, &quot;-.&quot;, &quot;---&quot;,</span><br><span class="line">                    &quot;.--.&quot;, &quot;--.-&quot;, &quot;.-.&quot;, &quot;...&quot;, &quot;-&quot;, &quot;..-&quot;, &quot;...-&quot;, &quot;.--&quot;, &quot;-..-&quot;, &quot;-.--&quot;, &quot;--..&quot;]</span><br><span class="line">        from string import ascii_lowercase</span><br><span class="line">        map_morse = dict(zip(ascii_lowercase, morse_tab))</span><br><span class="line">        def rotate_word(word):</span><br><span class="line">            for _ in word:</span><br><span class="line">                return &#x27;&#x27;.join([map_morse[_] for _ in word])</span><br><span class="line">        trans_words = list(map(rotate_word, words))</span><br><span class="line">        return len(set(trans_words))</span><br></pre></td></tr></table></figure>
<ul>
<li><p>执行效果也是非常的好。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">执行用时：<span class="number">28</span> ms, 在所有 Python3 提交中击败了<span class="number">98.44</span>%的用户</span><br><span class="line">内存消耗：<span class="number">14.8</span> MB, 在所有 Python3 提交中击败了<span class="number">98.83</span>%的用户</span><br><span class="line">通过测试用例：</span><br><span class="line"><span class="number">82</span> / <span class="number">82</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="其他解法"><a href="#其他解法" class="headerlink" title="其他解法"></a>其他解法</h1><ul>
<li><p>神奇的一行？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将 ord(i) - ord(&#x27;a&#x27;) 映射到 MORSES 的索引</span><br><span class="line">对 word 按照字符索引匹配摩尔斯密码，然后求解集合的长度</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MORSES = [&quot;.-&quot;, &quot;-...&quot;, &quot;-.-.&quot;, &quot;-..&quot;, &quot;.&quot;, &quot;..-.&quot;, &quot;--.&quot;, &quot;....&quot;, &quot;..&quot;, &quot;.---&quot;, &quot;-.-&quot;, &quot;.-..&quot;, &quot;--&quot;,</span><br><span class="line">        &quot;-.&quot;, &quot;---&quot;, &quot;.--.&quot;, &quot;--.-&quot;, &quot;.-.&quot;, &quot;...&quot;, &quot;-&quot;, &quot;..-&quot;, &quot;...-&quot;, &quot;.--&quot;, &quot;-..-&quot;, &quot;-.--&quot;, &quot;--..&quot;]</span><br><span class="line"></span><br><span class="line">class Solution:</span><br><span class="line">    def uniqueMorseRepresentations(self, words: List[str]) -&gt; int:</span><br><span class="line">        return len(&#123;&#x27;&#x27;.join(MORSES[ord(i) - ord(&#x27;a&#x27;)] for i in w) for w in words&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>完结</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode_806. 写字符串需要的行数</title>
    <url>/2022/04/12/LeetCode-806-%E5%86%99%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%9C%80%E8%A6%81%E7%9A%84%E8%A1%8C%E6%95%B0/</url>
    <content><![CDATA[<h1 id="806-写字符串需要的行数"><a href="#806-写字符串需要的行数" class="headerlink" title="806. 写字符串需要的行数"></a>806. 写字符串需要的行数</h1><ul>
<li>难度：简单</li>
<li>原文：<a href="https://leetcode-cn.com/problems/number-of-lines-to-write-string/">https://leetcode-cn.com/problems/number-of-lines-to-write-string/</a></li>
<li>题目<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我们要把给定的字符串 S 从左到右写到每一行上，每一行的最大宽度为100个单位，如果我们在写某个字母的时候会使这行超过了100 个单位，那么我们应该把这个字母写到下一行。我们给定了一个数组 widths ，这个数组 widths[0] 代表 &#x27;a&#x27; 需要的单位， widths[1] 代表 &#x27;b&#x27; 需要的单位，...， widths[25] 代表 &#x27;z&#x27; 需要的单位。</span><br><span class="line"></span><br><span class="line">现在回答两个问题：至少多少行能放下S，以及最后一行使用的宽度是多少个单位？将你的答案作为长度为2的整数列表返回。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line">输入: </span><br><span class="line">widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]</span><br><span class="line">S = &quot;abcdefghijklmnopqrstuvwxyz&quot;</span><br><span class="line">输出: [3, 60]</span><br><span class="line">解释: </span><br><span class="line">所有的字符拥有相同的占用单位10。所以书写所有的26个字母，</span><br><span class="line">我们需要2个整行和占用60个单位的一行。</span><br><span class="line">示例 2:</span><br><span class="line">输入: </span><br><span class="line">widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]</span><br><span class="line">S = &quot;bbbcccdddaaa&quot;</span><br><span class="line">输出: [2, 4]</span><br><span class="line">解释: </span><br><span class="line">除去字母&#x27;a&#x27;所有的字符都是相同的单位10，并且字符串 &quot;bbbcccdddaa&quot; 将会覆盖 9 * 10 + 2 * 4 = 98 个单位.</span><br><span class="line">最后一个字母 &#x27;a&#x27; 将会被写到第二行，因为第一行只剩下2个单位了。</span><br><span class="line">所以，这个答案是2行，第二行有4个单位宽度。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">注:</span><br><span class="line"></span><br><span class="line">字符串 S 的长度在 [1, 1000] 的范围。</span><br><span class="line">S 只包含小写字母。</span><br><span class="line">widths 是长度为 26的数组。</span><br><span class="line">widths[i] 值的范围在 [2, 10]。</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/number-of-lines-to-write-string</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="我的思路"><a href="#我的思路" class="headerlink" title="我的思路"></a>我的思路</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 建立一个26个字母和密码的映射表</span><br><span class="line">2. 将目标字符串转化长度得到一个新的列表</span><br><span class="line">3. 逐一取出来，如果超过100，行+1，余下的数据重置为当前这个数</span><br></pre></td></tr></table></figure>

<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def numberOfLines(self, widths: List[int], s: str) -&gt; List[int]:</span><br><span class="line">        orig_str = &quot;abcdefghijklmnopqrstuvwxyz&quot;</span><br><span class="line">        map_s_wid = dict(zip(orig_str,widths))</span><br><span class="line">        tran_s = [map_s_wid[_] for _ in s]</span><br><span class="line">        res = 0</span><br><span class="line">        lines = 1</span><br><span class="line">        for _ in tran_s:</span><br><span class="line">            res = res + _</span><br><span class="line">            if res &gt; 100:</span><br><span class="line">                lines = lines +1</span><br><span class="line">                res = _</span><br><span class="line">        else:</span><br><span class="line">            return [lines,res]</span><br></pre></td></tr></table></figure>
<ul>
<li><p>执行效果也是非常的好。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">执行用时：<span class="number">36</span> ms, 在所有 Python3 提交中击败了<span class="number">72.22</span>%的用户</span><br><span class="line">内存消耗：<span class="number">14.8</span> MB, 在所有 Python3 提交中击败了<span class="number">95.03</span>%的用户</span><br><span class="line">通过测试用例：</span><br><span class="line"><span class="number">27</span> / <span class="number">27</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="其他解法-TODO"><a href="#其他解法-TODO" class="headerlink" title="其他解法 TODO"></a>其他解法 TODO</h1>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>完结</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Postman生成报告</title>
    <url>/2022/03/31/Postman%E7%94%9F%E6%88%90%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<h1 id="Postman生成报告"><a href="#Postman生成报告" class="headerlink" title="Postman生成报告"></a>Postman生成报告</h1><blockquote>
<p>POSTMAN的企业版是支持生成一个漂亮的报告的</p>
</blockquote>
<h2 id="newman安装"><a href="#newman安装" class="headerlink" title="newman安装"></a>newman安装</h2><ul>
<li><p>安装newman</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">npm install -g newman</span><br></pre></td></tr></table></figure></li>
<li><p>new报告插件安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">newman-reporter-html</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="POSTMAN中导出"><a href="#POSTMAN中导出" class="headerlink" title="POSTMAN中导出"></a>POSTMAN中导出</h2><ul>
<li><p>导出用例</p>
<p><img src="https://s2.loli.net/2022/03/31/4nt3yOgQGKlJBU1.png" alt="1648712267412.png"></p>
<p><img src="https://s2.loli.net/2022/03/31/JdifKSGBZg5WaRI.png" alt="1648712363265.png"></p>
</li>
<li><p>导出环境变量</p>
<p><img src="https://s2.loli.net/2022/03/31/4nt3yOgQGKlJBU1.png" alt="1648712267412.png"></p>
</li>
<li><p>这样会生成两个json文件</p>
<ul>
<li>教官系统.postman_collection.json</li>
<li>教官系统环境变量.postman_environment.json</li>
</ul>
</li>
</ul>
<h2 id="newman生成报告"><a href="#newman生成报告" class="headerlink" title="newman生成报告"></a>newman生成报告</h2><ul>
<li><p>newman其实是个命令行工具</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;newman -h</span><br><span class="line">Usage: newman [options] [command]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -v, --version               output the version number</span><br><span class="line">  -h, --<span class="built_in">help</span>                  display <span class="built_in">help</span> <span class="keyword">for</span> command</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  run [options] &lt;collection&gt;  Initiate a Postman Collection run <span class="keyword">from</span> a given URL <span class="keyword">or</span> path</span><br><span class="line"></span><br><span class="line">To get available options <span class="keyword">for</span> a command:</span><br><span class="line">  newman &lt;command&gt; -h</span><br></pre></td></tr></table></figure></li>
<li><p>可以看到关键是run命令，主要的参数和用法如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">newman run 用例.json -e 环境.json -r html  <span class="comment">#生成一个html报告</span></span><br><span class="line">newman run 用例.json -e 环境.json --bail newman  <span class="comment">#console打印</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>cmd示例,html的就不看了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">newman run 教官系统.postman_collection.json -e 教官系统环境变量.postman_environment.json --bail newman</span></span><br><span class="line">newman</span><br><span class="line"></span><br><span class="line">教官系统</span><br><span class="line"></span><br><span class="line">→ 登录</span><br><span class="line">  POST http://124.223.33.41:7081/api/mgr/loginReq ―[200 OK, 256B, 214ms]</span><br><span class="line">  1. Response time is less than 200ms</span><br><span class="line">  √  Status code name has string</span><br><span class="line">  √  Status code is 200</span><br><span class="line">  ┌</span><br><span class="line">  │ &#x27;&#123;&quot;retcode&quot;: 0&#125;&#x27;</span><br><span class="line">  │ [</span><br><span class="line">  │   &#123;</span><br><span class="line">  │     name: &#x27;sessionid&#x27;,</span><br><span class="line">  │     expires: null,</span><br><span class="line">  │     maxAge: 0,</span><br><span class="line">  │     domain: &#x27;124.223.33.41&#x27;,</span><br><span class="line">  │     path: &#x27;/&#x27;,</span><br><span class="line">  │     secure: false,</span><br><span class="line">  │     httpOnly: true,</span><br><span class="line">  │     hostOnly: true,</span><br><span class="line">  │     value: &#x27;5nhn3fuygio2bddi1vodi7nk79vnusdr&#x27;</span><br><span class="line">  │   &#125;</span><br><span class="line">  │ ]</span><br><span class="line">  └</span><br><span class="line"></span><br><span class="line">→ 添加课程</span><br><span class="line">  POST http://124.223.33.41:7081/api/mgr/sq_mgr/ [200 OK, 194B, 36ms]</span><br><span class="line">  √  Status code is 200</span><br><span class="line"></span><br><span class="line">→ 列出课程</span><br><span class="line">  GET http://124.223.33.41:7081/api/mgr/sq_mgr/?action=list_course&amp;pagenum=1&amp;pagesize=20 [200 OK, 546B, 20ms]</span><br><span class="line"></span><br><span class="line">→ 修改课程</span><br><span class="line">  PUT http://124.223.33.41:7081/api/mgr/sq_mgr/ [200 OK, 182B, 49ms]</span><br><span class="line"></span><br><span class="line">→ 删除课程</span><br><span class="line">  DELETE http://124.223.33.41:7081/api/mgr/sq_mgr/ [200 OK, 182B, 39ms]</span><br><span class="line"></span><br><span class="line">┌─────────────────────────┬───────────────────┬───────────────────┐</span><br><span class="line">│                         │          executed │            failed │</span><br><span class="line">├─────────────────────────┼───────────────────┼───────────────────┤</span><br><span class="line">│              iterations │                 1 │                 0 │</span><br><span class="line">├─────────────────────────┼───────────────────┼───────────────────┤</span><br><span class="line">│                requests │                 5 │                 0 │</span><br><span class="line">├─────────────────────────┼───────────────────┼───────────────────┤</span><br><span class="line">│            test-scripts │                 3 │                 0 │</span><br><span class="line">├─────────────────────────┼───────────────────┼───────────────────┤</span><br><span class="line">│      prerequest-scripts │                 1 │                 0 │</span><br><span class="line">├─────────────────────────┼───────────────────┼───────────────────┤</span><br><span class="line">│              assertions │                 4 │                 1 │</span><br><span class="line">├─────────────────────────┴───────────────────┴───────────────────┤</span><br><span class="line">│ total run duration: 793ms                                       │</span><br><span class="line">├─────────────────────────────────────────────────────────────────┤</span><br><span class="line">│ total data received: 445B (approx)                              │</span><br><span class="line">├─────────────────────────────────────────────────────────────────┤</span><br><span class="line">│ average response time: 71ms [min: 20ms, max: 214ms, s.d.: 71ms] │</span><br><span class="line">└─────────────────────────────────────────────────────────────────┘</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"> failure                detail</span></span><br><span class="line"></span><br><span class="line"> 1.  AssertionError         Response time is less than 200ms</span><br><span class="line">                            expected 214 to be below 200</span><br><span class="line">                            at assertion:0 in test-script</span><br><span class="line">                            inside &quot;登录&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="附录：run命令所有帮助"><a href="#附录：run命令所有帮助" class="headerlink" title="附录：run命令所有帮助"></a>附录：run命令所有帮助</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;newman run -h</span><br><span class="line">Usage: newman run &lt;collection&gt; [options]</span><br><span class="line"></span><br><span class="line">Initiate a Postman Collection run <span class="keyword">from</span> a given URL <span class="keyword">or</span> path</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -e, --environment &lt;path&gt;              Specify a URL <span class="keyword">or</span> path to a Postman Environment</span><br><span class="line">  -g, --<span class="built_in">globals</span> &lt;path&gt;                  Specify a URL <span class="keyword">or</span> path to a file containing Postman Globals</span><br><span class="line">  -r, --reporters [reporters]           Specify the reporters to use <span class="keyword">for</span> this run (default: [<span class="string">&quot;cli&quot;</span>])</span><br><span class="line">  -n, --iteration-count &lt;n&gt;             Define the number of iterations to run</span><br><span class="line">  -d, --iteration-data &lt;path&gt;           Specify a data file to use <span class="keyword">for</span> iterations (either JSON <span class="keyword">or</span> CSV)</span><br><span class="line">  --folder &lt;path&gt;                       Specify the folder to run <span class="keyword">from</span> a collection. Can be specified multiple times to</span><br><span class="line">                                        run multiple folders (default: [])</span><br><span class="line">  --<span class="keyword">global</span>-var &lt;value&gt;                  Allows the specification of <span class="keyword">global</span> variables via the command line, <span class="keyword">in</span> a</span><br><span class="line">                                        key=value <span class="built_in">format</span> (default: [])</span><br><span class="line">  --env-var &lt;value&gt;                     Allows the specification of environment variables via the command line, <span class="keyword">in</span> a</span><br><span class="line">                                        key=value <span class="built_in">format</span> (default: [])</span><br><span class="line">  --export-environment &lt;path&gt;           Exports the final environment to a file after completing the run</span><br><span class="line">  --export-<span class="built_in">globals</span> &lt;path&gt;               Exports the final <span class="built_in">globals</span> to a file after completing the run</span><br><span class="line">  --export-collection &lt;path&gt;            Exports the executed collection to a file after completing the run</span><br><span class="line">  --postman-api-key &lt;apiKey&gt;            API Key used to load the resources <span class="keyword">from</span> the Postman API</span><br><span class="line">  --bail [modifiers]                    Specify whether <span class="keyword">or</span> <span class="keyword">not</span> to gracefully stop a collection run on encountering an</span><br><span class="line">                                        error <span class="keyword">and</span> whether to end the run <span class="keyword">with</span> an error based on the optional modifier</span><br><span class="line">  --ignore-redirects                    Prevents Newman <span class="keyword">from</span> automatically following 3XX redirect responses</span><br><span class="line">  -x , --suppress-exit-code             Specify whether <span class="keyword">or</span> <span class="keyword">not</span> to override the default exit code <span class="keyword">for</span> the current run</span><br><span class="line">  --silent                              Prevents Newman <span class="keyword">from</span> showing output to CLI</span><br><span class="line">  --disable-unicode                     Forces Unicode compliant symbols to be replaced by their plain text equivalents</span><br><span class="line">  --color &lt;value&gt;                       Enable/Disable colored output (auto|on|off) (default: <span class="string">&quot;auto&quot;</span>)</span><br><span class="line">  --delay-request [n]                   Specify the extent of delay between requests (milliseconds) (default: <span class="number">0</span>)</span><br><span class="line">  --timeout [n]                         Specify a timeout <span class="keyword">for</span> collection run (milliseconds) (default: <span class="number">0</span>)</span><br><span class="line">  --timeout-request [n]                 Specify a timeout <span class="keyword">for</span> requests (milliseconds) (default: <span class="number">0</span>)</span><br><span class="line">  --timeout-script [n]                  Specify a timeout <span class="keyword">for</span> scripts (milliseconds) (default: <span class="number">0</span>)</span><br><span class="line">  --working-<span class="built_in">dir</span> &lt;path&gt;                  Specify the path to the working directory</span><br><span class="line">  --no-insecure-file-read               Prevents reading the files situated outside of the working directory</span><br><span class="line">  -k, --insecure                        Disables SSL validations</span><br><span class="line">  --ssl-client-cert-<span class="built_in">list</span> &lt;path&gt;         Specify the path to a client certificates configurations (JSON)</span><br><span class="line">  --ssl-client-cert &lt;path&gt;              Specify the path to a client certificate (PEM)</span><br><span class="line">  --ssl-client-key &lt;path&gt;               Specify the path to a client certificate private key</span><br><span class="line">  --ssl-client-passphrase &lt;passphrase&gt;  Specify the client certificate passphrase (<span class="keyword">for</span> protected key)</span><br><span class="line">  --ssl-extra-ca-certs &lt;path&gt;           Specify additionally trusted CA certificates (PEM)</span><br><span class="line">  --cookie-jar &lt;path&gt;                   Specify the path to a custom cookie jar (serialized tough-cookie JSON)</span><br><span class="line">  --export-cookie-jar &lt;path&gt;            Exports the cookie jar to a file after completing the run</span><br><span class="line">  --verbose                             Show detailed information of collection run <span class="keyword">and</span> each request sent</span><br><span class="line">  -h, --<span class="built_in">help</span>                            display <span class="built_in">help</span> <span class="keyword">for</span> command</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>postman</category>
      </categories>
      <tags>
        <tag>完结</tag>
        <tag>postman</tag>
        <tag>api</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode_788. 旋转数字</title>
    <url>/2022/04/04/LeetCode-788-%E6%97%8B%E8%BD%AC%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<ul>
<li>难度：简单</li>
<li>原文：<a href="https://leetcode-cn.com/problems/rotated-digits/">https://leetcode-cn.com/problems/rotated-digits/</a></li>
<li>题目<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我们称一个数 X 为好数, 如果它的每位数字逐个地被旋转 180 度后，我们仍可以得到一个有效的，且和 X 不同的数。要求每位数字都要被旋转。</span><br><span class="line"></span><br><span class="line">如果一个数的每位数字被旋转以后仍然还是一个数字， 则这个数是有效的。0, 1, 和 8 被旋转后仍然是它们自己；2 和 5 可以互相旋转成对方（在这种情况下，它们以不同的方向旋转，换句话说，2 和 5 互为镜像）；6 和 9 同理，除了这些以外其他的数字旋转以后都不再是有效的数字。</span><br><span class="line"></span><br><span class="line">现在我们有一个正整数 N, 计算从 1 到 N 中有多少个数 X 是好数？</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line"></span><br><span class="line">输入: 10</span><br><span class="line">输出: 4</span><br><span class="line">解释: </span><br><span class="line">在[1, 10]中有四个好数： 2, 5, 6, 9。</span><br><span class="line">注意 1 和 10 不是好数, 因为他们在旋转之后不变。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">N 的取值范围是 [1, 10000]。</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/rotated-digits</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一开始我想复杂了，还想着去翻转每个数字，用字典来实现。</span><br><span class="line">后来想想其实这题很简单。</span><br><span class="line">凡是符合条件的数，有2个特点</span><br><span class="line">1. 不能有347</span><br><span class="line">2. 不能没有2569</span><br><span class="line">就这么简单，所以做法出来。</span><br></pre></td></tr></table></figure></li>
<li><p>示例代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def rotatedDigits(self, N: int) -&gt; int:</span><br><span class="line">        result = 0</span><br><span class="line">        for i in range(1,N+1):</span><br><span class="line">            if &quot;3&quot; in str(i) or &quot;4&quot; in str(i) or &quot;7&quot; in str(i):</span><br><span class="line">                continue</span><br><span class="line">            elif &quot;2&quot;  in str(i)  or &quot;5&quot;  in str(i) or &quot;6&quot;  in str(i) or &quot;9&quot;  in str(i):</span><br><span class="line">                result = result +1</span><br><span class="line">        else:</span><br><span class="line">            return result </span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>执行效果也是非常的好。</p>
</li>
</ul>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/25/171b19933ac038fc~tplv-t2oaga2asx-image.image"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>完结</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python小程序_MD5常见操作</title>
    <url>/2022/04/03/Python%E5%B0%8F%E7%A8%8B%E5%BA%8F-MD5%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="MD5不是加密"><a href="#MD5不是加密" class="headerlink" title="MD5不是加密"></a>MD5不是加密</h1><blockquote>
<p><a href="https://draveness.me/whys-the-design-password-with-md5/">https://draveness.me/whys-the-design-password-with-md5/</a>   参考为什么这么设计</p>
</blockquote>
<ul>
<li><p><strong>Message-Digest Algorithm 5</strong>：信息摘要算法</p>
</li>
<li><p>MD5 并不是一种加密算法，我们也可以叫它哈希函数</p>
</li>
<li><p>世界上最常见的20个密码，类似建立一个彩虹表进行碰撞，以达到<em>解密</em>的效果。</p>
<ul>
<li><a href="https://md5.hwcha.com/">https://md5.hwcha.com/</a></li>
<li><a href="https://www.sojson.com/md5/">https://www.sojson.com/md5/</a></li>
</ul>
<table>
<thead>
<tr>
<th>RANK</th>
<th>2021</th>
<th>MD5值(32位小写)</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>123456</td>
<td>e10adc3949ba59abbe56e057f20f883e</td>
</tr>
<tr>
<td>2</td>
<td>123456789</td>
<td>25f9e794323b453885f5181f1b624d0b</td>
</tr>
<tr>
<td>3</td>
<td>12345</td>
<td>827ccb0eea8a706c4c34a16891f84e7b</td>
</tr>
<tr>
<td>4</td>
<td>qwerty</td>
<td>d8578edf8458ce06fbc5bb76a58c5ca4</td>
</tr>
<tr>
<td>5</td>
<td>password</td>
<td>5f4dcc3b5aa765d61d8327deb882cf99</td>
</tr>
<tr>
<td>6</td>
<td>12345678</td>
<td>25d55ad283aa400af464c76d713c07ad</td>
</tr>
<tr>
<td>7</td>
<td>111111</td>
<td>96e79218965eb72c92a549dd5a330112</td>
</tr>
<tr>
<td>8</td>
<td>123123</td>
<td>4297f44b13955235245b2497399d7a93</td>
</tr>
<tr>
<td>9</td>
<td>1234567890</td>
<td>e807f1fcf82d132f9bb018ca6738a19f</td>
</tr>
<tr>
<td>10</td>
<td>1234567</td>
<td>fcea920f7412b5da7be0cf42b8c93759</td>
</tr>
<tr>
<td>11</td>
<td>qwerty123</td>
<td>3fc0a7acf087f549ac2b266baf94b8b1</td>
</tr>
<tr>
<td>12</td>
<td>000000</td>
<td>670b14728ad9902aecba32e22fa4f6bd</td>
</tr>
<tr>
<td>13</td>
<td>1q2w3e</td>
<td>3fde6bb0541387e4ebdadf7c2ff31123</td>
</tr>
<tr>
<td>14</td>
<td>aa12345678</td>
<td>d4f2a60315eef2b600cf0240ac0c37ad</td>
</tr>
<tr>
<td>15</td>
<td>abc123</td>
<td>e99a18c428cb38d5f260853678922e03</td>
</tr>
<tr>
<td>16</td>
<td>password1</td>
<td>7c6a180b36896a0a8c02787eeafb0e4c</td>
</tr>
<tr>
<td>17</td>
<td>1234</td>
<td>81dc9bdb52d04dc20036dbd8313ed055</td>
</tr>
<tr>
<td>18</td>
<td>qwertyuiop</td>
<td>6eea9b7ef19179a06954edd0f6c05ceb</td>
</tr>
<tr>
<td>19</td>
<td>123321</td>
<td>c8837b23ff8aaa8a2dde915473ce0991</td>
</tr>
<tr>
<td>20</td>
<td>password123</td>
<td>482c811da5d5b4bc6d497ffa98491e38</td>
</tr>
</tbody></table>
</li>
<li><p>为什么说MD5不是加密呢？</p>
<ul>
<li>数据源是无穷尽的，而 MD5密文是有限的。所以不存在MD5解密。</li>
<li>MD5 哈希的信息无法被还原，只依靠 MD5 是无法完成加密的。</li>
</ul>
</li>
<li><p>哈希加盐salt</p>
<ul>
<li>在原始字符串的基础上增加一个字符串，得到一个新的”密码”。</li>
<li>/etc/passwd早期就是这么存储密码的</li>
</ul>
</li>
<li><p>密码的破解（哈希碰撞）</p>
<ul>
<li>攻击者其实不需要知道用户的密码是什么，他只需要找到一个值 <code>value</code>，这个值加盐后的哈希与密码加盐后的哈希完全一致就能登录用户的账号</li>
<li>可以了解下hashcat（github搜）</li>
</ul>
</li>
</ul>
<h1 id="Python中的MD5”加密”"><a href="#Python中的MD5”加密”" class="headerlink" title="Python中的MD5”加密”"></a>Python中的MD5”加密”</h1><ul>
<li><p>加密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">ori_pwd = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">byte_ori_pwd = ori_pwd.encode(<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment">#bytes对象</span></span><br><span class="line"><span class="built_in">print</span>(hashlib.md5(byte_ori_pwd).hexdigest())</span><br><span class="line"><span class="comment">#e10adc3949ba59abbe56e057f20f883e  都是这个</span></span><br><span class="line"><span class="built_in">print</span>(hashlib.md5(<span class="string">b&#x27;123456&#x27;</span>).hexdigest())</span><br></pre></td></tr></table></figure></li>
<li><p>得到的是32位小写，如果要32位大写、16位大小写，那就简单处理下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">ori_pwd = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">byte_ori_pwd = ori_pwd.encode(<span class="string">&#x27;utf-8&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;32位小写: &#x27;</span>,hashlib.md5(byte_ori_pwd).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;32位大写: &#x27;</span>,hashlib.md5(byte_ori_pwd).hexdigest().upper())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;16位小写: &#x27;</span>,hashlib.md5(byte_ori_pwd).hexdigest()[<span class="number">8</span>:-<span class="number">8</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;16位大写: &#x27;</span>,hashlib.md5(byte_ori_pwd).hexdigest()[<span class="number">8</span>:-<span class="number">8</span>].upper())</span><br></pre></td></tr></table></figure></li>
<li><p>加盐</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_md5</span>(<span class="params">ori_str:<span class="built_in">str</span>,salt:<span class="built_in">str</span>=<span class="string">&#x27;&#x27;</span>,mode:<span class="built_in">str</span>=<span class="string">&#x27;1&#x27;</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取字符串的MD加密后的信息</span></span><br><span class="line"><span class="string">    :param ori_str: 原始字符串</span></span><br><span class="line"><span class="string">    :param salt: 盐值</span></span><br><span class="line"><span class="string">    :param mode: 1=32小  2=32大 3=16小 4=16大</span></span><br><span class="line"><span class="string">    :return: MD5后的字符串</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    md5_password = hashlib.md5((ori_str+salt).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> md5_password</span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> md5_password.upper()</span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> md5_password[<span class="number">8</span>:-<span class="number">8</span>]</span><br><span class="line">    <span class="keyword">if</span> mode == <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> md5_password[<span class="number">8</span>:-<span class="number">8</span>].upper()</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">f&#x27;unsupport mode <span class="subst">&#123;mode&#125;</span>,only support 1,2,3,4&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;不加盐:&#x27;</span>,get_md5(<span class="string">&#x27;123456&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;加盐:&#x27;</span>,get_md5(<span class="string">&#x27;123456&#x27;</span>,salt=<span class="string">&#x27;nanjing&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;不加盐:&#x27;</span>,get_md5(<span class="string">&#x27;123456&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;不加盐16位小写:&#x27;</span>,get_md5(<span class="string">&#x27;123456&#x27;</span>,salt=<span class="string">&#x27;nanjing&#x27;</span>,mode=<span class="string">&#x27;3&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;不加盐16位小写:&#x27;</span>,get_md5(<span class="string">&#x27;123456&#x27;</span>,salt=<span class="string">&#x27;nanjing&#x27;</span>,mode=<span class="string">&#x27;5&#x27;</span>))</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>完结</tag>
        <tag>python</tag>
        <tag>MD5</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中的super</title>
    <url>/2022/04/12/Python%E4%B8%AD%E7%9A%84super/</url>
    <content><![CDATA[<h1 id="Python中的super"><a href="#Python中的super" class="headerlink" title="Python中的super"></a>Python中的super</h1><blockquote>
<p><a href="https://www.bilibili.com/video/BV1FL4y1E7xK">https://www.bilibili.com/video/BV1FL4y1E7xK</a>  参考了码农高天的视频</p>
</blockquote>
<h1 id="先看简单示例"><a href="#先看简单示例" class="headerlink" title="先看简单示例"></a>先看简单示例</h1><ul>
<li><p>代码0：基类的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;A init...&#x27;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span> saying&#x27;</span>)</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">drink</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;drinking...&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>代码1：子类（第一个版本）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B1</span>(<span class="title class_ inherited__">A</span>):  <span class="comment">#没有对super调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;B1 init...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">b = B1(<span class="string">&#x27;wuxianfeng&#x27;</span>)  <span class="comment">#B1 init...</span></span><br><span class="line">b.drink()  <span class="comment">#drinking...</span></span><br><span class="line">b.say()    <span class="comment">#报错了，没属性name  #AttributeError: &#x27;B1&#x27; object has no attribute &#x27;name&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>你会输出B init…，但没有输出A init…，所以你这个继承丢失了父类A的初始化。</li>
</ul>
</li>
<li><p>对于pycharm这样的IDE，会提示你如下图：缺少对超类__init__的调用，你点击蓝色的添加超类调用，就会生成代码</p>
<p><img src="https://s3.bmp.ovh/imgs/2022/04/12/2cb8cf31b925d19b.png"></p>
<p><img src="C:/Users/songqin008/AppData/Roaming/Typora/typora-user-images/1649662766028.png" alt="1649662766028"></p>
</li>
<li><p>代码2：添加了超类的调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B2</span>(<span class="title class_ inherited__">A</span>):  <span class="comment">#有对super调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name) <span class="comment">#点击蓝色的添加超类调用产生的代码</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;B2 init...&#x27;</span>)</span><br><span class="line">b = B2(<span class="string">&#x27;wuxianfeng&#x27;</span>)  <span class="comment">#A init...  # B2 init...</span></span><br><span class="line">b.drink()  <span class="comment">#drinking...</span></span><br><span class="line">b.say()    <span class="comment">#wuxianfeng saying</span></span><br></pre></td></tr></table></figure>

<ul>
<li>你可以想见super()的意思就是B2的父类A，所以我们可以换个写法</li>
</ul>
</li>
<li><p>代码3：换一个写法的调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B3</span>(<span class="title class_ inherited__">A</span>):  <span class="comment">#有对super调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        A.__init__(self,name)  <span class="comment">#注意A没有()，init的调用self不能少，name也是要的（跟A的初始化函数有关）</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;B3 init...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">b = B3(<span class="string">&#x27;wuxianfeng&#x27;</span>)</span><br><span class="line">b.drink()</span><br><span class="line">b.say()</span><br></pre></td></tr></table></figure></li>
<li><p>代码4：再换一个写法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B4</span>(<span class="title class_ inherited__">A</span>):  <span class="comment">#有对super调用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">super</span>(B4,self).__init__(name)   <span class="comment">#注意super(当前类名,self).__init__(父类初始化需要的参数)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;B4 init...&#x27;</span>)</span><br><span class="line">b = B4(<span class="string">&#x27;wuxianfeng&#x27;</span>)</span><br><span class="line">b.drink()</span><br><span class="line">b.say()</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="super的DOC"><a href="#super的DOC" class="headerlink" title="super的DOC"></a>super的DOC</h1><ul>
<li><p>所以super不是方法不是函数也不是关键字啥的，是个类！</p>
</li>
<li><p>在IDE中点击super能得到如下提示，摘录部分，也就是super.__doc__</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">super</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    super() -&gt; same as super(__class__, &lt;first argument&gt;)</span></span><br><span class="line"><span class="string">    super(type) -&gt; unbound super object</span></span><br><span class="line"><span class="string">    super(type, obj) -&gt; bound super object; requires isinstance(obj, type)</span></span><br><span class="line"><span class="string">    super(type, type2) -&gt; bound super object; requires issubclass(type2, type)</span></span><br><span class="line"><span class="string">    Typical use to call a cooperative superclass method:</span></span><br><span class="line"><span class="string">    class C(B):</span></span><br><span class="line"><span class="string">        def meth(self, arg):</span></span><br><span class="line"><span class="string">            super().meth(arg)</span></span><br><span class="line"><span class="string">    This works for class methods too:</span></span><br><span class="line"><span class="string">    class C(B):</span></span><br><span class="line"><span class="string">        @classmethod</span></span><br><span class="line"><span class="string">        def cmeth(cls, arg):</span></span><br><span class="line"><span class="string">            super().cmeth(arg)</span></span><br></pre></td></tr></table></figure></li>
<li><p>四种用法</p>
<ul>
<li><strong>super()，等价于super(__class__, &lt;first argument&gt;)</strong></li>
<li>super(type),unbound super object</li>
<li><strong>super(type,obj),bound super object，requires isinstance(obj, type)</strong></li>
<li>super(type1,type2),bound super object，requires issubclass(type2, type)</li>
</ul>
</li>
<li><p>其实我们简单来说，你用的无非是1和3</p>
</li>
<li><p>稍微进一步你可能要去理解bound和unbound</p>
</li>
</ul>
<h1 id="看另外一个示例"><a href="#看另外一个示例" class="headerlink" title="看另外一个示例"></a>看另外一个示例</h1><ul>
<li><p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> objprint <span class="keyword">import</span> op   <span class="comment">#打印对象信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Male</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="comment">#super().__init__(name)</span></span><br><span class="line">        <span class="built_in">super</span>(Male, self).__init__(name)   <span class="comment">#这两句是一样的</span></span><br><span class="line">        self.sex = <span class="string">&#x27;male&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wuhanyu = Male(<span class="string">&#x27;wuhanyu&#x27;</span>)</span><br><span class="line">op(wuhanyu)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Male 0x22f114758e0</span><br><span class="line">  .name = &#x27;wuhanyu&#x27;,</span><br><span class="line">  .sex = &#x27;male&#x27;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>super中有2个参数，第一个是type（也就是一个class），第二个是type或者ojbect，第二个参数决定了这个函数？bind到哪个object或者class上。同时第二个参数决定了使用哪个mro。第一个参数也决定了在mro这个链上从哪个class开始找。</p>
</li>
<li><p>片段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">super</span>().__init__(name)</span><br><span class="line">等价于</span><br><span class="line"><span class="built_in">super</span>(Male, self).__init__(name) </span><br><span class="line">	Male是个<span class="keyword">class</span></span><br><span class="line">    <span class="title class_">self是个object</span></span><br></pre></td></tr></table></figure></li>
<li><p>super(Male,self)做的事情是，</p>
<ul>
<li><p>首先，从self这个object中拿到mro.如下，Male-&gt;Person-&gt;object；</p>
</li>
<li><p>然后，找到Male在MRO中所处的位置（当前情况下就是第一个），然后找Male后面的（也就是Person，object）开始找，第一个找到的是Person，然后看Person中是否存在__init__这个函数，如果有（确实有），就把__init__这个函数bind到self上，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"><span class="built_in">print</span>(inspect.getmro(Male)) </span><br><span class="line">===&gt;(&lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.Male&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.Person&#x27;</span>&gt;, &lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;)</span><br></pre></td></tr></table></figure></li>
<li><p>所以综上，又有一个等价关系</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">super</span>().__init__(name)</span><br><span class="line">等价于</span><br><span class="line"><span class="built_in">super</span>(Male, self).__init__(name) </span><br><span class="line">等价于</span><br><span class="line">Person.__init__(self,name)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>那么为何不用Person.的方式，用super比较好呢？super是动态的，Person就写死了，如果你哪天改变了继承关系，那Person.就不合适了。</p>
<ul>
<li>改变基类的名字</li>
<li>改变继承的方式</li>
<li>super是动态的</li>
</ul>
</li>
<li></li>
</ul>
<h1 id="关于super是动态的示例"><a href="#关于super是动态的示例" class="headerlink" title="关于super是动态的示例"></a>关于super是动态的示例</h1><ul>
<li><p>修改上面的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> objprint <span class="keyword">import</span> op</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,age</span>):</span><br><span class="line">        self.age = age</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name,age</span>):</span><br><span class="line">        <span class="built_in">super</span>(Person, self).__init__(age)</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Male</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name,age</span>):</span><br><span class="line">        <span class="comment"># super().__init__(name,age)</span></span><br><span class="line">        <span class="built_in">super</span>(Male, self).__init__(name,age)</span><br><span class="line">        self.sex = <span class="string">&#x27;male&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wuhanyu = Male(<span class="string">&#x27;wuhanyu&#x27;</span>,<span class="number">18</span>)</span><br><span class="line">op(wuhanyu)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果把15行改为如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">super</span>(Person, self).__init__(name,age)</span><br></pre></td></tr></table></figure></li>
<li><p>事实是报错了，因为根据前面说的MRO搜索，super(Person, self)，从Person往后找它的MRO链，第一个是Animal，初始化的时候只需age参数，你现在传递了2个参数</p>
</li>
<li><p>修改下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Male</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,age</span>):   <span class="comment">#此处改了</span></span><br><span class="line">        <span class="comment">#super().__init__(name,age)</span></span><br><span class="line">        <span class="built_in">super</span>(Person, self).__init__(age)  <span class="comment">#此处改了</span></span><br><span class="line">        self.sex = <span class="string">&#x27;male&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wuhanyu = Male(<span class="number">18</span>)   <span class="comment">#此处改了</span></span><br><span class="line">op(wuhanyu)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Male 0x238fd4e5d90</span><br><span class="line">  .age = 18,</span><br><span class="line">  .sex = &#x27;male&#x27;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>你会发现跳过了Person，没有name了，只有age和sex了！</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="super可以在class之外使用"><a href="#super可以在class之外使用" class="headerlink" title="super可以在class之外使用"></a>super可以在class之外使用</h2><ul>
<li><p>片段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wuhanyu = Male(<span class="number">18</span>)</span><br><span class="line"><span class="built_in">super</span>(Male,wuhanyu).__init__(<span class="string">&#x27;wuxianfeng&#x27;</span>,<span class="number">19</span>)</span><br><span class="line">op(wuhanyu)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Male 0x1cc841870a0</span><br><span class="line">  .age = 19,         #一开始是18，后来被覆盖了</span><br><span class="line">  .name = &#x27;wuxianfeng&#x27;,</span><br><span class="line">  .sex = &#x27;male&#x27;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>这句话的含义其实是，从m这个对象的mro上寻找Male后面的__init__函数，就对应了Person的，</p>
</li>
</ul>
<h1 id="特例"><a href="#特例" class="headerlink" title="特例"></a>特例</h1><ul>
<li><p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().say()</span><br><span class="line">        <span class="comment">#super(B,self).say()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">M</span>(B,C):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">#super().say()</span></span><br><span class="line">        B.say(self)</span><br><span class="line">m = M()</span><br><span class="line">m.say()</span><br></pre></td></tr></table></figure></li>
<li><p>上面的打印结果是什么？</p>
</li>
</ul>
<ul>
<li>是C</li>
<li>B和C好像没有任何关系</li>
<li>但是m这个实例对象，是M object，的父类是B和C，其MRO是B-&gt;C-&gt;A</li>
<li>而B中的第七行，跟第八行是一样的，第八行中的self是m，</li>
<li>m找到B之后下面找的是C，C的say是输出c</li>
<li>这么理解不知道是否能明白。</li>
<li>所以很多人会认为super是调用父类的同名函数，这是不够准确的。</li>
</ul>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ul>
<li><p>super的用法，有四种，13最常用</p>
<ul>
<li><strong>super()</strong></li>
<li>super(type)</li>
<li><strong>super(type,obj)</strong></li>
<li>super(type1,type2)</li>
</ul>
</li>
<li><p>super在多重继承(C-&gt;B-&gt;A)的时候可以选择性跳过某个父节点</p>
</li>
<li><p>super在多重继承(D-&gt;C|B-&gt;A)的时候要注意其MRO</p>
</li>
<li><p>显式调用super，传入参数，搜索MRO</p>
</li>
<li><p>super中有2个参数，第一个是type（也就是一个class），第二个是type或者ojbect，第二个参数决定了这个函数？bind到哪个object或者class上。同时第二个参数决定了使用哪个mro。第一个参数也决定了在mro这个链上从哪个class开始找</p>
</li>
<li><p>super还可以在函数外调用</p>
</li>
<li><p>难一些的是bound和unbound</p>
</li>
</ul>
<ul>
<li></li>
</ul>
<h1 id="附录1：super的源码"><a href="#附录1：super的源码" class="headerlink" title="附录1：super的源码"></a>附录1：super的源码</h1><ul>
<li><p>在typeobject.c这个文件中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PyTypeObject PySuper_Type = &#123;</span><br><span class="line">    PyVarObject_HEAD_INIT(&amp;PyType_Type, <span class="number">0</span>)</span><br><span class="line">    <span class="string">&quot;super&quot;</span>,                                    <span class="comment">/* tp_name */</span></span><br><span class="line">    <span class="keyword">sizeof</span>(superobject),                        <span class="comment">/* tp_basicsize */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_itemsize */</span></span><br><span class="line">    <span class="comment">/* methods */</span></span><br><span class="line">    super_dealloc,                              <span class="comment">/* tp_dealloc */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_vectorcall_offset */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_getattr */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_setattr */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_as_async */</span></span><br><span class="line">    super_repr,                                 <span class="comment">/* tp_repr */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_as_number */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_as_sequence */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_as_mapping */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_hash */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_call */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_str */</span></span><br><span class="line">    super_getattro,                             <span class="comment">/* tp_getattro */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_setattro */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_as_buffer */</span></span><br><span class="line">    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC |</span><br><span class="line">        Py_TPFLAGS_BASETYPE,                    <span class="comment">/* tp_flags */</span></span><br><span class="line">    super_doc,                                  <span class="comment">/* tp_doc */</span></span><br><span class="line">    super_traverse,                             <span class="comment">/* tp_traverse */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_clear */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_richcompare */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_weaklistoffset */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_iter */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_iternext */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_methods */</span></span><br><span class="line">    super_members,                              <span class="comment">/* tp_members */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_getset */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_base */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_dict */</span></span><br><span class="line">    super_descr_get,                            <span class="comment">/* tp_descr_get */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_descr_set */</span></span><br><span class="line">    <span class="number">0</span>,                                          <span class="comment">/* tp_dictoffset */</span></span><br><span class="line">    super_init,                                 <span class="comment">/* tp_init */</span></span><br><span class="line">    PyType_GenericAlloc,                        <span class="comment">/* tp_alloc */</span></span><br><span class="line">    PyType_GenericNew,                          <span class="comment">/* tp_new */</span></span><br><span class="line">    PyObject_GC_Del,                            <span class="comment">/* tp_free */</span></span><br><span class="line">    .tp_vectorcall = (vectorcallfunc)super_vectorcall,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="附录2：super在pythondoc上的解释"><a href="#附录2：super在pythondoc上的解释" class="headerlink" title="附录2：super在pythondoc上的解释"></a>附录2：super在pythondoc上的解释</h1><h2 id="英文版-super-type-object-or-type"><a href="#英文版-super-type-object-or-type" class="headerlink" title="英文版 super([type[, object-or-type]])"></a>英文版 super([type[, object-or-type]])</h2><p>Return a proxy object that delegates method calls to a parent or sibling class of type. This is useful for accessing inherited methods that have been overridden in a class.</p>
<p>The object-or-type determines the method resolution order to be searched. The search starts from the class right after the type.</p>
<p>For example, if __mro__ of object-or-type is D -&gt; B -&gt; C -&gt; A -&gt; object and the value of type is B, then super() searches C -&gt; A -&gt; object.</p>
<p>The __mro__ attribute of the object-or-type lists the method resolution search order used by both getattr() and super(). The attribute is dynamic and can change whenever the inheritance hierarchy is updated.</p>
<p>If the second argument is omitted, the super object returned is unbound. If the second argument is an object, isinstance(obj, type) must be true. If the second argument is a type, issubclass(type2, type) must be true (this is useful for classmethods).</p>
<p>There are two typical use cases for super. In a class hierarchy with single inheritance, super can be used to refer to parent classes without naming them explicitly, thus making the code more maintainable. This use closely parallels the use of super in other programming languages.</p>
<p>The second use case is to support cooperative multiple inheritance in a dynamic execution environment. This use case is unique to Python and is not found in statically compiled languages or languages that only support single inheritance. This makes it possible to implement “diamond diagrams” where multiple base classes implement the same method. Good design dictates that such implementations have the same calling signature in every case (because the order of calls is determined at runtime, because that order adapts to changes in the class hierarchy, and because that order can include sibling classes that are unknown prior to runtime).</p>
<p>For both use cases, a typical superclass call looks like this:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">B</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">method</span>(<span class="params">self, arg</span>):</span><br><span class="line">        <span class="built_in">super</span>().method(arg)    <span class="comment"># This does the same thing as:</span></span><br><span class="line">                               <span class="comment"># super(C, self).method(arg)</span></span><br></pre></td></tr></table></figure>

<p>In addition to method lookups, super() also works for attribute lookups. One possible use case for this is calling descriptors in a parent or sibling class.</p>
<p>Note that super() is implemented as part of the binding process for explicit dotted attribute lookups such as super().__getitem__(name). It does so by implementing its own __getattribute__() method for searching classes in a predictable order that supports cooperative multiple inheritance. Accordingly, super() is undefined for implicit lookups using statements or operators such as super()[name].</p>
<p>Also note that, aside from the zero argument form, super() is not limited to use inside methods. The two argument form specifies the arguments exactly and makes the appropriate references. The zero argument form only works inside a class definition, as the compiler fills in the necessary details to correctly retrieve the class being defined, as well as accessing the current instance for ordinary methods.</p>
<p>For practical suggestions on how to design cooperative classes using super(), see guide to using super().</p>
<h2 id="中文版-super-type-object-or-type"><a href="#中文版-super-type-object-or-type" class="headerlink" title="中文版 super([type[, object-or-type]])"></a>中文版 super([type[, object-or-type]])</h2><p>返回一个<strong>代理对象</strong>，它会将方法调用委托给 type 的父类或兄弟类。 这对于访问已在类中被重载的继承方法很有用。</p>
<p>object-or-type 确定用于搜索的 method resolution order。 搜索会从 type 之后的类开始。</p>
<p>举例来说，如果 object-or-type 的 __mro__ 为 D -&gt; B -&gt; C -&gt; A -&gt; object 并且 type 的值为 B，则 super() 将会搜索 C -&gt; A -&gt; object。</p>
<p>object-or-type 的__mro__ 属性列出了 getattr() 和 super() 所共同使用的方法解析搜索顺序。 该属性是动态的，可以在任何继承层级结构发生更新的时候被改变。</p>
<p>如果省略第二个参数，则返回的超类对象是未绑定的。 如果第二个参数为一个对象，则 isinstance(obj, type) 必须为真值。 如果第二个参数为一个类型，则 issubclass(type2, type) 必须为真值（这适用于类方法）。</p>
<p>super 有两个典型用例。 在具有单继承的类层级结构中，super 可用来引用父类而不必显式地指定它们的名称，从而令代码更易维护。 这种用法与其他编程语言中 super 的用法非常相似。</p>
<p>第二个用例是在动态执行环境中支持协作多重继承。 此用例为 Python 所独有而不存在于静态编码语言或仅支持单继承的语言当中。 这使用实现“菱形图”成为可能，即有多个基类实现相同的方法。 好的设计强制要求这样的方法在每个情况下都具有相同的调用签名（因为调用顺序是在运行时确定的，也因为这个顺序要适应类层级结构的更改，还因为这个顺序可能包括在运行时之前未知的兄弟类）。</p>
<p>对于以上两个用例，典型的超类调用看起来是这样的:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">B</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">method</span>(<span class="params">self, arg</span>):</span><br><span class="line">        <span class="built_in">super</span>().method(arg)    <span class="comment"># This does the same thing as:</span></span><br><span class="line">                               <span class="comment"># super(C, self).method(arg)</span></span><br></pre></td></tr></table></figure>

<p>除了方法查找之外，super() 也可用于属性查找。 一个可能的应用场合是在上级或同级类中调用 描述器。</p>
<p>请注意 super() 是作为显式加点属性查找的绑定过程的一部分来实现的，例如 super().__getitem__(name)。 它做到这一点是通过实现自己的 __getattribute__() 方法，这样就能以可预测的顺序搜索类，并且支持协作多重继承。 对应地，super() 在像 super()[name] 这样使用语句或操作符进行隐式查找时则未被定义。</p>
<p>还要注意的是，除了零个参数的形式以外，super() 并不限于在方法内部使用。 两个参数的形式明确指定参数并进行相应的引用。 零个参数的形式仅适用于类定义内部，因为编译器需要填入必要的细节以正确地检索到被定义的类，还需要让普通方法访问当前实例。</p>
<p>对于有关如何使用 super() 来如何设计协作类的实用建议，请参阅 使用 super() 的指南。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>完结</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Postman内置变量一览</title>
    <url>/2022/04/03/Postman%E5%86%85%E7%BD%AE%E5%8F%98%E9%87%8F%E4%B8%80%E8%A7%88/</url>
    <content><![CDATA[<h1 id="Postman内置变量"><a href="#Postman内置变量" class="headerlink" title="Postman内置变量"></a>Postman内置变量</h1><blockquote>
<p><a href="https://learning.postman.com/docs/writing-scripts/script-references/variables-list/">https://learning.postman.com/docs/writing-scripts/script-references/variables-list/</a></p>
<p>我只是个搬运工，网上有的地方说只有3个?怎么可能呢。你说常用？那几个一点都不好用。</p>
</blockquote>
<ul>
<li><p>通过faker factory产生</p>
</li>
<li><p>像这么用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123;$randomFirstName&#125;&#125;   <span class="comment">//这在MD中竟然显示不出来</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Common"><a href="#Common" class="headerlink" title="Common"></a>Common</h3><table>
<thead>
<tr>
<th align="left"><strong>Variable Name</strong></th>
<th align="left"><strong>Description</strong></th>
<th align="left"><strong>Examples</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>$guid</strong></td>
<td align="left">A <code>uuid-v4</code> style guid</td>
<td align="left"><code>&quot;611c2e81-2ccb-42d8-9ddc-2d0bfa65c1b4&quot;</code></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>&quot;3a721b7f-7dc9-4c45-9777-516942b98e0d&quot;</code></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>&quot;22eca807-006b-47df-9511-e92e37f5071a&quot;</code></td>
</tr>
<tr>
<td align="left"><strong>$timestamp</strong></td>
<td align="left">The current UNIX timestamp in seconds</td>
<td align="left"><code>1562757107</code>, <code>1562757108</code>, <code>1562757109</code></td>
</tr>
<tr>
<td align="left"><strong>$isoTimestamp</strong></td>
<td align="left">The current ISO timestamp at zero UTC</td>
<td align="left"><code>2020-06-09T21:10:36.177Z</code></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>2019-10-21T06:05:50.000Z</code></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>2019-07-29T18:29:00.000Z</code></td>
</tr>
<tr>
<td align="left"><strong>$randomUUID</strong></td>
<td align="left">A random 36-character UUID</td>
<td align="left"><code>&quot;6929bb52-3ab2-448a-9796-d6480ecad36b&quot;</code></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>&quot;53151b27-034f-45a0-9f0a-d7b6075b67d0&quot;</code></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>&quot;727131a2-2717-44ad-ab02-006587e947dc&quot;</code></td>
</tr>
</tbody></table>
<h3 id="Text-Numbers-and-Colors"><a href="#Text-Numbers-and-Colors" class="headerlink" title="Text, Numbers and Colors"></a>Text, Numbers and Colors</h3><table>
<thead>
<tr>
<th align="left"><strong>Variable Name</strong></th>
<th align="left"><strong>Description</strong></th>
<th align="left"><strong>Examples</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>$randomAlphaNumeric</strong></td>
<td align="left">A random alpha-numeric character</td>
<td align="left"><code>6</code>, <code>&quot;y&quot;</code>, <code>&quot;z&quot;</code></td>
</tr>
<tr>
<td align="left"><strong>$randomBoolean</strong></td>
<td align="left">A random boolean value (true/false)</td>
<td align="left"><code>true</code>, <code>false</code>, <code>false</code>, <code>true</code></td>
</tr>
<tr>
<td align="left"><strong>$randomInt</strong></td>
<td align="left">A random integer between 0 and 1000</td>
<td align="left"><code>802</code>, <code>494</code>, <code>200</code></td>
</tr>
<tr>
<td align="left"><strong>$randomColor</strong></td>
<td align="left">A random color</td>
<td align="left"><code>&quot;red&quot;</code>, <code>&quot;fuchsia&quot;</code>, <code>&quot;grey&quot;</code></td>
</tr>
<tr>
<td align="left"><strong>$randomHexColor</strong></td>
<td align="left">A random hex value</td>
<td align="left"><code>&quot;#47594a&quot;</code>, <code>&quot;#431e48&quot;</code>, <code>&quot;#106f21&quot;</code></td>
</tr>
<tr>
<td align="left"><strong>$randomAbbreviation</strong></td>
<td align="left">A random abbreviation</td>
<td align="left"><code>SQL</code>, <code>PCI</code>, <code>JSON</code></td>
</tr>
</tbody></table>
<h3 id="Internet-and-IP-Addresses"><a href="#Internet-and-IP-Addresses" class="headerlink" title="Internet and IP Addresses"></a>Internet and IP Addresses</h3><table>
<thead>
<tr>
<th align="left"><strong>Variable Name</strong></th>
<th align="left"><strong>Description</strong></th>
<th align="left"><strong>Examples</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>$randomIP</strong></td>
<td align="left">A random IPv4 address</td>
<td align="left"><code>241.102.234.100</code>, <code>216.7.27.38</code></td>
</tr>
<tr>
<td align="left"><strong>$randomIPV6</strong></td>
<td align="left">A random IPv6 address</td>
<td align="left"><code>dbe2:7ae6:119b:c161:1560:6dda:3a9b:90a9</code></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>c482:23a4:ce4c:a668:7736:6cc5:b0b6:cc37</code></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>c791:18d1:fbba:87d8:d929:22aa:5a0a:ac3d</code></td>
</tr>
<tr>
<td align="left"><strong>$randomMACAddress</strong></td>
<td align="left">A random MAC address</td>
<td align="left"><code>33:d4:68:5f:b4:c7</code>, <code>1f:6e:db:3d:ed:fa</code></td>
</tr>
<tr>
<td align="left"><strong>$randomPassword</strong></td>
<td align="left">A random 15-character alpha-numeric password</td>
<td align="left"><code>t9iXe7COoDKv8k3</code>, <code>QAzNFQtvR9cg2rq</code></td>
</tr>
<tr>
<td align="left"><strong>$randomLocale</strong></td>
<td align="left">A random two-letter language code (ISO 639-1)</td>
<td align="left"><code>&quot;ny&quot;</code>, <code>&quot;sr&quot;</code>, <code>&quot;si&quot;</code></td>
</tr>
<tr>
<td align="left"><strong>$randomUserAgent</strong></td>
<td align="left">A random user agent</td>
<td align="left"><code>Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.9.8; rv:15.6) Gecko/20100101 Firefox/15.6.6</code></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>Opera/10.27 (Windows NT 5.3; U; AB Presto/2.9.177 Version/10.00)</code></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>Mozilla/5.0 (Windows NT 6.2; rv:13.5) Gecko/20100101 Firefox/13.5.6</code></td>
</tr>
<tr>
<td align="left"><strong>$randomProtocol</strong></td>
<td align="left">A random internet protocol</td>
<td align="left"><code>&quot;http&quot;</code>, <code>&quot;https&quot;</code></td>
</tr>
<tr>
<td align="left"><strong>$randomSemver</strong></td>
<td align="left">A random semantic version number</td>
<td align="left"><code>7.0.5</code>, <code>2.5.8</code>, <code>6.4.9</code></td>
</tr>
</tbody></table>
<h3 id="Names"><a href="#Names" class="headerlink" title="Names"></a>Names</h3><table>
<thead>
<tr>
<th align="left"><strong>Variable Name</strong></th>
<th align="left"><strong>Description</strong></th>
<th align="left"><strong>Examples</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>$randomFirstName</strong></td>
<td align="left">A random first name</td>
<td align="left"><code>Ethan</code>, <code>Chandler</code>, <code>Megane</code></td>
</tr>
<tr>
<td align="left"><strong>$randomLastName</strong></td>
<td align="left">A random last name</td>
<td align="left"><code>Schaden</code>, <code>Schneider</code>, <code>Willms</code></td>
</tr>
<tr>
<td align="left"><strong>$randomFullName</strong></td>
<td align="left">A random first and last name</td>
<td align="left"><code>Connie Runolfsdottir</code>, <code>Sylvan Fay</code>, <code>Jonathon Kunze</code></td>
</tr>
<tr>
<td align="left"><strong>$randomNamePrefix</strong></td>
<td align="left">A random name prefix</td>
<td align="left"><code>Dr.</code>, <code>Ms.</code>, <code>Mr.</code></td>
</tr>
<tr>
<td align="left"><strong>$randomNameSuffix</strong></td>
<td align="left">A random name suffix</td>
<td align="left"><code>I</code>, <code>MD</code>, <code>DDS</code></td>
</tr>
</tbody></table>
<h3 id="Profession"><a href="#Profession" class="headerlink" title="Profession"></a>Profession</h3><table>
<thead>
<tr>
<th align="left"><strong>Variable Name</strong></th>
<th align="left"><strong>Description</strong></th>
<th align="left"><strong>Examples</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>$randomJobArea</strong></td>
<td align="left">A random job area</td>
<td align="left"><code>Mobility</code>, <code>Intranet</code>, <code>Configuration</code></td>
</tr>
<tr>
<td align="left"><strong>$randomJobDescriptor</strong></td>
<td align="left">A random job descriptor</td>
<td align="left"><code>Forward</code>, <code>Corporate</code>, <code>Senior</code></td>
</tr>
<tr>
<td align="left"><strong>$randomJobTitle</strong></td>
<td align="left">A random job title</td>
<td align="left"><code>International Creative Liaison</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>Product Factors Officer</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>Future Interactions Executive</code></td>
</tr>
<tr>
<td align="left"><strong>$randomJobType</strong></td>
<td align="left">A random job type</td>
<td align="left"><code>Supervisor</code>, <code>Manager</code>, <code>Coordinator</code></td>
</tr>
</tbody></table>
<h3 id="Phone-Address-and-Location"><a href="#Phone-Address-and-Location" class="headerlink" title="Phone, Address and Location"></a>Phone, Address and Location</h3><table>
<thead>
<tr>
<th align="left"><strong>Variable Name</strong></th>
<th align="left"><strong>Description</strong></th>
<th align="left"><strong>Examples</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>$randomPhoneNumber</strong></td>
<td align="left">A random 10-digit phone number</td>
<td align="left"><code>700-008-5275</code>, <code>494-261-3424</code>, <code>662-302-7817</code></td>
</tr>
<tr>
<td align="left"><strong>$randomPhoneNumberExt</strong></td>
<td align="left">A random phone number with extension (12 digits)</td>
<td align="left"><code>27-199-983-3864</code>, <code>99-841-448-2775</code></td>
</tr>
<tr>
<td align="left"><strong>$randomCity</strong></td>
<td align="left">A random city name</td>
<td align="left"><code>Spinkahaven</code>, <code>Korbinburgh</code>, <code>Lefflerport</code></td>
</tr>
<tr>
<td align="left"><strong>$randomStreetName</strong></td>
<td align="left">A random street name</td>
<td align="left"><code>Kuhic Island</code>, <code>General Street</code>, <code>Kendrick Springs</code></td>
</tr>
<tr>
<td align="left"><strong>$randomStreetAddress</strong></td>
<td align="left">A random street address</td>
<td align="left"><code>5742 Harvey Streets</code>, <code>47906 Wilmer Orchard</code></td>
</tr>
<tr>
<td align="left"><strong>$randomCountry</strong></td>
<td align="left">A random country</td>
<td align="left"><code>Lao People&#39;s Democratic Republic</code>, <code>Kazakhstan</code>, <code>Austria</code></td>
</tr>
<tr>
<td align="left"><strong>$randomCountryCode</strong></td>
<td align="left">A random 2-letter country code (ISO 3166-1 alpha-2)</td>
<td align="left"><code>CV</code>, <code>MD</code>, <code>TD</code></td>
</tr>
<tr>
<td align="left"><strong>$randomLatitude</strong></td>
<td align="left">A random latitude coordinate</td>
<td align="left"><code>55.2099</code>, <code>27.3644</code>, <code>-84.7514</code></td>
</tr>
<tr>
<td align="left"><strong>$randomLongitude</strong></td>
<td align="left">A random longitude coordinate</td>
<td align="left"><code>40.6609</code>, <code>171.7139</code>, <code>-159.9757</code></td>
</tr>
</tbody></table>
<h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h3><table>
<thead>
<tr>
<th align="left"><strong>Variable Name</strong></th>
<th align="left"><strong>Description</strong></th>
<th align="left"><strong>Examples</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>$randomAvatarImage</strong></td>
<td align="left">A random avatar image</td>
<td align="left"><code>https://s3.amazonaws.com/uifaces/faces/twitter/johnsmithagency/128.jpg</code></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>https://s3.amazonaws.com/uifaces/faces/twitter/xadhix/128.jpg</code></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>https://s3.amazonaws.com/uifaces/faces/twitter/martip07/128.jpg</code></td>
</tr>
<tr>
<td align="left"><strong>$randomImageUrl</strong></td>
<td align="left">A URL for a random image</td>
<td align="left"><code>http://lorempixel.com/640/480</code></td>
</tr>
<tr>
<td align="left"><strong>$randomAbstractImage</strong></td>
<td align="left">A URL for a random abstract image</td>
<td align="left"><code>http://lorempixel.com/640/480/abstract</code></td>
</tr>
<tr>
<td align="left"><strong>$randomAnimalsImage</strong></td>
<td align="left">A URL for a random animal image</td>
<td align="left"><code>http://lorempixel.com/640/480/animals</code></td>
</tr>
<tr>
<td align="left"><strong>$randomBusinessImage</strong></td>
<td align="left">A URL for a random stock business image</td>
<td align="left"><code>http://lorempixel.com/640/480/business</code></td>
</tr>
<tr>
<td align="left"><strong>$randomCatsImage</strong></td>
<td align="left">A URL for a random cat image</td>
<td align="left"><code>http://lorempixel.com/640/480/cats</code></td>
</tr>
<tr>
<td align="left"><strong>$randomCityImage</strong></td>
<td align="left">A URL for a random city image</td>
<td align="left"><code>http://lorempixel.com/640/480/city</code></td>
</tr>
<tr>
<td align="left"><strong>$randomFoodImage</strong></td>
<td align="left">A URL for a random food image</td>
<td align="left"><code>http://lorempixel.com/640/480/food</code></td>
</tr>
<tr>
<td align="left"><strong>$randomNightlifeImage</strong></td>
<td align="left">A URL for a random nightlife image</td>
<td align="left"><code>http://lorempixel.com/640/480/nightlife</code></td>
</tr>
<tr>
<td align="left"><strong>$randomFashionImage</strong></td>
<td align="left">A URL for a random fashion image</td>
<td align="left"><code>http://lorempixel.com/640/480/fashion</code></td>
</tr>
<tr>
<td align="left"><strong>$randomPeopleImage</strong></td>
<td align="left">A URL for a random image of a person</td>
<td align="left"><code>http://lorempixel.com/640/480/people</code></td>
</tr>
<tr>
<td align="left"><strong>$randomNatureImage</strong></td>
<td align="left">A URL for a random nature image</td>
<td align="left"><code>http://lorempixel.com/640/480/nature</code></td>
</tr>
<tr>
<td align="left"><strong>$randomSportsImage</strong></td>
<td align="left">A URL for a random sports image</td>
<td align="left"><code>http://lorempixel.com/640/480/sports</code></td>
</tr>
<tr>
<td align="left"><strong>$randomTransportImage</strong></td>
<td align="left">A URL for a random transportation image</td>
<td align="left"><code>http://lorempixel.com/640/480/transport</code></td>
</tr>
<tr>
<td align="left"><strong>$randomImageDataUri</strong></td>
<td align="left">A random image data URI</td>
<td align="left"><code>data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20baseProfile%3D%22full%22%20width%3D%22undefined%22%20height%3D%22undefined%22%3E%20%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22grey%22%2F%3E%20%20%3Ctext%20x%3D%220%22%20y%3D%2220%22%20font-size%3D%2220%22%20text-anchor%3D%22start%22%20fill%3D%22white%22%3Eundefinedxundefined%3C%2Ftext%3E%20%3C%2Fsvg%3E</code></td>
</tr>
</tbody></table>
<h3 id="Finance"><a href="#Finance" class="headerlink" title="Finance"></a>Finance</h3><table>
<thead>
<tr>
<th align="left"><strong>Variable Name</strong></th>
<th align="left"><strong>Description</strong></th>
<th align="left"><strong>Examples</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>$randomBankAccount</strong></td>
<td align="left">A random 8-digit bank account number</td>
<td align="left"><code>09454073</code>, <code>65653440</code>, <code>75728757</code></td>
</tr>
<tr>
<td align="left"><strong>$randomBankAccountName</strong></td>
<td align="left">A random bank account name (e.g. savings account, checking account)</td>
<td align="left"><code>Home Loan Account</code>, <code>Checking Account</code>, <code>Auto Loan Account</code></td>
</tr>
<tr>
<td align="left"><strong>$randomCreditCardMask</strong></td>
<td align="left">A random masked credit card number</td>
<td align="left"><code>3622</code>, <code>5815</code>, <code>6257</code></td>
</tr>
<tr>
<td align="left"><strong>$randomBankAccountBic</strong></td>
<td align="left">A random BIC (Bank Identifier Code)</td>
<td align="left"><code>EZIAUGJ1</code>, <code>KXCUTVJ1</code>, <code>DIVIPLL1</code></td>
</tr>
<tr>
<td align="left"><strong>$randomBankAccountIban</strong></td>
<td align="left">A random 15-31 character IBAN (International Bank Account Number)</td>
<td align="left"><code>MU20ZPUN3039684000618086155TKZ</code></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>BR7580569810060080800805730W2</code></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>XK241602002200395017</code></td>
</tr>
<tr>
<td align="left"><strong>$randomTransactionType</strong></td>
<td align="left">A random transaction type (e.g. invoice, payment, deposit)</td>
<td align="left"><code>invoice</code>, <code>payment</code>, <code>deposit</code></td>
</tr>
<tr>
<td align="left"><strong>$randomCurrencyCode</strong></td>
<td align="left">A random 3-letter currency code (ISO-4217)</td>
<td align="left"><code>CDF</code>, <code>ZMK</code>, <code>GNF</code></td>
</tr>
<tr>
<td align="left"><strong>$randomCurrencyName</strong></td>
<td align="left">A random currency name</td>
<td align="left"><code>CFP Franc</code>, <code>Cordoba Oro</code>, <code>Pound Sterling</code></td>
</tr>
<tr>
<td align="left"><strong>$randomCurrencySymbol</strong></td>
<td align="left">A random currency symbol</td>
<td align="left"><code>$</code>, <code>£</code></td>
</tr>
<tr>
<td align="left"><strong>$randomBitcoin</strong></td>
<td align="left">A random bitcoin address</td>
<td align="left"><code>3VB8JGT7Y4Z63U68KGGKDXMLLH5</code></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>1GY5TL5NEX3D1EA0TCWPLGVPQF5EAF</code></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>14IIEXV2AKZAHSCY2KNYP213VRLD</code></td>
</tr>
</tbody></table>
<h3 id="Business"><a href="#Business" class="headerlink" title="Business"></a>Business</h3><table>
<thead>
<tr>
<th align="left"><strong>Variable Name</strong></th>
<th align="left"><strong>Description</strong></th>
<th align="left"><strong>Examples</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>$randomCompanyName</strong></td>
<td align="left">A random company name</td>
<td align="left"><code>Johns - Kassulke</code>, <code>Grady LLC</code></td>
</tr>
<tr>
<td align="left"><strong>$randomCompanySuffix</strong></td>
<td align="left">A random company suffix (e.g. Inc, LLC, Group)</td>
<td align="left"><code>Inc</code>, <code>LLC</code>, <code>Group</code></td>
</tr>
<tr>
<td align="left"><strong>$randomBs</strong></td>
<td align="left">A random phrase of business speak</td>
<td align="left"><code>killer leverage schemas</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>bricks-and-clicks deploy markets</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>world-class unleash platforms</code></td>
</tr>
<tr>
<td align="left"><strong>$randomBsAdjective</strong></td>
<td align="left">A random business speak adjective</td>
<td align="left"><code>viral</code>, <code>24/7</code>, <code>24/365</code></td>
</tr>
<tr>
<td align="left"><strong>$randomBsBuzz</strong></td>
<td align="left">A random business speak buzzword</td>
<td align="left"><code>repurpose</code>, <code>harness</code>, <code>transition</code></td>
</tr>
<tr>
<td align="left"><strong>$randomBsNoun</strong></td>
<td align="left">A random business speak noun</td>
<td align="left"><code>e-services</code>, <code>markets</code>, <code>interfaces</code></td>
</tr>
</tbody></table>
<h3 id="Catchphrases"><a href="#Catchphrases" class="headerlink" title="Catchphrases"></a>Catchphrases</h3><table>
<thead>
<tr>
<th align="left"><strong>Variable Name</strong></th>
<th align="left"><strong>Description</strong></th>
<th align="left"><strong>Examples</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>$randomCatchPhrase</strong></td>
<td align="left">A random catchphrase</td>
<td align="left"><code>Future-proofed heuristic open architecture</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>Quality-focused executive toolset</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>Grass-roots real-time definition</code></td>
</tr>
<tr>
<td align="left"><strong>$randomCatchPhraseAdjective</strong></td>
<td align="left">A random catchphrase adjective</td>
<td align="left"><code>Self-enabling</code>, <code>Business-focused</code>, <code>Down-sized</code></td>
</tr>
<tr>
<td align="left"><strong>$randomCatchPhraseDescriptor</strong></td>
<td align="left">A random catchphrase descriptor</td>
<td align="left"><code>bandwidth-monitored</code>, <code>needs-based</code>, <code>homogeneous</code></td>
</tr>
<tr>
<td align="left"><strong>$randomCatchPhraseNoun</strong></td>
<td align="left">Randomly generates a catchphrase noun</td>
<td align="left"><code>secured line</code>, <code>superstructure</code>,<code>installation</code></td>
</tr>
</tbody></table>
<h3 id="Databases"><a href="#Databases" class="headerlink" title="Databases"></a>Databases</h3><table>
<thead>
<tr>
<th align="left"><strong>Variable Name</strong></th>
<th align="left"><strong>Description</strong></th>
<th align="left"><strong>Examples</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>$randomDatabaseColumn</strong></td>
<td align="left">A random database column name</td>
<td align="left"><code>updatedAt</code>, <code>token</code>, <code>group</code></td>
</tr>
<tr>
<td align="left"><strong>$randomDatabaseType</strong></td>
<td align="left">A random database type</td>
<td align="left"><code>tinyint</code>, <code>text</code></td>
</tr>
<tr>
<td align="left"><strong>$randomDatabaseCollation</strong></td>
<td align="left">A random database collation</td>
<td align="left"><code>cp1250_bin</code>, <code>utf8_general_ci</code>, <code>cp1250_general_ci</code></td>
</tr>
<tr>
<td align="left"><strong>$randomDatabaseEngine</strong></td>
<td align="left">A random database engine</td>
<td align="left"><code>MyISAM</code>, <code>InnoDB</code>, <code>Memory</code></td>
</tr>
</tbody></table>
<h3 id="Dates"><a href="#Dates" class="headerlink" title="Dates"></a>Dates</h3><table>
<thead>
<tr>
<th align="left"><strong>Variable Name</strong></th>
<th align="left"><strong>Description</strong></th>
<th align="left"><strong>Examples</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>$randomDateFuture</strong></td>
<td align="left">A random future datetime</td>
<td align="left"><code>Tue Mar 17 2020 13:11:50 GMT+0530 (India Standard Time)</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>Fri Sep 20 2019 23:51:18 GMT+0530 (India Standard Time)</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>Thu Nov 07 2019 19:20:06 GMT+0530 (India Standard Time)</code></td>
</tr>
<tr>
<td align="left"><strong>$randomDatePast</strong></td>
<td align="left">A random past datetime</td>
<td align="left"><code>Sat Mar 02 2019 09:09:26 GMT+0530 (India Standard Time)</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>Sat Feb 02 2019 00:12:17 GMT+0530 (India Standard Time)</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>Thu Jun 13 2019 03:08:43 GMT+0530 (India Standard Time)</code></td>
</tr>
<tr>
<td align="left"><strong>$randomDateRecent</strong></td>
<td align="left">A random recent datetime</td>
<td align="left"><code>Tue Jul 09 2019 23:12:37 GMT+0530 (India Standard Time)</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>Wed Jul 10 2019 15:27:11 GMT+0530 (India Standard Time)</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>Wed Jul 10 2019 01:28:31 GMT+0530 (India Standard Time)</code></td>
</tr>
<tr>
<td align="left"><strong>$randomWeekday</strong></td>
<td align="left">A random weekday</td>
<td align="left"><code>Thursday</code>, <code>Friday</code>, <code>Monday</code></td>
</tr>
<tr>
<td align="left"><strong>$randomMonth</strong></td>
<td align="left">A random month</td>
<td align="left"><code>February</code>, <code>May</code>, <code>January</code></td>
</tr>
</tbody></table>
<h3 id="Domains-Emails-and-Usernames"><a href="#Domains-Emails-and-Usernames" class="headerlink" title="Domains, Emails and Usernames"></a>Domains, Emails and Usernames</h3><table>
<thead>
<tr>
<th align="left"><strong>Variable Name</strong></th>
<th align="left"><strong>Description</strong></th>
<th align="left"><strong>Examples</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>$randomDomainName</strong></td>
<td align="left">A random domain name</td>
<td align="left"><code>gracie.biz</code>, <code>armando.biz</code>, <code>trevor.info</code></td>
</tr>
<tr>
<td align="left"><strong>$randomDomainSuffix</strong></td>
<td align="left">A random domain suffix</td>
<td align="left"><code>org</code>, <code>net</code>, <code>com</code></td>
</tr>
<tr>
<td align="left"><strong>$randomDomainWord</strong></td>
<td align="left">A random unqualified domain name</td>
<td align="left"><code>gwen</code>, <code>jaden</code>, <code>donnell</code></td>
</tr>
<tr>
<td align="left"><strong>$randomEmail</strong></td>
<td align="left">A random email address</td>
<td align="left"><code>Pablo62@gmail.com</code>, <code>Ruthe42@hotmail.com</code>, <code>Iva.Kovacek61@hotmail.com</code></td>
</tr>
<tr>
<td align="left"><strong>$randomExampleEmail</strong></td>
<td align="left">A random email address from an “example” domain</td>
<td align="left"><code>Talon28@example.com</code>, <code>Quinten_Kerluke45@example.net</code>, <code>Casey81@example.net</code></td>
</tr>
<tr>
<td align="left"><strong>$randomUserName</strong></td>
<td align="left">A random username</td>
<td align="left"><code>Jarrell.Gutkowski</code>, <code>Lottie.Smitham24</code>, <code>Alia99</code></td>
</tr>
<tr>
<td align="left"><strong>$randomUrl</strong></td>
<td align="left">A random URL</td>
<td align="left"><code>https://anais.net</code>, <code>https://tristin.net</code>, <code>http://jakob.name</code></td>
</tr>
</tbody></table>
<h3 id="Files-and-Directories"><a href="#Files-and-Directories" class="headerlink" title="Files and Directories"></a>Files and Directories</h3><table>
<thead>
<tr>
<th align="left"><strong>Variable Name</strong></th>
<th align="left"><strong>Description</strong></th>
<th align="left"><strong>Examples</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>$randomFileName</strong></td>
<td align="left">A random file name (includes uncommon extensions)</td>
<td align="left"><code>neural_sri_lanka_rupee_gloves.gdoc</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>plastic_awesome_garden.tif</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>incredible_ivory_agent.lzh</code></td>
</tr>
<tr>
<td align="left"><strong>$randomFileType</strong></td>
<td align="left">A random file type (includes uncommon file types)</td>
<td align="left"><code>model</code>, <code>application</code>, <code>video</code></td>
</tr>
<tr>
<td align="left"><strong>$randomFileExt</strong></td>
<td align="left">A random file extension (includes uncommon extensions)</td>
<td align="left"><code>war</code>, <code>book</code>, <code>fsc</code></td>
</tr>
<tr>
<td align="left"><strong>$randomCommonFileName</strong></td>
<td align="left">A random file name</td>
<td align="left"><code>well_modulated.mpg4</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>rustic_plastic_tuna.gif</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>checking_account_end_to_end_robust.wav</code></td>
</tr>
<tr>
<td align="left"><strong>$randomCommonFileType</strong></td>
<td align="left">A random, common file type</td>
<td align="left"><code>application</code>, <code>audio</code></td>
</tr>
<tr>
<td align="left"><strong>$randomCommonFileExt</strong></td>
<td align="left">A random, common file extension</td>
<td align="left"><code>m2v</code>, <code>wav</code>, <code>png</code></td>
</tr>
<tr>
<td align="left"><strong>$randomFilePath</strong></td>
<td align="left">A random file path</td>
<td align="left"><code>/home/programming_chicken.cpio</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>/usr/obj/fresh_bandwidth_monitored_beauty.onetoc</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>/dev/css_rustic.pm</code></td>
</tr>
<tr>
<td align="left"><strong>$randomDirectoryPath</strong></td>
<td align="left">A random directory path</td>
<td align="left"><code>/usr/bin</code>, <code>/root</code>, <code>/usr/local/bin</code></td>
</tr>
<tr>
<td align="left"><strong>$randomMimeType</strong></td>
<td align="left">A random MIME type</td>
<td align="left"><code>audio/vnd.vmx.cvsd</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>application/vnd.groove-identity-message</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>application/vnd.oasis.opendocument.graphics-template</code></td>
</tr>
</tbody></table>
<h3 id="Stores"><a href="#Stores" class="headerlink" title="Stores"></a>Stores</h3><table>
<thead>
<tr>
<th align="left"><strong>Variable Name</strong></th>
<th align="left"><strong>Description</strong></th>
<th align="left"><strong>Examples</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>$randomPrice</strong></td>
<td align="left">A random price between 0.00 and 1000.00</td>
<td align="left"><code>531.55</code>, <code>488.76</code>, <code>511.56</code></td>
</tr>
<tr>
<td align="left"><strong>$randomProduct</strong></td>
<td align="left">A random product</td>
<td align="left"><code>Towels</code>, <code>Pizza</code>, <code>Pants</code></td>
</tr>
<tr>
<td align="left"><strong>$randomProductAdjective</strong></td>
<td align="left">A random product adjective</td>
<td align="left"><code>Unbranded</code>, <code>Incredible</code>, <code>Tasty</code></td>
</tr>
<tr>
<td align="left"><strong>$randomProductMaterial</strong></td>
<td align="left">A random product material</td>
<td align="left"><code>Steel</code>, <code>Plastic</code>, <code>Frozen</code></td>
</tr>
<tr>
<td align="left"><strong>$randomProductName</strong></td>
<td align="left">A random product name</td>
<td align="left"><code>Handmade Concrete Tuna</code>, <code>Refined Rubber Hat</code></td>
</tr>
<tr>
<td align="left"><strong>$randomDepartment</strong></td>
<td align="left">A random commerce category</td>
<td align="left"><code>Tools</code>, <code>Movies</code>, <code>Electronics</code></td>
</tr>
</tbody></table>
<h3 id="Grammar"><a href="#Grammar" class="headerlink" title="Grammar"></a>Grammar</h3><table>
<thead>
<tr>
<th align="left"><strong>Variable Name</strong></th>
<th align="left"><strong>Description</strong></th>
<th align="left"><strong>Examples</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>$randomNoun</strong></td>
<td align="left">A random noun</td>
<td align="left"><code>matrix</code>, <code>bus</code>, <code>bandwidth</code></td>
</tr>
<tr>
<td align="left"><strong>$randomVerb</strong></td>
<td align="left">A random verb</td>
<td align="left"><code>parse</code>, <code>quantify</code>, <code>navigate</code></td>
</tr>
<tr>
<td align="left"><strong>$randomIngverb</strong></td>
<td align="left">A random verb ending in “-ing”</td>
<td align="left"><code>synthesizing</code>, <code>navigating</code>, <code>backing up</code></td>
</tr>
<tr>
<td align="left"><strong>$randomAdjective</strong></td>
<td align="left">A random adjective</td>
<td align="left"><code>auxiliary</code>, <code>multi-byte</code>, <code>back-end</code></td>
</tr>
<tr>
<td align="left"><strong>$randomWord</strong></td>
<td align="left">A random word</td>
<td align="left"><code>withdrawal</code>, <code>infrastructures</code>, <code>IB</code></td>
</tr>
<tr>
<td align="left"><strong>$randomWords</strong></td>
<td align="left">Some random words</td>
<td align="left"><code>Samoa Synergistic sticky copying Grocery</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>Corporate Springs</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>Christmas Island Ghana Quality</code></td>
</tr>
<tr>
<td align="left"><strong>$randomPhrase</strong></td>
<td align="left">A random phrase</td>
<td align="left"><code>You can&#39;t program the monitor without navigating the mobile XML program!</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>overriding the capacitor won&#39;t do anything, we need to compress the optical SMS transmitter!</code>,</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>I&#39;ll generate the virtual AI program, that should microchip the RAM monitor!</code></td>
</tr>
</tbody></table>
<h3 id="Lorem-Ipsum"><a href="#Lorem-Ipsum" class="headerlink" title="Lorem Ipsum"></a>Lorem Ipsum</h3><table>
<thead>
<tr>
<th align="left"><strong>Variable Name</strong></th>
<th align="left"><strong>Description</strong></th>
<th align="left"><strong>Examples</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>$randomLoremWord</strong></td>
<td align="left">A random word of lorem ipsum text</td>
<td align="left"><code>est</code></td>
</tr>
<tr>
<td align="left"><strong>$randomLoremWords</strong></td>
<td align="left">Some random words of lorem ipsum text</td>
<td align="left"><code>vel repellat nobis</code></td>
</tr>
<tr>
<td align="left"><strong>$randomLoremSentence</strong></td>
<td align="left">A random sentence of lorem ipsum text</td>
<td align="left"><code>Molestias consequuntur nisi non quod.</code></td>
</tr>
<tr>
<td align="left"><strong>$randomLoremSentences</strong></td>
<td align="left">A random 2-6 sentences of lorem ipsum text</td>
<td align="left"><code>Et sint voluptas similique iure amet perspiciatis vero sequi atque. Ut porro sit et hic. Neque aspernatur vitae fugiat ut dolore et veritatis. Ab iusto ex delectus animi. Voluptates nisi iusto. Impedit quod quae voluptate qui.</code></td>
</tr>
<tr>
<td align="left"><strong>$randomLoremParagraph</strong></td>
<td align="left">A random paragraph of lorem ipsum text</td>
<td align="left"><code>Ab aliquid odio iste quo voluptas voluptatem dignissimos velit. Recusandae facilis qui commodi ea magnam enim nostrum quia quis. Nihil est suscipit assumenda ut voluptatem sed. Esse ab voluptas odit qui molestiae. Rem est nesciunt est quis ipsam expedita consequuntur.</code></td>
</tr>
<tr>
<td align="left"><strong>$randomLoremParagraphs</strong></td>
<td align="left">3 random paragraphs of lorem ipsum text</td>
<td align="left"><code>Voluptatem rem magnam aliquam ab id aut quaerat. Placeat provident possimus voluptatibus dicta velit non aut quasi. Mollitia et aliquam expedita sunt dolores nam consequuntur. Nam dolorum delectus ipsam repudiandae et ipsam ut voluptatum totam. Nobis labore labore recusandae ipsam quo.</code></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>Voluptatem occaecati omnis debitis eum libero. Veniam et cum unde. Nisi facere repudiandae error aperiam expedita optio quae consequatur qui. Vel ut sit aliquid omnis. Est placeat ducimus. Libero voluptatem eius occaecati ad sint voluptatibus laborum provident iure.</code></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"><code>Autem est sequi ut tenetur omnis enim. Fuga nisi dolor expedita. Ea dolore ut et a nostrum quae ut reprehenderit iste. Numquam optio magnam omnis architecto non. Est cumque laboriosam quibusdam eos voluptatibus velit omnis. Voluptatem officiis nulla omnis ratione excepturi.</code></td>
</tr>
<tr>
<td align="left"><strong>$randomLoremText</strong></td>
<td align="left">A random amount of lorem ipsum text</td>
<td align="left"><code>Quisquam asperiores exercitationem ut ipsum. Aut eius nesciunt. Et reiciendis aut alias eaque. Nihil amet laboriosam pariatur eligendi. Sunt ullam ut sint natus ducimus. Voluptas harum aspernatur soluta rem nam.</code></td>
</tr>
<tr>
<td align="left"><strong>$randomLoremSlug</strong></td>
<td align="left">A random lorem ipsum URL slug</td>
<td align="left"><code>eos-aperiam-accusamus</code>, <code>beatae-id-molestiae</code>, <code>qui-est-repellat</code></td>
</tr>
<tr>
<td align="left"><strong>$randomLoremLines</strong></td>
<td align="left">1-5 random lines of lorem ipsum</td>
<td align="left"><code>Ducimus in ut mollitia.\nA itaque non.\nHarum temporibus nihil voluptas.\nIste in sed et nesciunt in quaerat sed.</code></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>postman</category>
      </categories>
      <tags>
        <tag>完结</tag>
        <tag>postman</tag>
        <tag>api</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的MRO浅谈</title>
    <url>/2022/04/22/Python%E7%9A%84MRO%E6%B5%85%E8%B0%88/</url>
    <content><![CDATA[<h1 id="Python的MRO浅谈"><a href="#Python的MRO浅谈" class="headerlink" title="Python的MRO浅谈"></a>Python的MRO浅谈</h1><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="第一个示例"><a href="#第一个示例" class="headerlink" title="第一个示例"></a>第一个示例</h2><ul>
<li>最简单</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">b  = B()</span><br><span class="line">b.say()</span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果，打印A</li>
<li>这是继承，B继承了A的方法say，say方法就输出了A</li>
</ul>
<h2 id="第二个示例"><a href="#第二个示例" class="headerlink" title="第二个示例"></a>第二个示例</h2><ul>
<li>也好理解</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(<span class="title class_ inherited__">B</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">c = C()</span><br><span class="line">c.say()</span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果，打印B</li>
<li>C继承了B，B继承了A</li>
<li>c是C的实例，调用方法的时候用的是父亲B的，而非爷爷A的方法</li>
</ul>
<h2 id="第三个实例"><a href="#第三个实例" class="headerlink" title="第三个实例"></a>第三个实例</h2><ul>
<li>也不难</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(A,B):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">c = C()</span><br><span class="line">c.say()</span><br></pre></td></tr></table></figure>

<ul>
<li>输出A</li>
<li>改一下，换下顺序，C类继承(B,A)呢？如你所料输出B</li>
<li>能不能这样写呢？不可以！</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(A,B):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">c = C()</span><br><span class="line">c.say()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;demo1.py&quot;</span>, line <span class="number">10</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">C</span>(A,B):</span><br><span class="line">TypeError: Cannot create a consistent method resolution</span><br><span class="line">order (MRO) <span class="keyword">for</span> bases A, B</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 <span class="number">1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>那这样写呢？可以的，输出B</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(B,A):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">c = C()</span><br><span class="line">c.say()</span><br></pre></td></tr></table></figure>





<h1 id="关于MRO"><a href="#关于MRO" class="headerlink" title="关于MRO"></a>关于MRO</h1><ul>
<li>参考官网上文  <a href="https://www.python.org/download/releases/2.3/mro/">https://www.python.org/download/releases/2.3/mro/</a></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>完结</tag>
        <tag>python</tag>
        <tag>MRO</tag>
      </tags>
  </entry>
  <entry>
    <title>Python标准库_pathlib及实例操作</title>
    <url>/2022/04/02/Python%E6%A0%87%E5%87%86%E5%BA%93pathlib/</url>
    <content><![CDATA[<h1 id="Python标准库pathlib及实例操作"><a href="#Python标准库pathlib及实例操作" class="headerlink" title="Python标准库pathlib及实例操作"></a>Python标准库pathlib及实例操作</h1><blockquote>
<p><a href="https://docs.python.org/zh-cn/3.9/library/pathlib.html">https://docs.python.org/zh-cn/3.9/library/pathlib.html</a>  官网</p>
<p>讲的比较好的文章  <a href="https://zhuanlan.zhihu.com/p/139783331">https://zhuanlan.zhihu.com/p/139783331</a></p>
</blockquote>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul>
<li>该模块提供表示文件系统路径的类，其语义适用于不同的操作系统</li>
</ul>
<h2 id="优点（对比os-path"><a href="#优点（对比os-path" class="headerlink" title="优点（对比os.path)"></a>优点（对比os.path)</h2><ul>
<li><p>老的路径操作函数管理比较混乱，有的是导入 os, 有的又是在 os.path 当中，而新的用法统一可以用 pathlib 管理。</p>
</li>
<li><p>老用法在处理不同操作系统 win，mac 以及 linux 之间很吃力。换了操作系统常常要改代码，还经常需要进行一些额外操作。</p>
</li>
<li><p>老用法主要是函数形式，返回的数据类型通常是字符串。但是路径和字符串并不等价，所以在使用 os 操作路径的时候常常还要引入其他类库协助操作。新用法是面向对象，处理起来更灵活方便。</p>
</li>
<li><p>pathlib 简化了很多操作，用起来更轻松</p>
</li>
<li></li>
</ul>
<p><img src="https://s2.loli.net/2022/04/02/UOoHQdw2WyRLpKM.jpg" alt="v2-046244f5fa0fad6736ee6ffb205cd169_720w.jpg"></p>
<h1 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h1><h2 id="获取文件路径"><a href="#获取文件路径" class="headerlink" title="获取文件路径"></a>获取文件路径</h2><ul>
<li><p>语法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Path(__file__)   <span class="comment">#__file__是当前文件的绝对路径</span></span><br><span class="line"></span><br><span class="line">Path(__file__).parent  <span class="comment">#所在目录</span></span><br><span class="line">Path(__file__).parent.parent  <span class="comment">#所在目录的父目录</span></span><br><span class="line"></span><br><span class="line">Path(文件的相对路径)  </span><br><span class="line">Path(__file__).resolve()  <span class="comment">#仍然可以得到绝对路径</span></span><br><span class="line"></span><br><span class="line">Path(__file__).parent / <span class="string">&#x27;filename&#x27;</span>  <span class="comment">#目录拼接文件名 用/</span></span><br></pre></td></tr></table></figure></li>
<li><p>示例1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="built_in">print</span>(Path.cwd())   <span class="comment">#你当前py文件的所在目录，类似于pwd</span></span><br><span class="line"><span class="built_in">print</span>(Path.home())  <span class="comment">#你当前用户的家目录（windows比如C:\Users\用户名）</span></span><br></pre></td></tr></table></figure></li>
<li><p>示例2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># demo_pathlib.py</span></span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line">file_abs_path = Path(__file__)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;对象类型是: &#x27;</span>,<span class="built_in">type</span>(file_abs_path))  <span class="comment">#pathlib.WindowsPath</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前文件的绝对路径:&#x27;</span>,file_abs_path)</span><br><span class="line">file_relative_path = Path(<span class="string">&#x27;demo_pathlib.py&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前文件的相对路径:&#x27;</span>,file_relative_path)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前文件的绝对路径(另外一种写法):&#x27;</span>,file_relative_path.resolve())</span><br><span class="line"></span><br><span class="line">parent_dir  = Path(__file__).parent  <span class="comment">#还可以继续.parent，相当于cd ..和cd ../..</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;当前文件的父目录:&#x27;</span>,parent_dir)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;路径拼接用/(忽略操作系统差异): &#x27;</span>,parent_dir / file_relative_path) <span class="comment">#</span></span><br></pre></td></tr></table></figure></li>
<li><p>注意</p>
<ul>
<li>不管字符串使用的是正斜杠 <code>/</code> 还是反斜杠 <code>\</code>， 在 windows 系统里，得到的路径都是反斜杠<code>\</code>, pathlib 会根据操作系统智能处理</li>
</ul>
</li>
</ul>
<h2 id="获取路径组成部分"><a href="#获取路径组成部分" class="headerlink" title="获取路径组成部分"></a>获取路径组成部分</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pathlib import Path</span><br><span class="line">saolei_apk = Path(r&#x27;d:\com.kejia.mine.apk&#x27;)</span><br><span class="line">print(saolei_apk.name)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td>文件名，包含后缀名，如果是目录则获取目录名</td>
</tr>
<tr>
<td>stem</td>
<td>文件名，不包含后缀。</td>
</tr>
<tr>
<td>suffix</td>
<td>后缀，比如 <code>.txt</code>, <code>.png</code>。</td>
</tr>
<tr>
<td>parent</td>
<td>父级目录，相当于 <code>cd ..</code></td>
</tr>
<tr>
<td>anchor</td>
<td>锚，目录前面的部分 <code>C:\</code> 或者 <code>/</code>。</td>
</tr>
</tbody></table>
<ul>
<li><p>多级目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line">saolei_apk = Path(<span class="string">r&#x27;D:\software\aDrive\locales\am.pak&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> parent <span class="keyword">in</span> saolei_apk.parents:</span><br><span class="line">    <span class="built_in">print</span>(parent)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\software\aDrive\locales</span><br><span class="line">D:\software\aDrive</span><br><span class="line">D:\software</span><br><span class="line">D:\</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果是os模块，要获取其父目录用的是os.path.dirname(),多级目录的话就麻烦，对比一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os_saolei_apk_dir  = os.path.dirname(<span class="string">r&#x27;D:\software\aDrive\locales\am.pak&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(os_saolei_apk_dir)</span><br><span class="line">os_saolei_apk_parent_dir = os.path.dirname(os.path.dirname(<span class="string">r&#x27;D:\software\aDrive\locales\am.pak&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(os_saolei_apk_parent_dir)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line">pathlib_saolei_apk = Path(<span class="string">r&#x27;D:\software\aDrive\locales\am.pak&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(pathlib_saolei_apk.parent)</span><br><span class="line"><span class="built_in">print</span>(pathlib_saolei_apk.parent.parent)  <span class="comment">#就相当于cd..多次</span></span><br><span class="line"><span class="built_in">print</span>(pathlib_saolei_apk.parents[<span class="number">1</span>])  <span class="comment">#你还可以用parents，注意0是第一层所在目录，1是父目录，2是爷目录....</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="获取文件属性"><a href="#获取文件属性" class="headerlink" title="获取文件属性"></a>获取文件属性</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">saolei_apk = Path(<span class="string">r&#x27;d:\com.kejia.mine.apk&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(saolei_apk.stat())</span><br><span class="line"><span class="comment">#os.stat_result(st_mode=33206, st_ino=562949953558668, st_dev=3393479561, st_nlink=1, st_uid=0, st_gid=0, st_size=698179, st_atime=1648601046, st_mtime=1631589296, st_ctime=1631952752)</span></span><br><span class="line"></span><br><span class="line">mtime = saolei_apk.stat().st_mtime</span><br><span class="line"><span class="built_in">print</span>(arrow.get(mtime).<span class="built_in">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:MM:SS&#x27;</span>))  </span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>st_mode</td>
<td>权限模式</td>
</tr>
<tr>
<td>st_ino</td>
<td>inode number</td>
</tr>
<tr>
<td>st_dev</td>
<td>device</td>
</tr>
<tr>
<td>st_nlink</td>
<td>硬链接数</td>
</tr>
<tr>
<td>st_uid</td>
<td>所属用户的user id</td>
</tr>
<tr>
<td>st_gid</td>
<td>所属用户的group id</td>
</tr>
<tr>
<td>st_size</td>
<td>文件的大小，以位为单位</td>
</tr>
<tr>
<td>st_atime</td>
<td>文件访问时间</td>
</tr>
<tr>
<td>st_mtime</td>
<td>文件修改时间</td>
</tr>
<tr>
<td>st_ctime</td>
<td>文件创建时间</td>
</tr>
</tbody></table>
<ul>
<li>注意3个时间都是时间戳，要获取好看的时间就用arrow（详见我的另外一篇博文<a href="https://ruru023.github.io/2022/03/31/Python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93arrow/">Python第三方库_arrow</a>）来获取。</li>
<li></li>
</ul>
<h2 id="文件-夹-操作"><a href="#文件-夹-操作" class="headerlink" title="文件(夹)操作"></a>文件(夹)操作</h2><ul>
<li><p>慎用！推荐用shutil</p>
</li>
<li><p>示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line">newfile = Path(<span class="string">r&#x27;D:\20220402.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> newfile.exists():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;创建文件&#x27;</span>)</span><br><span class="line">    newfile.touch(exist_ok=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;删除文件&#x27;</span>)</span><br><span class="line">    newfile.unlink()</span><br></pre></td></tr></table></figure></li>
</ul>
<table>
<thead>
<tr>
<th>操作</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>exists()</td>
<td>是否存在</td>
</tr>
<tr>
<td>is_dir()</td>
<td>是否是文件</td>
</tr>
<tr>
<td>is_file()</td>
<td>是否是目录</td>
</tr>
<tr>
<td>touch(mode=0o666, exist_ok=True)</td>
<td>创建文件，默认权限666，如果exist_ok为True，文件存在不做任何事情，若为False，文件存在执行touch会报错<code>FileExistsError</code></td>
</tr>
<tr>
<td>unlink()</td>
<td>删除文件！危险操作！</td>
</tr>
<tr>
<td>rmdir()</td>
<td>删除目录非常危险，并且没有提示，一定要谨慎操作。一次只删除一级目录，且当前目录必须为空</td>
</tr>
<tr>
<td>mkdir()</td>
<td>创建目录</td>
</tr>
<tr>
<td>read_text()</td>
<td>读文件内容，不再需要重复去打开文件和管理文件的关闭了，下同</td>
</tr>
<tr>
<td>read_bytes()</td>
<td>读取bytes</td>
</tr>
<tr>
<td>write_text</td>
<td>写入文本，注意是w 模式，如果之前已经有文件内容，将会被覆盖</td>
</tr>
<tr>
<td>write_bytes</td>
<td>写入bytes</td>
</tr>
<tr>
<td>replace(文件新路径)</td>
<td>移动文件</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li><p>重命名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">txt_path = Path(<span class="string">&#x27;archive/demo.txt&#x27;</span>)</span><br><span class="line">new_file = txt_path.with_name(<span class="string">&#x27;new.txt&#x27;</span>)</span><br><span class="line">txt_path.replace(new_file)</span><br></pre></td></tr></table></figure></li>
<li><p>改后缀</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">txt_path = Path(<span class="string">&#x27;archive/demo.txt&#x27;</span>)</span><br><span class="line">new_file = txt_path.with_suffix(<span class="string">&#x27;.json&#x27;</span>)</span><br><span class="line">txt_path.replace(new_file)</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="批量移动"><a href="#批量移动" class="headerlink" title="批量移动"></a>批量移动</h2><ul>
<li><p>现在有这个目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\test (6.5KB)</span><br><span class="line">+-- 1 (6.5KB)</span><br><span class="line">|   +-- 1.txt (0b)</span><br><span class="line">|   `-- 1.xls (6.5KB)</span><br><span class="line">`-- 2</span><br><span class="line">    `-- 2.txt (0b)</span><br></pre></td></tr></table></figure></li>
<li><p>移动所有子目录下的.txt文件到E:\test这个根目录下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">move_file_to</span>(<span class="params">srcdir,dstdir,file_pattern</span>):</span><br><span class="line">    file = Path(srcdir).rglob(file_pattern)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> file:</span><br><span class="line">        Path(_).replace(Path(dstdir) / Path(_).name)</span><br><span class="line"></span><br><span class="line">move_file_to(srcdir=<span class="string">r&#x27;e:\test&#x27;</span>,dstdir=<span class="string">r&#x27;e:\test&#x27;</span>,file_pattern=<span class="string">&#x27;*.txt&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="批量修改后缀"><a href="#批量修改后缀" class="headerlink" title="批量修改后缀"></a>批量修改后缀</h2><ul>
<li><p>还是上面的目录结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">E:\test (<span class="number">6.5</span>KB)</span><br><span class="line">+-- <span class="number">1</span> (<span class="number">6.5</span>KB)</span><br><span class="line">|   +-- <span class="number">1.</span>txt (0b)</span><br><span class="line">|   `-- <span class="number">1.</span>xls (<span class="number">6.5</span>KB)</span><br><span class="line">`-- <span class="number">2</span></span><br><span class="line">    `-- <span class="number">2.</span>txt (0b)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_suffix</span>(<span class="params">dst_dir,old_suffix,new_suffix</span>):</span><br><span class="line">    file = Path(dst_dir).rglob(<span class="string">&#x27;*.&#x27;</span>+old_suffix)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">list</span>(file):</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> file:</span><br><span class="line">            new_ = Path(_).with_suffix(<span class="string">&#x27;.&#x27;</span>+new_suffix)</span><br><span class="line">            Path(_).replace(new_)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">f&#x27;file-type:<span class="subst">&#123;old_suffix&#125;</span> not found(recursive) in <span class="subst">&#123;dst_dir&#125;</span>&#x27;</span>)</span><br><span class="line">change_suffix(dst_dir=<span class="string">r&#x27;e:\test&#x27;</span>,old_suffix=<span class="string">&#x27;txt&#x27;</span>,new_suffix=<span class="string">&#x27;docx&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>修改后</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ tree</span><br><span class="line">E:\test (<span class="number">6.5</span>KB)</span><br><span class="line">+-- <span class="number">1</span> (<span class="number">6.5</span>KB)</span><br><span class="line">|   +-- <span class="number">1.</span>docx (0b)</span><br><span class="line">|   `-- <span class="number">1.</span>xls (<span class="number">6.5</span>KB)</span><br><span class="line">`-- <span class="number">2</span></span><br><span class="line">    `-- <span class="number">2.</span>docx (0b)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>rglob是递归，glob只会找一个目录下</li>
<li>glob得到的是一个生成器，可以用list来转化成列表</li>
</ul>
</li>
</ul>
<h2 id="统计目录下的文件类型"><a href="#统计目录下的文件类型" class="headerlink" title="统计目录下的文件类型"></a>统计目录下的文件类型</h2><ul>
<li><p>还是刚才的目录结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\test (6.5KB)</span><br><span class="line">+-- 1 (6.5KB)</span><br><span class="line">|   +-- 1.txt (0b)</span><br><span class="line">|   `-- 1.xls (6.5KB)</span><br><span class="line">`-- 2</span><br><span class="line">    `-- 2.txt (0b)</span><br></pre></td></tr></table></figure></li>
<li><p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line">path = Path(<span class="string">r&#x27;e:\test\1&#x27;</span>)</span><br><span class="line">files = [f.suffix <span class="keyword">for</span> f <span class="keyword">in</span> path.iterdir() <span class="keyword">if</span> f.is_file()]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>(collections.Counter(files)))  <span class="comment">#&#123;&#x27;.txt&#x27;: 1, &#x27;.xls&#x27;: 1&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>但是上面的代码不能递归，就是当前目录下的文件的类型</p>
</li>
<li><p>改造一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line">path = Path(<span class="string">r&#x27;e:\test&#x27;</span>)</span><br><span class="line">files = [f.suffix <span class="keyword">for</span> f <span class="keyword">in</span> path.rglob(<span class="string">&#x27;*.*&#x27;</span>) <span class="keyword">if</span> f.is_file()]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>(collections.Counter(files)))</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="统计某个目录下最近修改的文件"><a href="#统计某个目录下最近修改的文件" class="headerlink" title="统计某个目录下最近修改的文件"></a>统计某个目录下最近修改的文件</h2><ul>
<li><p>转载知乎原文的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line">path = Path.cwd()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(</span><br><span class="line">    [(f.stat().st_mtime, f)</span><br><span class="line">     <span class="keyword">for</span> f <span class="keyword">in</span> path.iterdir()</span><br><span class="line">     <span class="keyword">if</span> f.is_file()]</span><br><span class="line">))</span><br></pre></td></tr></table></figure>

<ul>
<li>也不能递归，你知道怎么改吗？</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>完结</tag>
        <tag>python</tag>
        <tag>标准库</tag>
      </tags>
  </entry>
  <entry>
    <title>Python小程序_简单凯撒加密</title>
    <url>/2022/03/31/Python%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AE%80%E5%8D%95%E5%87%AF%E6%92%92%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h1 id="Python之禅-THIS-PY"><a href="#Python之禅-THIS-PY" class="headerlink" title="Python之禅:THIS.PY"></a>Python之禅:THIS.PY</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;&quot;&quot;Gur Mra bs Clguba, ol Gvz Crgref&quot;&quot;&quot;</span>  <span class="comment">#编码后的字符串，我删除了很多信息</span></span><br><span class="line"></span><br><span class="line">d = &#123;&#125;  <span class="comment">#空字典</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> (<span class="number">65</span>, <span class="number">97</span>):  <span class="comment">#c就是2个值，65和97</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):  <span class="comment">#26个字母</span></span><br><span class="line">        d[<span class="built_in">chr</span>(i+c)] = <span class="built_in">chr</span>((i+<span class="number">13</span>) % <span class="number">26</span> + c)  <span class="comment">#建立字典对应关系</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join([d.get(c, c) <span class="keyword">for</span> c <span class="keyword">in</span> s]))  <span class="comment">#将新的字符串加密（rot13）得到一个新的字符串。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">The Zen of Python, by Tim Peters</span><br></pre></td></tr></table></figure>



<h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><ul>
<li><p>chr：返回指定数字的unicode字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chr</span>(i, /)</span><br><span class="line">    Return a Unicode string of one character <span class="keyword">with</span> ordinal i; <span class="number">0</span> &lt;= i &lt;= <span class="number">0x10ffff</span>.</span><br><span class="line">    </span><br><span class="line"><span class="built_in">chr</span>(<span class="number">65</span>)  是A  <span class="built_in">chr</span>(<span class="number">90</span>)是Z ,差<span class="number">25</span></span><br><span class="line"><span class="built_in">chr</span>(<span class="number">97</span>)  是a  <span class="built_in">chr</span>(<span class="number">122</span>)是z，差<span class="number">25</span>(<span class="number">26</span>个英文字母)</span><br></pre></td></tr></table></figure></li>
<li><p>chr(i+c)，i从0到25</p>
</li>
<li><p>两个for循环建立了一个字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d[<span class="built_in">chr</span>(i+c)] = <span class="built_in">chr</span>((i+<span class="number">13</span>) % <span class="number">26</span> + c)  <span class="comment">#超出26个字符要求余数+C，这是关键</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;A&#x27;</span>: <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;B&#x27;</span>: <span class="string">&#x27;O&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;C&#x27;</span>: <span class="string">&#x27;P&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;D&#x27;</span>: <span class="string">&#x27;Q&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;E&#x27;</span>: <span class="string">&#x27;R&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;F&#x27;</span>: <span class="string">&#x27;S&#x27;</span>) <span class="comment">#省略了很多  A后第13个字符串后的N</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="代码改造成函数"><a href="#代码改造成函数" class="headerlink" title="代码改造成函数"></a>代码改造成函数</h1><ul>
<li><p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rot_n</span>(<span class="params">s,n=<span class="number">13</span></span>):   <span class="comment">#接受一个字符串，通过将每个字符串往后挪13位（默认值，可以自行更改）</span></span><br><span class="line">    d = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> (<span class="number">65</span>, <span class="number">97</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">            d[<span class="built_in">chr</span>(i+c)] = <span class="built_in">chr</span>((i+n) % <span class="number">26</span> + c)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([d.get(c, c) <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line">sen = <span class="string">&#x27;i love china&#x27;</span>  <span class="comment">#原始字符串</span></span><br><span class="line"><span class="built_in">print</span>(rot_n(sen,<span class="number">13</span>))   <span class="comment">#v ybir puvan  #加密后的字符串</span></span><br></pre></td></tr></table></figure></li>
<li><p>解码代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">de_rot_n</span>(<span class="params">s,n=<span class="number">13</span></span>):</span><br><span class="line">    d = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> (<span class="number">65</span>, <span class="number">97</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">            d[<span class="built_in">chr</span>(i+c)] = <span class="built_in">chr</span>((i-n) % <span class="number">26</span> + c)  <span class="comment">#返回来就是解密</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([d.get(c, c) <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line">sen = <span class="string">&#x27;v ybir puvan&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(de_rot_n(sen,<span class="number">13</span>))  <span class="comment">#i love china</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>完结</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>RESTful相关信息整理</title>
    <url>/2022/04/05/RESTful%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="RESTful相关信息整理"><a href="#RESTful相关信息整理" class="headerlink" title="RESTful相关信息整理"></a>RESTful相关信息整理</h1><blockquote>
<p>参考：可以看的出来我是阮一峰的忠实读者</p>
<ol>
<li>阮一峰的《理解RESTful架构》 <a href="https://www.ruanyifeng.com/blog/2011/09/restful.html">https://www.ruanyifeng.com/blog/2011/09/restful.html</a></li>
<li><a href="https://restfulapi.cn/">https://restfulapi.cn/</a>  </li>
<li>阮一峰的《RESTful API 设计指南》<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></li>
</ol>
</blockquote>
<h1 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h1><blockquote>
<p><a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm</a></p>
</blockquote>
<ul>
<li><p>Roy Thomas Fielding在2000年的时候发表的《Architectural Styles and the Design of Network-based Software Architectures》</p>
</li>
<li><p>论文的目的</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">&quot;本文研究计算机科学两大前沿----软件和网络----的交叉点。长期以来，软件研究主要关注软件设计的分类、设计方法的演化，很少客观地评估不同的设计选择对系统行为的影响。而相反地，网络研究主要关注系统之间通信行为的细节、如何改进特定通信机制的表现，常常忽视了一个事实，那就是改变应用程序的互动风格比改变互动协议，对整体表现有更大的影响。我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。&quot;</span><br><span class="line"></span><br><span class="line">(This dissertation explores a junction on the frontiers of two research disciplines in computer science: software and networking. Software research has long been concerned with the categorization of software designs and the development of design methodologies, but has rarely been able to objectively evaluate the impact of various design choices on system behavior. Networking research, in contrast, is focused on the details of generic communication behavior between systems and improving the performance of particular communication techniques, often ignoring the fact that changing the interaction style of an application can have more impact on performance than the communication protocols used for that interaction. My work is motivated by the desire to understand and evaluate the architectural design of network-based application software through principled use of architectural constraints, thereby obtaining the functional, performance, and social properties desired of an architecture. )</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="什么是RESTful"><a href="#什么是RESTful" class="headerlink" title="什么是RESTful"></a>什么是RESTful</h1><ul>
<li>REST：Representational State Transfer，翻译过来就是<strong>表现层状态转化</strong></li>
<li>如果一个架构符合REST原则，就称它为RESTful架构。</li>
<li></li>
</ul>
<h2 id="资源-resource"><a href="#资源-resource" class="headerlink" title="资源  resource"></a>资源  resource</h2><ul>
<li>REST的名称”表现层状态转化”中，省略了主语。”表现层”其实指的是”资源”（Resources）的”表现层”</li>
<li><strong>所谓”资源”，就是网络上的一个实体，或者说是网络上的一个具体信息</strong></li>
<li>它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在</li>
<li>你可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI</li>
<li>URI就成了每一个资源的地址或独一无二的识别符</li>
<li>所谓”上网”，就是与互联网上一系列的”资源”互动，调用它的URI</li>
</ul>
<h2 id="表现-Representation"><a href="#表现-Representation" class="headerlink" title="表现 Representation"></a>表现 <strong>Representation</strong></h2><ul>
<li>上面说了，资源的表现可以是：一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在</li>
<li>URI只代表资源的实体，不代表它的形式</li>
<li>它的具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对”表现层”的描述</li>
</ul>
<h2 id="状态转换-State-Transfer"><a href="#状态转换-State-Transfer" class="headerlink" title="状态转换 State Transfer"></a>状态转换 <strong>State Transfer</strong></h2><ul>
<li>访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。</li>
<li>互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端</li>
<li><strong>如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”（State Transfer）</strong></li>
<li><strong>而这种转化是建立在表现层之上的，所以就是”表现层状态转化”</strong></li>
<li>客户端用到的手段，只能是HTTP协议</li>
<li>HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE（其实还有PATCH等）</li>
<li>它们分别对应几种基本操作：<ul>
<li><strong>GET用来获取资源</strong></li>
<li><strong>POST用来新建资源（也可以用于更新资源）</strong></li>
<li><strong>PUT用来更新资源</strong></li>
<li><strong>PATCH： 更新（Update），通常是部分更新</strong></li>
<li><strong>DELETE用来删除资源</strong></li>
</ul>
</li>
</ul>
<h1 id="RESTful实例"><a href="#RESTful实例" class="headerlink" title="RESTful实例"></a>RESTful实例</h1><ul>
<li>RESTful 架构可以充分的利用 HTTP 协议的各种功能，是 HTTP 协议的最佳实践</li>
<li>RESTful API 是一种软件架构风格、设计风格，可以让软件更加清晰，更简洁，更有层次，可维护性更好</li>
</ul>
<h2 id="API请求设计"><a href="#API请求设计" class="headerlink" title="API请求设计"></a>API请求设计</h2><ul>
<li><p>请求 = 动词 + 宾语</p>
</li>
<li><p>动词 使用五种 HTTP 方法，对应 CRUD 操作</p>
</li>
<li><p>宾语 URL 应该全部使用名词复数，可以有例外，比如搜索可以使用更加直观的 search</p>
</li>
<li><p>过滤信息（Filtering） 如果记录数量很多，API应该提供参数，过滤返回结果。 ?limit=10 指定返回记录的数量 ?offset=10 指定返回记录的开始位置。还有很多</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">?limit=10：指定返回记录的数量</span><br><span class="line">?offset=10：指定返回记录的开始位置。</span><br><span class="line">?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</span><br><span class="line">?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</span><br><span class="line">?animal_type_id=1：指定筛选条件</span><br></pre></td></tr></table></figure></li>
</ul>
<table>
<thead>
<tr>
<th>请求</th>
<th>URI</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>/zoos</td>
<td>列出所有动物园</td>
</tr>
<tr>
<td>POST</td>
<td>/zoos</td>
<td>新建一个动物园</td>
</tr>
<tr>
<td>GET</td>
<td>/zoos/{id}</td>
<td>获取某个指定动物园的信息</td>
</tr>
<tr>
<td>PUT</td>
<td>/zoos/{id}</td>
<td>更新某个指定动物园的全部信息</td>
</tr>
<tr>
<td>PATCH</td>
<td>/zoos/{id}</td>
<td>更新某个指定动物园的部分信息</td>
</tr>
<tr>
<td>DELETE</td>
<td>/zoos/{id}</td>
<td>删除某个动物园</td>
</tr>
<tr>
<td>GET</td>
<td>/zoos/{id}/animals</td>
<td>列出某个指定动物园的所有动物</td>
</tr>
<tr>
<td>DELETE</td>
<td>/zoos/{id}/animals/{animal_id}</td>
<td>删除某个指定动物园的指定动物</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="API响应设计"><a href="#API响应设计" class="headerlink" title="API响应设计"></a>API响应设计</h2><ul>
<li>客户端的每一次请求，服务器都必须给出回应。回应包括 HTTP 状态码和数据两部分。</li>
<li>五大类状态码，总共100多种，覆盖了绝大部分可能遇到的情况。每一种状态码都有约定的解释，客户端只需查看状态码，就可以判断出发生了什么情况。API 不需要1xx状态码<ul>
<li>1xx 相关信息</li>
<li>2xx 操作成功</li>
<li>3xx 重定向</li>
<li>4xx 客户端错误</li>
<li>5xx 服务器错误</li>
</ul>
</li>
</ul>
<h2 id="服务器回应数据"><a href="#服务器回应数据" class="headerlink" title="服务器回应数据"></a>服务器回应数据</h2><ul>
<li>客户端请求时，要明确告诉服务器，接受 JSON 格式，请求的 HTTP 头的 ACCEPT 属性要设成 application/json</li>
<li>服务端返回的数据，不应该是纯文本，而应该是一个 JSON 对象。服务器回应的 HTTP 头的 Content-Type 属性要设为 application/json</li>
<li>错误处理 如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将 error 作为键名，出错信息作为键值即可。 {error: “Invalid API key”}</li>
<li>认证 RESTful API 应该是无状态，每个请求应该带有一些认证凭证。推荐使用 JWT 认证，并且使用 SSL</li>
<li>Hypermedia 即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么</li>
</ul>
<h1 id="误区"><a href="#误区" class="headerlink" title="误区"></a>误区</h1><h2 id="URI包含动词"><a href="#URI包含动词" class="headerlink" title="URI包含动词"></a><strong>URI包含动词</strong></h2><ul>
<li><p>因为”资源”表示一种实体，所以应该是名词，URI不应该有动词，动词应该放在HTTP协议中</p>
</li>
<li><p>错误的示例</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">POST /accounts/1/transfer/500/to/2</span><br></pre></td></tr></table></figure></li>
<li><p>正确的做法：把动词transfer改成名词transaction，资源不能是动词，但是可以是一种服务</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/transaction</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1</span><br><span class="line">　　</span><br><span class="line">from=1&amp;to=2&amp;amount=500.00</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="在URI中加入版本号"><a href="#在URI中加入版本号" class="headerlink" title="在URI中加入版本号"></a><strong>在URI中加入版本号</strong></h2><ul>
<li><p>错误的示例</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://www.example.com/app/1.0/foo</span><br></pre></td></tr></table></figure></li>
<li><p>正确的做法：因为不同的版本，可以理解成同一种资源的不同表现形式，所以应该采用同一个URI。版本号可以在HTTP请求头信息的Accept字段中进行区分</p>
<blockquote>
<p>参考  <a href="https://www.informit.com/articles/article.aspx?p=1566460">https://www.informit.com/articles/article.aspx?p=1566460</a></p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>vnd.example-com.foo+json; version=1.0</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>api</category>
      </categories>
      <tags>
        <tag>完结</tag>
        <tag>api</tag>
      </tags>
  </entry>
  <entry>
    <title>Python标准库_typing</title>
    <url>/2022/04/08/Python%E6%A0%87%E5%87%86%E5%BA%93typing/</url>
    <content><![CDATA[<h1 id="Python标准库typing"><a href="#Python标准库typing" class="headerlink" title="Python标准库typing"></a>Python标准库typing</h1><blockquote>
<p><a href="https://docs.python.org/zh-cn/3/library/typing.html">https://docs.python.org/zh-cn/3/library/typing.html</a></p>
</blockquote>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul>
<li><p>python3.5+才有</p>
</li>
<li><p>Python 运行时不强制执行函数和变量类型注解，但这些注解可用于类型检查器、IDE、静态检查器等第三方工具。</p>
</li>
<li><p>作用</p>
<ul>
<li>类型检查，防止运行时出现参数和返回值类型不符合。（pycharm会自动联想类型）</li>
<li>作为开发文档附加说明，方便使用者调用时传入和返回参数类型。</li>
<li>该模块加入后并不会影响程序的运行，不会报正式的错误，<strong>只有提醒</strong></li>
</ul>
</li>
<li><p>最早接触是在leetcode做题的时候看到的，后面在各种源码中广泛有看到。</p>
<ul>
<li><p>比如LeetCode算法第一题：两数之和，的解题模板（python3）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br></pre></td></tr></table></figure></li>
<li><p>比如Selenium中get方法的源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, url: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Loads a web page in the current browser session.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">    self.execute(Command.GET, &#123;<span class="string">&#x27;url&#x27;</span>: url&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><ul>
<li><p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name:<span class="built_in">str</span></span><br><span class="line">name = <span class="string">&#x27;wuxianfeng&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(name.upper())</span><br></pre></td></tr></table></figure></li>
<li><p>PEP8中有提及，在声明变量类型时，变量后方紧跟一个冒号，冒号后面跟一个空格，再跟上变量的类型。</p>
</li>
<li><p>其实我们很少这么做就是了。更多是放在函数或者方法中</p>
</li>
</ul>
<h2 id="函数参数（基础类型）"><a href="#函数参数（基础类型）" class="headerlink" title="函数参数（基础类型）"></a>函数参数（基础类型）</h2><ul>
<li><p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greeting</span>(<span class="params">name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello &#x27;</span> + name</span><br></pre></td></tr></table></figure>
<ul>
<li>声明name参数是str类型，格式是<strong>参数名冒号类型</strong></li>
<li>返回对象也是str类型，格式是**-&gt;类型**，注意是一个-</li>
<li>-&gt;先写，再写冒号！</li>
</ul>
</li>
<li><p>语法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">参数名:类型</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">参数...</span>) -&gt; 类型:</span><br></pre></td></tr></table></figure></li>
<li><p>一个好处就是用pycharm在输入代码的时候</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">name:<span class="built_in">str</span></span>) -&gt;<span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(name.)   <span class="comment">#输入到name.的时候能自动补齐出来str类型的方法，如果不声明绝对是没有的</span></span><br></pre></td></tr></table></figure></li>
<li><p>str是默认类型，你发现跟typing模块好像并没任何关系，因为这是<strong>基础的模块，无需导入即可使用。类似的还有int，float，bool等</strong></p>
</li>
</ul>
<h2 id="函数参数默认值"><a href="#函数参数默认值" class="headerlink" title="函数参数默认值"></a>函数参数默认值</h2><ul>
<li><p>示例代码：Faker类的初始化方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">    self,</span></span><br><span class="line"><span class="params">    locale: <span class="type">Optional</span>[<span class="type">Union</span>[<span class="built_in">str</span>, <span class="type">Sequence</span>[<span class="built_in">str</span>], <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">float</span>]]]] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    providers: <span class="type">Optional</span>[<span class="type">List</span>[<span class="built_in">str</span>]] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    generator: <span class="type">Optional</span>[Generator] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    includes: <span class="type">Optional</span>[<span class="type">List</span>[<span class="built_in">str</span>]] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    use_weighting: <span class="built_in">bool</span> = <span class="literal">True</span>,</span></span><br><span class="line"><span class="params">    **config: <span class="type">Any</span>,</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="literal">None</span>:</span><br></pre></td></tr></table></figure></li>
<li><p>语法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">参数名:类型=默认值</span><br><span class="line">    </span><br><span class="line">实例: use_weighting: <span class="built_in">bool</span> = <span class="literal">True</span></span><br></pre></td></tr></table></figure></li>
<li><p>跟以前相比就是加了冒号和类型</p>
</li>
</ul>
<h2 id="高级类型List和Tuple"><a href="#高级类型List和Tuple" class="headerlink" title="高级类型List和Tuple"></a>高级类型List和Tuple</h2><ul>
<li><p>此处的中级类型指的是List和Tuple，Dict这些</p>
</li>
<li><p>示例代码：文章开头提到的leetcode第一题，两数之和</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br></pre></td></tr></table></figure>

<ul>
<li>意思是nums这个参数是一个list，其中每个元素是int类型的</li>
</ul>
</li>
<li><p>注意，代码模板不会显示所有的细节，其实这是需要导入的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span>,  <span class="type">List</span>,  <span class="type">Tuple</span></span><br></pre></td></tr></table></figure></li>
<li><p>实例代码1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">names:<span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:   <span class="comment">#如果你输入names.，会产生列表的方法</span></span><br><span class="line">        <span class="built_in">print</span>(name)      <span class="comment">#如果你输入name.，会产生字符串的方法</span></span><br><span class="line"></span><br><span class="line">names = [<span class="string">&#x27;wuxianfeng&#x27;</span>,<span class="string">&#x27;qianyuli&#x27;</span>]</span><br><span class="line">func(names)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意上述代码跟以下代码的区别</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">*names</span>):</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line">classes = [<span class="string">&#x27;c1&#x27;</span>,<span class="string">&#x27;c2&#x27;</span>]</span><br><span class="line">func1(*classes)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>实例代码2：多个相同类型可以用…来替代，但要注意是Tuple[]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">ages: <span class="type">Tuple</span>[<span class="built_in">int</span>, ...]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> age <span class="keyword">in</span> ages:</span><br><span class="line">        <span class="built_in">print</span>(age)</span><br><span class="line"></span><br><span class="line">ages = (<span class="number">18</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">34</span>,)</span><br><span class="line">func(ages)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>此处比较诡异的是如果我写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">ages: <span class="type">Tuple</span>[<span class="built_in">int</span>,<span class="built_in">int</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> age <span class="keyword">in</span> ages:</span><br><span class="line">        <span class="built_in">print</span>(age)</span><br><span class="line"></span><br><span class="line">ages = (<span class="number">18</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">34</span>,)  <span class="comment">#这里只能写2个值，多或者少都会警告！</span></span><br><span class="line">func(ages)  <span class="comment">#应为类型Tuple[int,int],实为类型Tuple[int,int,int,int]</span></span><br></pre></td></tr></table></figure></li>
<li><p>但是List却没有这个问题，后续有空查下</p>
</li>
</ul>
</li>
</ul>
<h2 id="高级类型Dict"><a href="#高级类型Dict" class="headerlink" title="高级类型Dict"></a>高级类型Dict</h2><ul>
<li><p>dict是key:value形式</p>
</li>
<li><p>注意跟Tuple一样，都是[]的形式，不能是{}</p>
</li>
<li><p>实例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">info: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> info.items():</span><br><span class="line">        <span class="built_in">print</span>(k)</span><br><span class="line">        <span class="built_in">print</span>(v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nanjings = &#123;<span class="string">&#x27;wuxianfeng&#x27;</span>: <span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;qianyuli&#x27;</span>: <span class="string">&#x27;female&#x27;</span>&#125;</span><br><span class="line">func(nanjings)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><ul>
<li><p>示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line">Alias = <span class="type">List</span>[<span class="built_in">int</span>]  <span class="comment">#这里可以是List或者list</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scale</span>(<span class="params">orgin_num: <span class="built_in">int</span>, vector: Alias</span>) -&gt; Alias:</span><br><span class="line">    <span class="keyword">return</span> [orgin_num * vec <span class="keyword">for</span> vec <span class="keyword">in</span> vector]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(scale(<span class="number">2</span>, [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="类型嵌套"><a href="#类型嵌套" class="headerlink" title="类型嵌套"></a>类型嵌套</h2><ul>
<li><p>示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params"><span class="built_in">vars</span>: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">vars</span>:</span><br><span class="line">        <span class="keyword">for</span> __ <span class="keyword">in</span> _:</span><br><span class="line">            <span class="built_in">print</span>(__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">3</span>]])</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="可选类型Optional"><a href="#可选类型Optional" class="headerlink" title="可选类型Optional"></a>可选类型Optional</h2><ul>
<li><p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">arg: <span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="literal">None</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line">func(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>显然你去掉=None是不行的，func()的时候会提示错误</p>
</li>
<li><p>Optional[int] 等价于 Union[int, None]</p>
</li>
</ul>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li><p>str、int、float、bool无需声明,直接用即可</p>
</li>
<li><p>List是list的泛型，其后紧跟一个方括号，里面代表了构成这个列表的元素类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age:<span class="type">List</span>[<span class="built_in">int</span>]</span><br><span class="line">var: <span class="type">List</span>[<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">float</span>] = [<span class="number">2</span>, <span class="number">3.5</span>]</span><br><span class="line"><span class="built_in">vars</span>: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]] = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">3</span>]]</span><br></pre></td></tr></table></figure></li>
<li><p>Tuple、元组，是 tuple 的泛型，其后紧跟一个方括号，方括号中按照顺序声明了构成本元组的元素类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="type">Tuple</span>[X, Y] 代表了构成元组的第一个元素是 X 类型，第二个元素是 Y 类型</span><br><span class="line">person: <span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">int</span>, <span class="built_in">float</span>] = (<span class="string">&#x27;Mike&#x27;</span>, <span class="number">22</span>, <span class="number">1.75</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>NamedTuple，是 collections.namedtuple 的泛型，实际上就和 namedtuple 用法完全一致</li>
</ul>
</li>
<li><p>Dict、字典，是 dict 的泛型；Mapping，映射，是 collections.abc.Mapping 的泛型。根据官方文档，Dict 推荐用于注解返回类型，Mapping 推荐用于注解参数。它们的使用方法都是一样的，其后跟一个中括号，中括号内分别声明键名、键值的类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">rect: Mapping[<span class="built_in">str</span>, <span class="built_in">int</span>]</span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]:</span><br><span class="line"> <span class="keyword">return</span> &#123;<span class="string">&#x27;width&#x27;</span>: rect[<span class="string">&#x27;width&#x27;</span>] + <span class="number">100</span>, <span class="string">&#x27;height&#x27;</span>: rect[<span class="string">&#x27;width&#x27;</span>] + <span class="number">100</span>&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>MutableMapping 则是 Mapping 对象的子类，在很多库中也经常用 MutableMapping 来代替 Mapping</li>
</ul>
</li>
<li><p>Set、集合，是 set 的泛型；AbstractSet、是 collections.abc.Set 的泛型。根据官方文档，Set 推荐用于注解返回类型，AbstractSet 用于注解参数。它们的使用方法都是一样的，其后跟一个中括号，里面声明集合中元素的类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">describe</span>(<span class="params">s: AbstractSet[<span class="built_in">int</span>]</span>) -&gt; <span class="type">Set</span>[<span class="built_in">int</span>]:</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">set</span>(s)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>完结</tag>
        <tag>python</tag>
        <tag>标准库</tag>
      </tags>
  </entry>
  <entry>
    <title>使用requests实现selenium相关API操作</title>
    <url>/2022/04/05/Selenium-%E4%BD%BF%E7%94%A8requests%E5%AE%9E%E7%8E%B0selenium%E7%9B%B8%E5%85%B3API%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul>
<li><p>你在做下面的练习之前应该具备</p>
<ul>
<li><p>安装好chrome，并通过chrome://version确认其版本号</p>
</li>
<li><p>安装chromedriver并与你的chrome版本相匹配，下载路径如下</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://registry.npmmirror.com/binary.html?path=chromedriver/</span><br></pre></td></tr></table></figure></li>
<li><p>你应该有一个python+ide（如pycharm）的环境，反正下面的示例是用这些来完成的。</p>
</li>
<li><p>下好requests库，对语法不再阐述</p>
</li>
</ul>
</li>
</ul>
<h1 id="关于chromedriver"><a href="#关于chromedriver" class="headerlink" title="关于chromedriver"></a>关于chromedriver</h1><ul>
<li><p>本质上是个web server</p>
</li>
<li><p>在命令行启动chromedriver应该是如下提示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cmd&gt;chromedriver.exe</span><br><span class="line">Starting ChromeDriver <span class="number">100.0</span><span class="number">.4896</span><span class="number">.20</span> (f9d71f93d32a6487809d6f35a9670c879fe97dfe-refs/branch-heads/<span class="number">4896</span>@&#123;<span class="comment">#203&#125;) on port 9515</span></span><br><span class="line">Only local connections are allowed.</span><br><span class="line">Please see https://chromedriver.chromium.org/security-considerations <span class="keyword">for</span> suggestions on keeping ChromeDriver safe.</span><br><span class="line">ChromeDriver was started successfully.</span><br></pre></td></tr></table></figure></li>
<li><p>放在那里不要关闭哦~</p>
</li>
</ul>
<h1 id="关于webdriver"><a href="#关于webdriver" class="headerlink" title="关于webdriver"></a>关于webdriver</h1><ul>
<li><p>参阅:6.5的endpoint部分</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://w3c.github.io/webdriver/#endpoints</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><blockquote>
<p>我就不封装了，你有兴趣自行封装</p>
</blockquote>
<h2 id="不一样的，打开浏览器"><a href="#不一样的，打开浏览器" class="headerlink" title="不一样的，打开浏览器"></a>不一样的，打开浏览器</h2><table>
<thead>
<tr>
<th align="left">Method</th>
<th align="left">URI Template</th>
<th align="left">Command</th>
</tr>
</thead>
<tbody><tr>
<td align="left">POST</td>
<td align="left">/session</td>
<td align="left"><a href="https://w3c.github.io/webdriver/#dfn-new-sessions">New Session</a></td>
</tr>
</tbody></table>
<ul>
<li><p>示例代码：以chrome为例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">server_url = <span class="string">&#x27;http://127.0.0.1:9515/session&#x27;</span> </span><br><span class="line">session_data = &#123;</span><br><span class="line">    <span class="string">&#x27;desiredCapabilities&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;caps&quot;</span>:&#123;<span class="string">&quot;browserName&quot;</span>:<span class="string">&quot;chrome&quot;</span>&#125;   <span class="comment">#此处可以变更浏览器类型，前提你启动了对应的chromedriver或者geckodriver等。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">session_req = requests.post(url=server_url,json=session_data)  <span class="comment">#json传递</span></span><br></pre></td></tr></table></figure></li>
<li><p>是不是相当于selenium的api</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.Chrome()</span><br></pre></td></tr></table></figure></li>
<li><p>区别是？不需要安装selenium就可以通过api来调用了，当然会更麻烦，人家给你封装好了。</p>
</li>
</ul>
<h2 id="不一样的，输入网址"><a href="#不一样的，输入网址" class="headerlink" title="不一样的，输入网址"></a>不一样的，输入网址</h2><table>
<thead>
<tr>
<th align="left">Method</th>
<th align="left">URI Template</th>
<th align="left">Command</th>
</tr>
</thead>
<tbody><tr>
<td align="left">POST</td>
<td align="left">/session</td>
<td align="left"><a href="https://w3c.github.io/webdriver/#dfn-new-sessions">New Session</a></td>
</tr>
<tr>
<td align="left">POST</td>
<td align="left">/session/{session id}/url</td>
<td align="left"><a href="https://w3c.github.io/webdriver/#dfn-navigate-to">Navigate To</a></td>
</tr>
</tbody></table>
<ul>
<li><p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">server_url = <span class="string">&#x27;http://127.0.0.1:9515/session&#x27;</span>  <span class="comment">#这个url不能以/结尾</span></span><br><span class="line">session_data = &#123;</span><br><span class="line">    <span class="string">&#x27;desiredCapabilities&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;caps&quot;</span>:&#123;<span class="string">&quot;browserName&quot;</span>:<span class="string">&quot;chrome&quot;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">session_req = requests.post(url=server_url,json=session_data)  <span class="comment">#此处不能是data</span></span><br><span class="line"><span class="comment"># 打开网址</span></span><br><span class="line">session_id = session_req.json().get(<span class="string">&#x27;sessionId&#x27;</span>)  <span class="comment">#首先要获取sessionId，是后面操作的根基</span></span><br><span class="line">dest_url = <span class="string">&#x27;http://121.41.14.39:8088/index.html#/&#x27;</span>  <span class="comment">#比如你要打开这个网址</span></span><br><span class="line">get_url_data = &#123;<span class="string">&#x27;url&#x27;</span>:dest_url&#125;  <span class="comment">#字典形式</span></span><br><span class="line">requests.post(server_url+<span class="string">&#x27;/&#x27;</span>+session_id+<span class="string">&#x27;/url&#x27;</span>,json=get_url_data) <span class="comment">#注意url的格式，跟ep对比</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>是不是类似于selenium中的driver.get()</p>
</li>
</ul>
<h2 id="不一样的，输入，点击"><a href="#不一样的，输入，点击" class="headerlink" title="不一样的，输入，点击"></a>不一样的，输入，点击</h2><table>
<thead>
<tr>
<th align="left">Method</th>
<th align="left">URI Template</th>
<th align="left">Command</th>
</tr>
</thead>
<tbody><tr>
<td align="left">POST</td>
<td align="left">/session</td>
<td align="left"><a href="https://w3c.github.io/webdriver/#dfn-new-sessions">New Session</a></td>
</tr>
<tr>
<td align="left">POST</td>
<td align="left">/session/{session id}/url</td>
<td align="left"><a href="https://w3c.github.io/webdriver/#dfn-navigate-to">Navigate To</a></td>
</tr>
<tr>
<td align="left">POST</td>
<td align="left">/session/{session id}/element</td>
<td align="left"><a href="https://w3c.github.io/webdriver/#dfn-find-element">Find Element</a></td>
</tr>
<tr>
<td align="left">POST</td>
<td align="left">/session/{session id}/element/{element id}/click</td>
<td align="left"><a href="https://w3c.github.io/webdriver/#dfn-element-click">Element Click</a></td>
</tr>
<tr>
<td align="left">POST</td>
<td align="left">/session/{session id}/element/{element id}/value</td>
<td align="left"><a href="https://w3c.github.io/webdriver/#dfn-element-send-keys">Element Send Keys</a></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<ul>
<li><p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="comment">#登录</span></span><br><span class="line"><span class="comment"># 1. 打开浏览器</span></span><br><span class="line">server_url = <span class="string">&#x27;http://127.0.0.1:9515/session&#x27;</span>  <span class="comment">#这个url不能以/结尾</span></span><br><span class="line">session_data = &#123;</span><br><span class="line">    <span class="string">&#x27;desiredCapabilities&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;caps&quot;</span>:&#123;<span class="string">&quot;browserName&quot;</span>:<span class="string">&quot;chrome&quot;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">session_req = requests.post(url=server_url,json=session_data)  <span class="comment">#此处不能是data</span></span><br><span class="line"><span class="comment"># 2. 输入网址</span></span><br><span class="line">session_id = session_req.json().get(<span class="string">&#x27;sessionId&#x27;</span>)</span><br><span class="line">dest_url = <span class="string">&#x27;http://106.14.1.150:8090/forum.php&#x27;</span>  <span class="comment">#这是我在阿里云部署的一个服务器</span></span><br><span class="line">get_url_data = &#123;<span class="string">&#x27;url&#x27;</span>:dest_url&#125;</span><br><span class="line">requests.post(server_url+<span class="string">&#x27;/&#x27;</span>+session_id+<span class="string">&#x27;/url&#x27;</span>,json=get_url_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单封装下</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_eid</span>(<span class="params">url,sid,method,method_value</span>):  <span class="comment">#获取elementid</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;using&#x27;</span>:method,<span class="string">&#x27;value&#x27;</span>:method_value&#125;</span><br><span class="line">    <span class="keyword">return</span> requests.post(url+<span class="string">&#x27;/&#x27;</span>+sid+<span class="string">&#x27;/element&#x27;</span>,json=data).json().get(<span class="string">&#x27;value&#x27;</span>).get(<span class="string">&#x27;ELEMENT&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">input_text</span>(<span class="params">url,sid,eid,text</span>): <span class="comment">#在指定的元素上输入内容</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;value&#x27;</span>:[text]&#125;</span><br><span class="line">    requests.post(url+<span class="string">&#x27;/&#x27;</span>+sid+<span class="string">&#x27;/element/&#x27;</span>+eid+<span class="string">&#x27;/value&#x27;</span>, json=data)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">click_element</span>(<span class="params">url,sid,eid</span>): <span class="comment">#点击指定的元素</span></span><br><span class="line">    requests.post(url + <span class="string">&#x27;/&#x27;</span> + sid + <span class="string">&#x27;/element/&#x27;</span> + eid + <span class="string">&#x27;/click&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 3. 输入用户名</span></span><br><span class="line"><span class="comment"># 3.1 获取用户名元素的elementid，通过id方式，其值为ls_username</span></span><br><span class="line">username_id = get_eid(server_url,session_id,<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;ls_username&#x27;</span>)</span><br><span class="line">input_text(server_url,session_id,username_id,<span class="string">&#x27;ruru023&#x27;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 3.2 获取密码元素的elementid，通过id方式，其值为ls_password</span></span><br><span class="line">password_id = get_eid(server_url,session_id,<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;ls_password&#x27;</span>)</span><br><span class="line">input_text(server_url,session_id,password_id,<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 3.3 获取登录按钮元素的elementid，通过css selector方式，其值为.pn.vm</span></span><br><span class="line">login_button_id =  get_eid(server_url,session_id,<span class="string">&#x27;css selector&#x27;</span>,<span class="string">&#x27;.pn.vm&#x27;</span>)</span><br><span class="line">click_element(server_url,session_id,login_button_id)</span><br></pre></td></tr></table></figure></li>
<li><p>类似于seleniumapi中的</p>
<ul>
<li>webelement.send_keys()</li>
<li>webelement.click()</li>
<li>driver.find_element(By.ID,’ID_VALUE’)</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>selenium</category>
      </categories>
      <tags>
        <tag>api</tag>
        <tag>selenium</tag>
        <tag>ui</tag>
      </tags>
  </entry>
  <entry>
    <title>Github仓库整理</title>
    <url>/2022/04/10/TODO-Github%E4%BB%93%E5%BA%93%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="Github仓库整理"><a href="#Github仓库整理" class="headerlink" title="Github仓库整理"></a>Github仓库整理</h1><blockquote>
<p>采集于 hellogithub，也有自己发现的，二道贩子</p>
<p>有些内容我就不举例了，大家可以看readme.md</p>
<p>截止到今天分析到hellogithub 70（倒着来的），每月28日发布一期，22-3，发布72期。</p>
</blockquote>
<ul>
<li><strong>开源是人类进步的基石</strong></li>
</ul>
<h1 id="python相关"><a href="#python相关" class="headerlink" title="python相关"></a>python相关</h1><h2 id="rembg"><a href="#rembg" class="headerlink" title="rembg"></a>rembg</h2><ul>
<li><p>地址：<a href="https://github.com/danielgatis/rembg">https://github.com/danielgatis/rembg</a></p>
</li>
<li><p>简单实用的删除图像背景/抠图工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from rembg import remove</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">input_path = &#x27;input.png&#x27;</span><br><span class="line">output_path = &#x27;output.png&#x27;</span><br><span class="line"></span><br><span class="line">input = Image.open(input_path)</span><br><span class="line">output = remove(input)</span><br><span class="line">output.save(output_path)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="★python开源算法库"><a href="#★python开源算法库" class="headerlink" title="★python开源算法库"></a>★python开源算法库</h2><ul>
<li>地址：<a href="https://github.com/TheAlgorithms/Python">https://github.com/TheAlgorithms/Python</a></li>
<li>简介：用 Python 实现所有算法。该项目是用 Python 语言实现各种算法的集合，主要用于教育和学习。包括搜索、排序、数据结构、机器学习、密码、神经网络等方面</li>
</ul>
<h1 id="杂类"><a href="#杂类" class="headerlink" title="杂类"></a>杂类</h1><h2 id="hashcat-破解密码"><a href="#hashcat-破解密码" class="headerlink" title="hashcat  破解密码"></a>hashcat  破解密码</h2><ul>
<li><p>地址：<a href="https://github.com/hashcat/hashcat">https://github.com/hashcat/hashcat</a></p>
</li>
<li><p>简介</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">hashcat is the world&#x27;s fastest and most advanced password recovery utility, supporting five unique modes of attack for over 300 highly-optimized hashing algorithms. </span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p>hashcat currently supports CPUs, GPUs, and other hardware accelerators on Linux, Windows, and macOS, and has facilities to help enable distributed password cracking<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">## reveal.js HTML演示框架</span><br><span class="line"></span><br><span class="line">- 地址：https://github.com/hakimel/reveal.js</span><br><span class="line"></span><br><span class="line">- 简介</span><br><span class="line"></span><br><span class="line">  ```http</span><br><span class="line">  reveal.js is an open source HTML presentation framework. </span><br><span class="line">  It enables anyone with a web browser to create beautiful presentations for free. </span><br><span class="line">  Check out the live demo at revealjs.com</span><br></pre></td></tr></table></figure></p>
<ul>
<li>备注：我一直在用哈</li>
</ul>
<h2 id="人人都能看懂的设计模式教程"><a href="#人人都能看懂的设计模式教程" class="headerlink" title="人人都能看懂的设计模式教程"></a>人人都能看懂的设计模式教程</h2><ul>
<li><p>地址：<a href="https://github.com/guanguans/design-patterns-for-humans-cn">https://github.com/guanguans/design-patterns-for-humans-cn</a></p>
</li>
<li><p>地址：<a href="https://github.com/kamranahmedse/design-patterns-for-humans">https://github.com/kamranahmedse/design-patterns-for-humans</a></p>
</li>
</ul>
<h2 id="electerm-终端工具"><a href="#electerm-终端工具" class="headerlink" title="electerm 终端工具"></a>electerm 终端工具</h2><ul>
<li><p>地址：<a href="https://github.com/electerm/electerm">https://github.com/electerm/electerm</a></p>
</li>
<li><p>简介</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Terminal/ssh/sftp client(linux, mac, win) based on electron/ssh2/node-pty/xterm/antd/subx and other libs.</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="h2o-高性能-HTTP-服务器"><a href="#h2o-高性能-HTTP-服务器" class="headerlink" title="h2o 高性能 HTTP 服务器"></a>h2o 高性能 HTTP 服务器</h2><ul>
<li><p>地址：<a href="https://github.com/h2o/h2o">https://github.com/h2o/h2o</a></p>
</li>
<li><p>相较于传统 Web 服务器，它充分利用了 HTTP/2 的资源加载优先级和服务器推送技术，所以在静态文件方面性能明显优于 Nginx 服务器</p>
</li>
</ul>
<h2 id="物联网-IoT-平台-ThingsBoard"><a href="#物联网-IoT-平台-ThingsBoard" class="headerlink" title="物联网 IoT 平台 ThingsBoard"></a>物联网 IoT 平台 ThingsBoard</h2><ul>
<li>地址：<a href="https://github.com/thingsboard/thingsboard">https://github.com/thingsboard/thingsboard</a></li>
<li>简介：完全开源的物联网 IoT 平台。它使用行业的标准物联网协议 MQTT、CoAP 和 HTTP 连接设备，支持数据收集、处理、可视化和设备管理等功能。通过该项目可快速实现物联网平台搭建，从而成为众多大型企业的首选，行业覆盖电信、智慧城市、环境监测等</li>
</ul>
<h2 id="DreamScene2-windows动态桌面"><a href="#DreamScene2-windows动态桌面" class="headerlink" title="DreamScene2 windows动态桌面"></a>DreamScene2 windows动态桌面</h2><ul>
<li>地址：<a href="https://github.com/he55/DreamScene2">https://github.com/he55/DreamScene2</a></li>
<li>简介：小巧的 Windows 动态桌面工具。适用于 Windows10/11 系统，支持视频、网页动画播放</li>
</ul>
<h2 id="DB-TUTORIAL-数据库教程"><a href="#DB-TUTORIAL-数据库教程" class="headerlink" title="DB-TUTORIAL 数据库教程"></a>DB-TUTORIAL 数据库教程</h2><ul>
<li>地址：<a href="https://github.com/dunwu/db-tutorial">https://github.com/dunwu/db-tutorial</a></li>
<li>一份关于数据库的教程。内容涵盖了 MySQL、Redis、ES、MongoDB 从入门到面试等多方面的知识</li>
</ul>
<h2 id="tstock-命令行看股票"><a href="#tstock-命令行看股票" class="headerlink" title="tstock 命令行看股票"></a>tstock 命令行看股票</h2><ul>
<li>地址：<a href="https://github.com/Gbox4/tstock">https://github.com/Gbox4/tstock</a></li>
<li>简介：在命令行看股票走势的工具</li>
<li></li>
</ul>
<h2 id="在线文件管理-filestash"><a href="#在线文件管理-filestash" class="headerlink" title="在线文件管理 filestash"></a>在线文件管理 filestash</h2><ul>
<li>地址：<a href="https://github.com/mickael-kerjean/filestash">https://github.com/mickael-kerjean/filestash</a></li>
<li>简介：在线文件管理工具。在浏览器上管理 FTP、SFTP、Git、S3、MySQL、Dropbox 等服务中的文件和数据，支持编辑文件、图片管理、视频转码、Office 文档、全文搜索等功能</li>
</ul>
<h2 id="Resume-在线简历"><a href="#Resume-在线简历" class="headerlink" title="Résumé 在线简历"></a>Résumé 在线简历</h2><ul>
<li>地址：<a href="https://github.com/billryan/resume">https://github.com/billryan/resume</a></li>
<li>简介：简历模板。不需要懂 LaTeX 语法就可以用，适合用来做一页纸简历</li>
</ul>
<h2 id="远程桌面工具-PowerRemoteDesktop"><a href="#远程桌面工具-PowerRemoteDesktop" class="headerlink" title="远程桌面工具 PowerRemoteDesktop"></a>远程桌面工具 PowerRemoteDesktop</h2><ul>
<li><p>地址：<a href="https://github.com/DarkCoderSc/PowerRemoteDesktop">https://github.com/DarkCoderSc/PowerRemoteDesktop</a></p>
</li>
<li><p>简介：仅用 PowerShell 实现的远程桌面工具。它易于安装和使用、功能齐全，未依赖现有的协议和工具</p>
</li>
</ul>
<h2 id="PDF-工具箱-PDFPatcher"><a href="#PDF-工具箱-PDFPatcher" class="headerlink" title="PDF 工具箱 PDFPatcher"></a>PDF 工具箱 PDFPatcher</h2><ul>
<li>地址：<a href="https://github.com/wmjordan/PDFPatcher">https://github.com/wmjordan/PDFPatcher</a></li>
<li>简介：多功能的 PDF 工具箱，可用于修改 PDF 文件信息。支持：<ul>
<li>修改、合并 PDF 文档</li>
<li>自动生成书签</li>
<li>书签编辑器</li>
<li>高速无损地导出文件中的图片</li>
<li>等等</li>
</ul>
</li>
</ul>
<h2 id="★在线简历生成器-resume"><a href="#★在线简历生成器-resume" class="headerlink" title="★在线简历生成器 resume"></a>★在线简历生成器 resume</h2><ul>
<li>地址：<a href="https://github.com/visiky/resume">https://github.com/visiky/resume</a></li>
<li>在线简历生成器。轻松实现在线简历，支持在线预览、编辑和下载 PDF 简历。<a href="https://visiky.github.io/resume/?mode=edit">在线尝试</a></li>
</ul>
<h2 id="抽奖程序-lottery"><a href="#抽奖程序-lottery" class="headerlink" title="抽奖程序 lottery"></a>抽奖程序 lottery</h2><ul>
<li>地址：<a href="https://github.com/moshang-xc/lottery">https://github.com/moshang-xc/lottery</a></li>
<li>简介：年会抽奖程序。基于 Express + Three.js 的 3D 球体抽奖项目，能够自定义文字、图片和抽奖规则，还支持一键导入抽奖人员和导出抽奖结果</li>
<li></li>
</ul>
<h2 id="在线项目管理平台-dootask"><a href="#在线项目管理平台-dootask" class="headerlink" title="在线项目管理平台 dootask"></a>在线项目管理平台 dootask</h2><ul>
<li>地址：<a href="https://github.com/kuaifan/dootask">https://github.com/kuaifan/dootask</a></li>
<li>简介：在线项目管理平台。功能包括任务分配、文档协作、即时 IM、文档协作、文件管理等</li>
</ul>
<h2 id="桌面下载工具-Hitomi-Downloader"><a href="#桌面下载工具-Hitomi-Downloader" class="headerlink" title="桌面下载工具 Hitomi-Downloader"></a>桌面下载工具 Hitomi-Downloader</h2><ul>
<li>地址：<a href="https://github.com/KurtBestor/Hitomi-Downloader">https://github.com/KurtBestor/Hitomi-Downloader</a></li>
<li>简介：Python 写的桌面下载工具。界面简单使用方便，拥有下载限速、BT 种子、自动提取网页视频等功能，支持下载国内多个视频网站的内容</li>
</ul>
<h2 id="一页HTML能做什么"><a href="#一页HTML能做什么" class="headerlink" title="一页HTML能做什么"></a>一页HTML能做什么</h2><ul>
<li>地址：<a href="https://github.com/Metroxe/one-html-page-challenge">https://github.com/Metroxe/one-html-page-challenge</a></li>
<li>简介：单个 HTML 页面的挑战。该项目汇集了满足仅有一个 HTML 文件、小于 1MB、不可接入 API、不能引用库条件下实现的创意网页。<a href="https://onehtmlpagechallenge.com/">在线查看</a></li>
</ul>
<hr>
<blockquote>
<p>2022.4.18</p>
</blockquote>
<h2 id="★简历生成器Reactive-Resume"><a href="#★简历生成器Reactive-Resume" class="headerlink" title="★简历生成器Reactive-Resume"></a><strong>★简历生成器Reactive-Resume</strong></h2><ul>
<li><p>地址：<a href="https://github.com/AmruthPillai/Reactive-Resume">https://github.com/AmruthPillai/Reactive-Resume</a></p>
</li>
<li><p>简介：</p>
<ul>
<li>Reactive Resume 是一个免费和开源的简历生成器，旨在简单的创建、更新和共享简历。使用此应用程序，你可以创建多份简历，并通过独特的链接并以 PDF 格式打印，全部免费，无广告，不会丢失您数据的完整性</li>
</ul>
</li>
</ul>
<h2 id="window10预装程序删除"><a href="#window10预装程序删除" class="headerlink" title="window10预装程序删除"></a>window10预装程序删除</h2><ul>
<li>地址：<a href="https://github.com/Sycnex/Windows10Debloater">https://github.com/Sycnex/Windows10Debloater</a></li>
<li>简介：<ul>
<li>删除 Windows 预安装的不必要的应用程序。</li>
</ul>
</li>
</ul>
<h2 id="数据库模型文档管理平台"><a href="#数据库模型文档管理平台" class="headerlink" title="数据库模型文档管理平台"></a><strong>数据库模型文档管理平台</strong></h2><ul>
<li>地址：<a href="https://github.com/vran-dev/databasir">https://github.com/vran-dev/databasir</a></li>
<li>简介：<ul>
<li>Databasir 是面向团队的关系型数据库模型文档管理平台，旨在通过自动化的方式解决模型文档管理过程中维护成本高、内容更新不及时以及团队协作复杂等问题</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>待续</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Python第三方库_arrow</title>
    <url>/2022/03/31/Python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93arrow/</url>
    <content><![CDATA[<h1 id="Python第三方库arrow"><a href="#Python第三方库arrow" class="headerlink" title="Python第三方库arrow"></a>Python第三方库arrow</h1><blockquote>
<p><a href="https://pypi.org/project/arrow/">https://pypi.org/project/arrow/</a></p>
</blockquote>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul>
<li><strong>处理时间日期的一个第三方库</strong></li>
<li><strong>Arrow</strong> is a Python library that offers a sensible and human-friendly approach to creating, manipulating, formatting and converting <strong>dates, times and timestamps</strong>. It implements and updates the datetime type, plugging gaps in functionality and providing an intelligent module API that supports many common creation scenarios. Simply put, it helps you work with dates and times with fewer imports and a lot less code.</li>
</ul>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>Too many modules: datetime, time, calendar, dateutil, pytz and more</li>
<li>Too many types: date, time, datetime, tzinfo, timedelta, relativedelta, etc.</li>
<li>Timezones and timestamp conversions are verbose and unpleasant</li>
<li>Timezone naivety is the norm</li>
<li>Gaps in functionality: ISO 8601 parsing, timespans, humanization</li>
</ul>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>Fully-implemented, drop-in replacement for datetime</li>
<li>Support for Python 3.6+</li>
<li>Timezone-aware and UTC by default</li>
<li>Super-simple creation options for many common input scenarios</li>
<li><code>shift</code> method with support for relative offsets, including weeks</li>
<li>Format and parse strings automatically</li>
<li>Wide support for the <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> standard</li>
<li>Timezone conversion</li>
<li>Support for <code>dateutil</code>, <code>pytz</code>, and <code>ZoneInfo</code> tzinfo objects</li>
<li>Generates time spans, ranges, floors and ceilings for time frames ranging from microsecond to year</li>
<li>Humanize dates and times with a growing list of contributed locales</li>
<li>Extensible for your own Arrow-derived types</li>
<li>Full support for PEP 484-style type hints</li>
</ul>
<h1 id="官方示例"><a href="#官方示例" class="headerlink" title="官方示例"></a>官方示例</h1><blockquote>
<p>稍作补充</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> arrow</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arrow.get(<span class="string">&#x27;2013-05-11T21:23:58.970460+07:00&#x27;</span>)</span><br><span class="line">&lt;Arrow [<span class="number">2013</span>-05-11T21:<span class="number">23</span>:<span class="number">58.970460</span>+07:<span class="number">00</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>utc = arrow.utcnow()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>utc</span><br><span class="line">&lt;Arrow [<span class="number">2013</span>-05-11T21:<span class="number">23</span>:<span class="number">58.970460</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now = arrow.now()  <span class="comment">#当前时间</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now</span><br><span class="line">&lt;Arrow [<span class="number">2022</span>-03-31T11:06:<span class="number">21.477106</span>+08:<span class="number">00</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>utc = utc.shift(hours=-<span class="number">1</span>)  <span class="comment">#偏移，前面1个小时</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>utc</span><br><span class="line">&lt;Arrow [<span class="number">2013</span>-05-11T20:<span class="number">23</span>:<span class="number">58.970460</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>local = utc.to(<span class="string">&#x27;US/Pacific&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>local</span><br><span class="line">&lt;Arrow [<span class="number">2013</span>-05-11T13:<span class="number">23</span>:<span class="number">58.970460</span>-07:<span class="number">00</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>local.timestamp()</span><br><span class="line"><span class="number">1368303838.970460</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>local.<span class="built_in">format</span>()   <span class="comment">#时间格式化</span></span><br><span class="line"><span class="string">&#x27;2013-05-11 13:23:58 -07:00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>local.<span class="built_in">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss ZZ&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;2013-05-11 13:23:58 -07:00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>local.humanize()  <span class="comment">#人性化输出</span></span><br><span class="line"><span class="string">&#x27;an hour ago&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>local.humanize(locale=<span class="string">&#x27;ko-kr&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;한시간 전&#x27;</span></span><br></pre></td></tr></table></figure>



<h1 id="引申"><a href="#引申" class="headerlink" title="引申"></a>引申</h1><h2 id="关于时间偏移shift"><a href="#关于时间偏移shift" class="headerlink" title="关于时间偏移shift"></a>关于时间偏移shift</h2><ul>
<li><p>源码部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">shift</span>(<span class="params">self, **kwargs: <span class="type">Any</span></span>) -&gt; <span class="string">&quot;Arrow&quot;</span>:</span><br><span class="line">    relative_kwargs = &#123;&#125;</span><br><span class="line">    additional_attrs = [<span class="string">&quot;weeks&quot;</span>, <span class="string">&quot;quarters&quot;</span>, <span class="string">&quot;weekday&quot;</span>]</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self._ATTRS_PLURAL <span class="keyword">or</span> key <span class="keyword">in</span> additional_attrs:</span><br><span class="line">            relative_kwargs[key] = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            supported_attr = <span class="string">&quot;, &quot;</span>.join(self._ATTRS_PLURAL + additional_attrs)</span><br><span class="line">            <span class="keyword">raise</span> ValueError(</span><br><span class="line">                <span class="string">f&quot;Invalid shift time frame. Please select one of the following: <span class="subst">&#123;supported_attr&#125;</span>.&quot;</span></span><br><span class="line">            )</span><br><span class="line">_ATTRS: Final[<span class="type">List</span>[<span class="built_in">str</span>]] = [</span><br><span class="line">    <span class="string">&quot;year&quot;</span>,</span><br><span class="line">    <span class="string">&quot;month&quot;</span>,</span><br><span class="line">    <span class="string">&quot;day&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hour&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minute&quot;</span>,</span><br><span class="line">    <span class="string">&quot;second&quot;</span>,</span><br><span class="line">    <span class="string">&quot;microsecond&quot;</span>,</span><br><span class="line">]</span><br><span class="line">_ATTRS_PLURAL: Final[<span class="type">List</span>[<span class="built_in">str</span>]] = [<span class="string">f&quot;<span class="subst">&#123;a&#125;</span>s&quot;</span> <span class="keyword">for</span> a <span class="keyword">in</span> _ATTRS]</span><br><span class="line">    additional_attrs = [<span class="string">&quot;weeks&quot;</span>, <span class="string">&quot;quarters&quot;</span>, <span class="string">&quot;weekday&quot;</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>测试代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> arrow</span><br><span class="line">now = arrow.now() </span><br><span class="line">now.shift(fenzhong=<span class="number">1</span>)  <span class="comment">#这是不支持的，支持的如下提示</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ValueError: Invalid shift time frame. Please select one of the following: years, months, days, hours, minutes, seconds, microseconds, weeks, quarters, weekday.</span><br></pre></td></tr></table></figure></li>
<li><p>示例代码：对shift的weeks和weekday的说明，其他的几个参数都比较简单</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> arrow</span><br><span class="line">now = arrow.now()</span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;YYYY-MM-DD&#x27;</span>))  <span class="comment">#当前时间  2022-03-31</span></span><br><span class="line"><span class="built_in">print</span>(now.shift(weeks=<span class="number">1</span>))    <span class="comment">#1周后      #2022-04-07T11:22:56.715460+08:00</span></span><br><span class="line"><span class="built_in">print</span>(now.shift(weekday=<span class="number">1</span>))  <span class="comment">#最近的周二  #2022-04-05T11:22:56.715460+08:00</span></span><br></pre></td></tr></table></figure>

<ul>
<li>weekday的取值范围是0~6,<strong>0代表周1,6代表周日</strong>，依次类推。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="关于时间格式化format"><a href="#关于时间格式化format" class="headerlink" title="关于时间格式化format"></a>关于时间格式化format</h2><ul>
<li><p>源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_format_token</span>(<span class="params">self, dt: datetime, token: <span class="type">Optional</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="type">Optional</span>[<span class="built_in">str</span>]:</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token <span class="keyword">and</span> token.startswith(<span class="string">&quot;[&quot;</span>) <span class="keyword">and</span> token.endswith(<span class="string">&quot;]&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> token[<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;YYYY&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> self.locale.year_full(dt.year)</span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;YY&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> self.locale.year_abbreviation(dt.year)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;MMMM&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> self.locale.month_name(dt.month)</span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;MMM&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> self.locale.month_abbreviation(dt.month)</span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;MM&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.month:02d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;M&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.month&#125;</span>&quot;</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;DDDD&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.timetuple().tm_yday:03d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;DDD&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.timetuple().tm_yday&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;DD&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.day:02d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;D&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.day&#125;</span>&quot;</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;Do&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> self.locale.ordinal_number(dt.day)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;dddd&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> self.locale.day_name(dt.isoweekday())</span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;ddd&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> self.locale.day_abbreviation(dt.isoweekday())</span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;d&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.isoweekday()&#125;</span>&quot;</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;HH&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.hour:02d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;H&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.hour&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;hh&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.hour <span class="keyword">if</span> <span class="number">0</span> &lt; dt.hour &lt; <span class="number">13</span> <span class="keyword">else</span> <span class="built_in">abs</span>(dt.hour - <span class="number">12</span>):02d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;h&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.hour <span class="keyword">if</span> <span class="number">0</span> &lt; dt.hour &lt; <span class="number">13</span> <span class="keyword">else</span> <span class="built_in">abs</span>(dt.hour - <span class="number">12</span>)&#125;</span>&quot;</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;mm&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.minute:02d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;m&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.minute&#125;</span>&quot;</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;ss&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.second:02d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;s&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.second&#125;</span>&quot;</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;SSSSSS&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.microsecond:06d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;SSSSS&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.microsecond // <span class="number">10</span>:05d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;SSSS&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.microsecond // <span class="number">100</span>:04d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;SSS&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.microsecond // <span class="number">1000</span>:03d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;SS&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.microsecond // <span class="number">10000</span>:02d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;S&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.microsecond // <span class="number">100000</span>&#125;</span>&quot;</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;X&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.timestamp()&#125;</span>&quot;</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;x&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.timestamp() * <span class="number">1_000_000</span>:<span class="number">.0</span>f&#125;</span>&quot;</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;ZZZ&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> dt.tzname()</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token <span class="keyword">in</span> [<span class="string">&quot;ZZ&quot;</span>, <span class="string">&quot;Z&quot;</span>]:</span><br><span class="line">        separator = <span class="string">&quot;:&quot;</span> <span class="keyword">if</span> token == <span class="string">&quot;ZZ&quot;</span> <span class="keyword">else</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        tz = dateutil_tz.tzutc() <span class="keyword">if</span> dt.tzinfo <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> dt.tzinfo</span><br><span class="line">        <span class="comment"># `dt` must be aware object. Otherwise, this line will raise AttributeError</span></span><br><span class="line">        <span class="comment"># https://github.com/arrow-py/arrow/pull/883#discussion_r529866834</span></span><br><span class="line">        <span class="comment"># datetime awareness: https://docs.python.org/3/library/datetime.html#aware-and-naive-objects</span></span><br><span class="line">        total_minutes = <span class="built_in">int</span>(cast(timedelta, tz.utcoffset(dt)).total_seconds() / <span class="number">60</span>)</span><br><span class="line">  </span><br><span class="line">        sign = <span class="string">&quot;+&quot;</span> <span class="keyword">if</span> total_minutes &gt;= <span class="number">0</span> <span class="keyword">else</span> <span class="string">&quot;-&quot;</span></span><br><span class="line">        total_minutes = <span class="built_in">abs</span>(total_minutes)</span><br><span class="line">        hour, minute = <span class="built_in">divmod</span>(total_minutes, <span class="number">60</span>)</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;sign&#125;</span><span class="subst">&#123;hour:02d&#125;</span><span class="subst">&#123;separator&#125;</span><span class="subst">&#123;minute:02d&#125;</span>&quot;</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token <span class="keyword">in</span> (<span class="string">&quot;a&quot;</span>, <span class="string">&quot;A&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> self.locale.meridian(dt.hour, token)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;W&quot;</span>:</span><br><span class="line">        year, week, day = dt.isocalendar()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;year&#125;</span>-W<span class="subst">&#123;week:02d&#125;</span>-<span class="subst">&#123;day&#125;</span>&quot;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<ul>
<li><p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> arrow</span><br><span class="line">now = arrow.now()</span><br><span class="line"><span class="built_in">print</span>(now)  <span class="comment">#2022-03-31T11:47:45.684950+08:00</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;YYYY&#x27;</span>)) <span class="comment">#四位的年  2022</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;YY&#x27;</span>))   <span class="comment">#两位的年  22</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;MMMM&#x27;</span>))  <span class="comment">#月份英文全拼   March</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;MMM&#x27;</span>)) <span class="comment">#月份简写 Mar</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;MM&#x27;</span>)) <span class="comment">#03</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;M&#x27;</span>))  <span class="comment">#3</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;DDDD&#x27;</span>))  <span class="comment">#090  这是啥?</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;DDD&#x27;</span>)) <span class="comment">#90</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;DD&#x27;</span>)) <span class="comment">#31 </span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;D&#x27;</span>)) <span class="comment">#31 </span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;dddd&#x27;</span>)) <span class="comment">#Thursday</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;ddd&#x27;</span>)) <span class="comment">#Thu</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;HH&#x27;</span>)) <span class="comment">#11</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;H&#x27;</span>)) <span class="comment">#11</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;hh&#x27;</span>)) <span class="comment">#11</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;h&#x27;</span>)) <span class="comment">#11</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;mm&#x27;</span>)) <span class="comment">#47</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;m&#x27;</span>)) <span class="comment">#47</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;ss&#x27;</span>)) <span class="comment">#45</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;s&#x27;</span>)) <span class="comment">#45</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;SSSSSS&#x27;</span>)) <span class="comment">#684950</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;SSSSS&#x27;</span>)) <span class="comment">#68495</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;SSSS&#x27;</span>)) <span class="comment">#6849</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;SSS&#x27;</span>)) <span class="comment">#684</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;SS&#x27;</span>)) <span class="comment">#68</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;S&#x27;</span>))  <span class="comment">#6</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;X&#x27;</span>)) <span class="comment">#1648698465.68495</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;x&#x27;</span>)) <span class="comment">#1648698465684950</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;ZZZ&#x27;</span>)) <span class="comment">#中国标准时间</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;ZZ&#x27;</span>)) <span class="comment">#+08:00</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;Z&#x27;</span>)) <span class="comment">#+0800</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;a&#x27;</span>)) <span class="comment">#am</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;A&#x27;</span>)) <span class="comment">#AM</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;W&#x27;</span>)) <span class="comment">#2022-W13-4</span></span><br></pre></td></tr></table></figure></li>
<li><p>补充</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(now.weekday())  <span class="comment">#输出当前周几</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="关于人性化humanize"><a href="#关于人性化humanize" class="headerlink" title="关于人性化humanize"></a>关于人性化humanize</h2><ul>
<li><p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> arrow</span><br><span class="line">now = arrow.now()</span><br><span class="line">past = now.shift(hours=-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(past.humanize()) <span class="comment">#an hour ago</span></span><br><span class="line">furture = now.shift(hours=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(furture.humanize())  <span class="comment">#in an hour</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="其他操作（属性、时间戳、替换）"><a href="#其他操作（属性、时间戳、替换）" class="headerlink" title="其他操作（属性、时间戳、替换）"></a>其他操作（属性、时间戳、替换）</h2><ul>
<li><p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> arrow</span><br><span class="line">now = arrow.now() </span><br><span class="line"><span class="built_in">print</span>(now)  <span class="comment">#2022-03-31T13:40:13.711922+08:00</span></span><br><span class="line"><span class="built_in">print</span>(now.year) </span><br><span class="line"><span class="built_in">print</span>(now.month)</span><br><span class="line"><span class="built_in">print</span>(now.day)</span><br><span class="line"><span class="built_in">print</span>(now.hour)</span><br><span class="line"><span class="built_in">print</span>(now.minute)</span><br><span class="line"><span class="built_in">print</span>(now.second)</span><br><span class="line"><span class="built_in">print</span>(now.microsecond)</span><br><span class="line"><span class="built_in">print</span>(now.timestamp()) <span class="comment">#1648705213.711922</span></span><br><span class="line"><span class="built_in">print</span>(now.int_timestamp) <span class="comment">#时间戳的整数部分 1648705213</span></span><br></pre></td></tr></table></figure></li>
<li><p>对于时间戳，可以通过get反过来获取时间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> arrow</span><br><span class="line">time1 = arrow.get(<span class="number">1648705213</span>)  <span class="comment">#注意不能使用引号</span></span><br><span class="line"><span class="built_in">print</span>(time1.year)</span><br></pre></td></tr></table></figure></li>
<li><p>计算毫秒的一个示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> arrow</span><br><span class="line">t1 = arrow.now().timestamp()</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">t2 = arrow.now().timestamp()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="built_in">round</span>(t2-t1,<span class="number">3</span>))*<span class="number">1000</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>替换时间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> arrow</span><br><span class="line">t1 = arrow.now()</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line">t2 = t1.replace(year=<span class="number">2018</span>)  <span class="comment">#替换个年份</span></span><br><span class="line"><span class="built_in">print</span>(t2)</span><br><span class="line">t3 = t1.replace(month=<span class="number">11</span>,day=<span class="number">14</span>) <span class="comment">#替换月和日</span></span><br><span class="line"><span class="built_in">print</span>(t3)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>完结</tag>
        <tag>python</tag>
        <tag>第三方库</tag>
      </tags>
  </entry>
  <entry>
    <title>Git入门指南(四)</title>
    <url>/2022/04/26/TODO-Git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97-%E5%9B%9B/</url>
    <content><![CDATA[<h1 id="Git入门指南-四"><a href="#Git入门指南-四" class="headerlink" title="Git入门指南(四)"></a>Git入门指南(四)</h1><blockquote>
<p>引用了 微信公众号 入门小站的内容</p>
<p>参考了pro git</p>
</blockquote>
<blockquote>
<p>简单地说，Git 究竟是怎样的一个系统呢？请注意接下来的内容非常重要，若你理解了 Git 的思想和基本工作原理，用起来就会知其所以然，游刃有余。在学习 Git 时，请尽量理清你对其它版本管理系统已有的认识，如 CVS、Subversion 或 Perforce， 这样能帮助你使用工具时避免发生混淆。尽管 Git 用起来与其它的版本控制系统非常相似， 但它在对信息的存储和认知方式上却有很大差异，理解这些差异将有助于避免使用中的困惑。</p>
</blockquote>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxd2eGx6e6WQVWU1vocxDy21mupcWyHDTCmrEa8JlISLLg2liaA2bt7a6A/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<h2 id="Git-初始化代码仓库"><a href="#Git-初始化代码仓库" class="headerlink" title="Git 初始化代码仓库"></a>Git 初始化代码仓库</h2><blockquote>
<p>执行完成了 git init 命令，究竟做了什么呢？</p>
</blockquote>
<blockquote>
<p>执行完成如下命令之后，我们可以得到下图所示的内容，右侧的就是 Git 为我们创建的代码仓库，其中包含了用于版本管理所需要的内容。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 左边执行</span><br><span class="line">$ mkdir git-demo</span><br><span class="line">$ cd git-demo &amp;&amp; git init</span><br><span class="line">$ rm -rf .git/hooks/*.sample</span><br><span class="line"></span><br><span class="line"># 右边执行</span><br><span class="line">$ watch -n 1 -d find .</span><br></pre></td></tr></table></figure>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdomOB4DHvAsCG1FvMWoNR8mgyg8xpRtadgEwcvr8ZDzZSFC8ic38WpPg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<blockquote>
<p>我们这里可以一起看下生成的 .git 目录的结构如何：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜ tree .git</span><br><span class="line">.git</span><br><span class="line">├── HEAD</span><br><span class="line">├── config</span><br><span class="line">├── description</span><br><span class="line">├── hooks</span><br><span class="line">├── info</span><br><span class="line">│&amp;nbsp;&amp;nbsp; └── exclude</span><br><span class="line">├── objects</span><br><span class="line">│&amp;nbsp;&amp;nbsp; ├── info</span><br><span class="line">│&amp;nbsp;&amp;nbsp; └── pack</span><br><span class="line">└── refs</span><br><span class="line">    ├── heads</span><br><span class="line">    └── tags</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>|</p>
<p><strong>.git/config - 当前代码仓库本地的配置文件</strong></p>
<ul>
<li>本地配置文件（.git/config）和全局配置文件（~/.gitconfig）</li>
<li>通过执行如下命令，可以将用户配置记录到本地代码仓库的配置文件中去</li>
<li>git config user.name “demo”</li>
<li>git config user.email “<a href="mailto:&#100;&#x65;&#x6d;&#111;&#x40;&#100;&#x65;&#109;&#x6f;&#x2e;&#x63;&#x6f;&#109;">&#100;&#x65;&#x6d;&#111;&#x40;&#100;&#x65;&#109;&#x6f;&#x2e;&#x63;&#x6f;&#109;</a>“</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜ cat .git/config</span><br><span class="line">[core]</span><br><span class="line">    repositoryformatversion = 0</span><br><span class="line">    filemode = true</span><br><span class="line">    bare = false</span><br><span class="line">    logallrefupdates = true</span><br><span class="line">    ignorecase = true</span><br><span class="line">    precomposeunicode = true</span><br><span class="line"></span><br><span class="line">[user]</span><br><span class="line">    name = demo</span><br><span class="line">    email = demo@demo.com</span><br></pre></td></tr></table></figure>

<p><strong>.git/objects - 当前代码仓库代码的存储位置</strong></p>
<ul>
<li>blob 类型</li>
<li>commit 类型</li>
<li>tree 类型</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 均无内容</span><br><span class="line">➜ ll .git/objects</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  2 escape  staff    64B Nov 23 20:39 info</span><br><span class="line">drwxr-xr-x  2 escape  staff    64B Nov 23 20:39 pack</span><br><span class="line"></span><br><span class="line">➜ ll .git/objects/info</span><br><span class="line">➜ ll .git/objects/pack</span><br></pre></td></tr></table></figure>

<p><strong>.git/info - 当前仓库的排除等信息</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜ cat ./.git/info/exclude</span><br><span class="line"># git ls-files --others --exclude-from=.git/info/exclude</span><br><span class="line"># Lines that start with &#x27;#&#x27; are comments.</span><br><span class="line"># For a project mostly in C, the following would be a good set of</span><br><span class="line"># exclude patterns (uncomment them if you want to use them):</span><br><span class="line"># *.[oa]</span><br><span class="line"># *~</span><br></pre></td></tr></table></figure>

<p><strong>.git/hooks - 当前代码仓库默认钩子脚本</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./.git/hooks/commit-msg.sample</span><br><span class="line">./.git/hooks/pre-rebase.sample</span><br><span class="line">./.git/hooks/pre-commit.sample</span><br><span class="line">./.git/hooks/applypatch-msg.sample</span><br><span class="line">./.git/hooks/fsmonitor-watchman.sample</span><br><span class="line">./.git/hooks/pre-receive.sample</span><br><span class="line">./.git/hooks/prepare-commit-msg.sample</span><br><span class="line">./.git/hooks/post-update.sample</span><br><span class="line">./.git/hooks/pre-merge-commit.sample</span><br><span class="line">./.git/hooks/pre-applypatch.sample</span><br><span class="line">./.git/hooks/pre-push.sample</span><br><span class="line">./.git/hooks/update.sample</span><br></pre></td></tr></table></figure>

<p><strong>.git/HEAD - 当前代码仓库的分支指针</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜ cat .git/HEAD</span><br><span class="line">ref: refs/heads/master</span><br></pre></td></tr></table></figure>

<p><strong>.git/refs - 当前代码仓库的头指针</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 均无内容</span><br><span class="line">➜ ll .git/refs</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  2 escape  staff    64B Nov 23 20:39 heads</span><br><span class="line">drwxr-xr-x  2 escape  staff    64B Nov 23 20:39 tags</span><br><span class="line"></span><br><span class="line">➜ ll .git/refs/heads</span><br><span class="line">➜ ll .git/refs/tags</span><br></pre></td></tr></table></figure>

<p><strong>.git/description - 当前代码仓库的描述信息</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜ cat .git/description</span><br><span class="line">Unnamed repository; edit this file &#x27;description&#x27; to name the repository.</span><br></pre></td></tr></table></figure>

<h2 id="add-之后发生了什么"><a href="#add-之后发生了什么" class="headerlink" title="add 之后发生了什么"></a>add 之后发生了什么</h2><blockquote>
<p>执行完成了 git add 命令，究竟做了什么呢？</p>
</blockquote>
<blockquote>
<p>执行完成如下命令之后，我们可以得到下图所示的内容，我们发现右侧新增了一个文件，但是 Git 目录里面的内容丝毫没有变化。这是因为，我们现在执行的修改默认是放在工作区的，而工作区里面的修改不归 Git 目录去管理。</p>
</blockquote>
<blockquote>
<p>而当我们执行 git status 命令的时候，Git 又可以识别出来现在工作区新增了一个文件，这里怎么做到的呢？—— 详见[理解 blob 对象和 SHA1]部分</p>
</blockquote>
<blockquote>
<p>而当我们执行 git add 命令让 Git 帮助我们管理文件的时候，发现右侧新增了一个目录和两个文件，分别是 8d 目录、index 和 0e41.. 文件。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ echo &quot;hello git&quot; &gt; helle.txt</span><br><span class="line">$ git status</span><br><span class="line">$ git add hello.txt</span><br><span class="line"></span><br><span class="line"># 右边执行</span><br><span class="line">$ watch -n 1 -d find .</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdFbV5YUtl0oeFIdkEVv1lBKfgCSgazvgWozgSNB0vhM1EM6BhuqfHhQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdKqjXtGkLuZyaB8QRYg15QWjnib15sUoUQT5MwZK7cia2OLtmNibyR8X8Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<blockquote>
<p>我们这里重点看下，生成的 8d 这个目录以及下面的文件。而其名称的由来是因为 Git 对其进行了一个叫做 SHA1 的 Hash 算法，用于将文件内容或者字符串变成这么一串加密的字符。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看 objects 的文件类型</span><br><span class="line">$ git cat-file -t 8d0e41</span><br><span class="line">blob</span><br><span class="line"></span><br><span class="line"># 查看 objects 的文件内容</span><br><span class="line">$ git cat-file -p 8d0e41</span><br><span class="line">hello git</span><br><span class="line"></span><br><span class="line"># 查看 objects 的文件大小</span><br><span class="line">$ git cat-file -s 8d0e41</span><br><span class="line">10</span><br><span class="line"></span><br><span class="line"># 拼装起来</span><br><span class="line">blob 10\0hello git</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>现在我们就知道了，执行 git add 命令将文件从工作区添加到暂存区里面，Git 会把帮助我们生成一些 Git 的对象，它存储的是文件的内容和文件类型并不存储文件名称。</p>
</blockquote>
<blockquote>
<p>为了验证我们上述的说法，我们可以添加同样的内容到另一个文件，然后进行提交，来观察 .git 目录的变化。我们发现，右侧的 objects 目录并没有新增目录和文件。这就可以证明，blob 类型的 object 只存储的是文件的内容，如果两个文件的内容一致的话，则只需要存储一个 object 即可。</p>
</blockquote>
<blockquote>
<p>话说这里 object 为什么没有存储文件名称呢？这里因为 SHA1 的 Hash 算法计算哈希的时候，本身就不包括文件名称，所以取什么名称都是无所谓的。那问题来了，就是文件名的信息都存储到哪里去了呢？—— 详见[理解 blob 对象和 SHA1]部分</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 左边执行</span><br><span class="line">$ echo &quot;hello git&quot; &gt; tmp.txt</span><br><span class="line">$ git add tmp.txt</span><br><span class="line"></span><br><span class="line"># 右边执行</span><br><span class="line">$ watch -n 1 -d find .</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdNyQeDsNTbI8RgFZ8TOUrfZXthvwz4sZptPuzw0JIos2axbvdZXWIwA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<h2 id="理解-blob-对象和-SHA1"><a href="#理解-blob-对象和-SHA1" class="headerlink" title="理解 blob 对象和 SHA1"></a>理解 blob 对象和 SHA1</h2><blockquote>
<p>了解 Git 的 blob 对象和 SHA1 之前的关系和对应计算！</p>
</blockquote>
<blockquote>
<p>Hash 算法是把任意长度的输入通过散列算法变化成固定长度的输出，根据算法的不同，生成的长度也有所不同。</p>
</blockquote>
<p>Hash 算法：</p>
<ul>
<li>MD5 - 128bit - 不安全 - 文件校验</li>
<li>SHA1 - 160bit(40位) - 不安全 - Git 存储</li>
<li>SHA256 - 256bit- 安全 - Docker 镜像</li>
<li>SHA512 - 512bit - 安全</li>
</ul>
<p>但是，当我们使用工具对上述文件内容进行 SHA1 计算的时候，会发现并没有我们在 .git 目录里面看到的那样，这是为什么呢？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜ echo &quot;hello git&quot; | shasum</span><br><span class="line">d6a96ae3b442218a91512b9e1c57b9578b487a0b  -</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里因为 Git 工具的计算方式，是使用类型 长度 \0 内容的方式进行计算的。这里，我们算了下文件内容只有九位，但是这里是十位，这里因为内容里面有换行符的存在导致的。现在我们就可以使用 git cat-file 命令来拼装 Git 工具存储的完整内容了。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜ ls -lh hello.txt</span><br><span class="line">-rw-r--r--  1 escape  staff    10B Nov 23 21:12 hello.txt</span><br><span class="line"></span><br><span class="line">➜ echo &quot;blob 10\0hello git&quot; | shasum</span><br><span class="line">8d0e41234f24b6da002d962a26c2495ea16a425f  -</span><br><span class="line"></span><br><span class="line"># 拼装起来</span><br><span class="line">blob 10\0hello git</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdgmicmZrkGBtrhhLzibj3sZ028dDBM616qaiaImrq5rdSvOvQ3bggQ7gwQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<blockquote>
<p>当我们使用 cat 命令来查看 object 对象里面的内容的时候，发现看着像是一串乱码。其实这是 Git 工具将文件的原始内容进行一个压缩，然后再存储到 object 对象里面。奇怪的是，我们发现压缩之后的内容反而比原始内容还大！</p>
</blockquote>
<blockquote>
<p>这是因为其进行了压缩，存储了一些压缩相关的信息。上例所示的比原始文件大，是因为我们创建的内容实在是太小了。当我们常见一个比较大的文件时，就会看到压缩之后的文件大小远小于原始文件的。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜ cat .git/objects/8d/0e41234f24b6da002d962a26c2495ea16a425f</span><br><span class="line">xKOR04`HWH,6A%</span><br><span class="line"></span><br><span class="line">➜ ls -lh .git/objects/8d/0e41234f24b6da002d962a26c2495ea16a425f</span><br><span class="line">-r--r--r--  1 escape  staff    26B Nov 23 21:36 .git/objects/8d/0e41234f24b6da002d962a26c2495ea16a425f</span><br><span class="line"></span><br><span class="line">➜ file .git/objects/8d/0e41234f24b6da002d962a26c2495ea16a425f</span><br><span class="line">.git/objects/8d/0e41234f24b6da002d962a26c2495ea16a425f: VAX COFF executable not stripped - version 16694</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其实，我们这里也是可以通过 Python 代码来获取二进制 object 对象的内容的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import zlib</span><br><span class="line"></span><br><span class="line">contents = open(&#x27;0e41234f24b6da002d962a26c2495ea16a425f&#x27;, &#x27;rb&#x27;).read()</span><br><span class="line">zlib.decompress(contents)</span><br></pre></td></tr></table></figure>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdFcybQcBYp0b41pZZ7UJjetyqxgH9BGpicibGMzBwd5wRgnP52zvLdnbA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<h2 id="聊聊工作区和暂存区"><a href="#聊聊工作区和暂存区" class="headerlink" title="聊聊工作区和暂存区"></a>聊聊工作区和暂存区</h2><blockquote>
<p>聊聊工作区和暂存区，以及文件如何在工作区和缓存区之间同步的问题。</p>
</blockquote>
<blockquote>
<p>之前的章节我们也聊到了，当我们执行 git status 命令的时候，Git 工具怎么知道我们有一个文件没有追踪，以及文件名的信息都存储到哪里去了？</p>
</blockquote>
<blockquote>
<p>这一切的答案，都要从工作区和索引区讲起。Git 根据其存储的状态不同，将对应状态的“空间”分为工作区、暂存区（也可称为索引区）和版本区三类。具体示例，可以参考下图。</p>
</blockquote>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxda2eiblOwzFj9OGsrzibGy35XUBf28RVxyePiaic3eJ3xwaYQq6icjiaibPH5Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<blockquote>
<p>而更加深层次的理解，就要从执行 git add 命令后生成相关的 object 对象，但是其存储的是文件的类容、大小和内容，并不包含文件名称的信息。而文件名称相关的信息就包含在生成的 index 文件（索引文件）里面。</p>
</blockquote>
<blockquote>
<p>当我们直接查看 index 文件里面的内容，发现使我们无法理解的乱码，但是通过基本的输出，我们可以看到其文件名称。要想查看 index 文件的内容，可以通过 Git 提供的相关命令进行查看。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 左边执行</span><br><span class="line">$ echo &quot;file1&quot; &gt; file1.txt</span><br><span class="line">$ git add file1.txt</span><br><span class="line">$ cat .git/index</span><br><span class="line"></span><br><span class="line">$ git ls-files     # 列出当前暂存区的文件列表信息</span><br><span class="line">$ git ls-files -s  # 列出当前暂存区文件的详细信息</span><br><span class="line"></span><br><span class="line"># 右边执行</span><br><span class="line">$ watch -n 1 -d tree .git</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdPdvib8tVyV6r4ibrkLy1MznxslcAtPOHXUqocKxdSicF8xTVqTomjExiaw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<blockquote>
<p>当添加文件的时候，文件或目录会从工作区流向暂存区，加之一些其他操作，会导致工作区和暂存区是会有一定差别的。这就会导致，当我们执行 git status 的结果就是两者的差别。</p>
</blockquote>
<blockquote>
<p>经过如下操作，会使工作区和暂存区和的内容不一致了，通过命令我们也是可以查看区别的。当我们使用 add 命令将新文件添加到暂存区的时候，会发现这下就一致了。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 左边执行</span><br><span class="line">$ git status</span><br><span class="line">$ echo &quot;file2&quot; &gt; file2.txt</span><br><span class="line">$ git ls-files -s</span><br><span class="line">$ git status</span><br><span class="line">$ git add file2.txt</span><br><span class="line">$ git ls-files -s</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 右边执行</span><br><span class="line">$ watch -n 1 -d tree .git</span><br></pre></td></tr></table></figure>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdzD8acA7pdajMfFBTC3slEdgibe1bWzwjueZutZLMqQDIxrmWI03AISg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<blockquote>
<p>如果我们这里去修改一个文件的话，很显然这个时候我们的工作区和暂存区又不一致了。当我们使用命令去查看文件状态的时候，发现一个文件被修改了，而 Git 是怎么知道的呢？咳咳，就是通过查找 index 文件的内容，找到对应文件名称以及其内部引用的 object 对象，与工作区的文件内容进行对比而来的。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 左边执行</span><br><span class="line">$ git ls-files -s</span><br><span class="line">$ echo &quot;file.txt&quot; &gt; file1.txt</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 右边执行</span><br><span class="line">$ watch -n 1 -d tree .git</span><br></pre></td></tr></table></figure>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdR63UGFVQYJwRGL7SoFRQjZEcvWzzHDzQibBj5NPuKjgpLjpuwY8IibQA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<blockquote>
<p>而这个时候，我们再使用 git add 命令将其修改内容保存至暂存区的话，会发现对应文件的 object 的 blob 对象的引用值发生改变了。这时可以发现，objects 目录下面有三个对象了，其中 file1.txt 占了两个，但是文件却只有两个。通过命令查看对应 blob 对象的内容，发现各有不同。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 左边执行</span><br><span class="line">$ git ls-files -s</span><br><span class="line">$ git add file1.txt</span><br><span class="line">$ git ls-files -s</span><br><span class="line"></span><br><span class="line"># 右边执行</span><br><span class="line">$ watch -n 1 -d tree .git</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdo9iczyDiaoWQSOiaF5iaDXvTPfpTeuGm6dyvIib6cJZeZe1NY3TTDvVibveg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<h2 id="理解-commit-提交原理"><a href="#理解-commit-提交原理" class="headerlink" title="理解 commit 提交原理"></a>理解 commit 提交原理</h2><blockquote>
<p>执行完成了 git commit 命令，究竟做了什么呢？</p>
</blockquote>
<p>Git 仓库中的提交记录保存的是你的目录下所有文件的快照，就像是把整个目录复制，然后再粘贴一样，但比复制粘贴优雅许多！Git 希望提交记录尽可能地轻量，因此在你每次进行提交时，它并不会盲目地复制整个目录。条件允许的情况下，它会将当前版本与仓库中的上一个版本进行对比，并把所有的差异打包到一起作为一个提交记录。Git 还保存了提交的历史记录。这也是为什么大多数提交记录的上面都有父节点的原因。</p>
<blockquote>
<p>当我们使用 add 命令将工作区提交到暂存区，而暂存区其实保存的是当前文件的一个状态，其中包括有哪些目录和文件，以及其对应的大小和内容等信息。但是我们最终是需要将其提交到代码仓库（本地）的，而其命令就是 git commit 了。</p>
</blockquote>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdYqk7cCmI0vFwVxcXTE66bab0ibZjmhM2ohvPedTMScHt1t6TSBQ4SPg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<blockquote>
<p>而当我们执行 git commit 命令的时候，究竟都发生了什么呢？可以看到当提交之后，.git 目录中生成了两个信息的 object 对象，其中 logs 和 refs 目录都有新的文件生成。通过如下操作，我们可以查看到其提交的类型和对应内容。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 左边执行</span><br><span class="line">$ git commit -m &quot;1st commit&quot;</span><br><span class="line"></span><br><span class="line">$ git cat-file -t 6e4a700  # 查看 commit 对象的类型</span><br><span class="line">$ git cat-file -p 6e4a700  # 查看 commit 对象的内容</span><br><span class="line"></span><br><span class="line">$ git cat-file -t 64d6ef5  # 查看 tree 对象的类型</span><br><span class="line">$ git cat-file -p 64d6ef5  # 查看 tree 对象的内容</span><br><span class="line"></span><br><span class="line"># 右边执行</span><br><span class="line">$ watch -n 1 -d tree .git</span><br></pre></td></tr></table></figure>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdmMfGauxDzKSQRIDNAbTLylXtJNwDLDSS9iakeKeWLgpfxicUnicvRyazQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<blockquote>
<p>这样我们就理解了，当我们执行 git commit 命令之后，会生成一个 commit 对象和一个 tree 对象。commit 对象内容里面包含了一个 tree 对象和相关提交信息，而 tree 对象里面则包含了这次我们提交版本里面的文件状态（文件名称和 blob 对象），这样我们就知道了这次提交的变动了。</p>
</blockquote>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdLiboCjcia6GI6RZQulOQhDNYdvpcRW2PBXHS78wuia5GxBBFJk8KKtSdQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<blockquote>
<p>我们这次提交之后，处理 objects 目录发生变动之外，还有一些其他的变化。比如 logs 和 refs 的目录有所变化。我们查看 refs 目录里面的内容，发现其指向了 6e4a70 这个 commit 对象，即当前 master 分支上面最新的提交就是这个 6e4a70 了。</p>
</blockquote>
<p>而这个 6e4a70 这个 commit 对象，有一个 HEAD 的指向，就是 .git 目录下的 HEAD 文件。其实质就是一个指针，其永远指向我们当前工作的分支，即这里我们工作在 master 分支上。当我们切换分支的时候，这个文件的指向也会随机改变的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 左边执行</span><br><span class="line">$ cat .git/refs/heads/master</span><br><span class="line">$ cat .git/HEAD</span><br><span class="line"></span><br><span class="line"># 右边执行</span><br><span class="line">$ watch -n 1 -d tree .git</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdZ7zaemajuUJBIJHRJicc22C17suD3aibNpb2xv1Pt14SwaqY0iafgXlIw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<h2 id="加深理解-commit-提交"><a href="#加深理解-commit-提交" class="headerlink" title="加深理解 commit 提交"></a>加深理解 commit 提交</h2><blockquote>
<p>执行完成了 git commit 命令，究竟做了什么呢？</p>
</blockquote>
<blockquote>
<p>当我们再次对 file2.txt 文件的内容进行变更、添加以及提交之后，发现在提交的时候，查看的 commit 对象的内容时，其包含有父节点的 commit 信息。而对于理解的话，可以看看下面的这个提交流程图。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 左边执行</span><br><span class="line">$ echo &quot;file2.txt&quot; &gt; file2.txt</span><br><span class="line">$ git status</span><br><span class="line">$ git add file2.txt</span><br><span class="line">$ git ls-files -s</span><br><span class="line">$ git cat-file -p 0ac9638</span><br><span class="line">$ git commit -m &quot;2nd commit&quot;</span><br><span class="line">$ git cat-file -p bab53ff</span><br><span class="line">$ git cat-file -p 2f07720</span><br><span class="line"></span><br><span class="line"># 右边执行</span><br><span class="line">$ watch -n 1 -d tree .git</span><br></pre></td></tr></table></figure>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdoCtlaIyqvcudGaPFT9GXBtSmoAoP2z7Lk22RoGGIQKYL6jee7DP9sA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdulR7L22e1FXQlicwsesnGzLv9ycBibBxgbXJDdicdZvpp1Ed1ibmtVhRJg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<p>在 Git 中空文件夹是不算在追踪范围内的，而且添加文件夹并不会增加 object 对象。当我们查看 index 内容的时候，会发现文件名称是包含相对路径的。</p>
<blockquote>
<p>而当我们通过 commit 命令提交之后，会发现生成了三个 object 对象，因为 commit 操作不会生成 blob 对象，所以分别是一个 commit 对象和两个 tree 对象。可以发现，tree 对象里面有包含了一个目录的 tree，其里面包含对象文件内容。</p>
</blockquote>
<blockquote>
<p>下图所示的文件状态，可以体会到 Git 中版本的概念。即 commit 对象指向一个该版本中的文件目录树的根（tree），然后 tree 在指向 blob 对象（文件）和 tree 对象（目录），这样就可以无限的往复下去形成一个完整的版本。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 左边执行</span><br><span class="line">$ mkdir floder1</span><br><span class="line">$ echo &quot;file3&quot; &gt; floder1/file3.txt</span><br><span class="line">$ git add floder1</span><br><span class="line">$ git ls-files -s</span><br><span class="line">$ git commit -m &quot;3rd commit&quot;</span><br><span class="line">$ git cat-file -p 1711e01</span><br><span class="line">$ git cat-file -p 9ab67f8</span><br><span class="line"></span><br><span class="line"># 右边执行</span><br><span class="line">$ watch -n 1 -d tree .git</span><br></pre></td></tr></table></figure>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdOwzkOfkpbdnj1NJkDQFDmwu3I9pUTyryelO4dq7jSoZNL9qYLDXhMA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<h2 id="文件的生命周期状态"><a href="#文件的生命周期状态" class="headerlink" title="文件的生命周期状态"></a>文件的生命周期状态</h2><p>总结一下，Git 里面的文件状态和如何切换。</p>
<p>现在，我们已经基本理解了文件如何在工作区、暂存区以及代码仓库之间进行状态的跟踪和同步。在 Git 的操作中，文件的可能状态有哪些，以及如何进行状态切换的，我们这里一起总结一下！</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdEGTDjtW1vu78h6l7I9dzEVgUFJ9AoYQ1HqAfQiaNiaLCawlon9obhbAA/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdf82ejPAmNuN1oySLxyeicp6E9RKOzcL4ROQhI3XibqichPiaNb2cib1CyVA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<h2 id="Branch-和-HEAD-的意义"><a href="#Branch-和-HEAD-的意义" class="headerlink" title="Branch 和 HEAD 的意义"></a>Branch 和 HEAD 的意义</h2><blockquote>
<p>执行完成了 git branch 命令，究竟做了什么呢？</p>
</blockquote>
<blockquote>
<p>到底什么是分支？分支切换又是怎么一回事？我们通过查看 Git 的官方文档，就可以得到，分支就是一个有名字的（master/dev）指向 commit 对象的一个指针。</p>
</blockquote>
<blockquote>
<p>我们在初始化仓库的时候，提供会默认给我们分配一个叫做 master 的分支（在最新的版本默认仓库已经变更为 main 了），而 master 分支就是指向最新的一次提交。为什么需要给分支起名字呢？就是为了方便我们使用和记忆，可以简单理解为 alias 命令的意义一致。</p>
</blockquote>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdw8m3CgkbFr7IIIkia5dMn1PiaCHwyCHoGLlU8xhXhTEEq7WCBHJmceNA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<blockquote>
<p>有了上述基础，我们就需要考虑下，分支到底是如何实现和工作的。要实现一个分支，我们最基本需要解决两个问题，第一个就是需要存储每一个分支指向的 commit，第二个问题就是在切换分支的时候帮助我们标识当前分支。</p>
</blockquote>
<p>在 Git 中，它有一个非常特殊的 HEAD 文件。而 HEAD 文件是一个指针，其有一个特性就是总会指向当前分支的最新的一个 commit 对象。而这个 HEAD 文件正好，解决了我们上面提出的两个问题。</p>
<p>当我们从 master 切换分支到 dev 的时候，HEAD 文件也会随即切换，即指向 dev 这个指针。设计就是这么美丽，不愧是鬼才，好脑袋。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxddgYjN8qQNPXHyA5OwapuickPHp4ZEj5EjLKcN9rDaA0bkCdSHNuOdag/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 左边执行</span><br><span class="line">$ cat .git/HEAD</span><br><span class="line">$ cat .git/refs/heads/master</span><br><span class="line">$ git cat-file -t 1711e01</span><br><span class="line"></span><br><span class="line"># 右边执行</span><br><span class="line">$ glo = git log</span><br></pre></td></tr></table></figure>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxd77KoRLkiaOyWoxibvkicLJWsmpD5DDichpxibwWV1LOhLbq9ibUyroN1jPNw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<h2 id="分支操作的背后逻辑"><a href="#分支操作的背后逻辑" class="headerlink" title="分支操作的背后逻辑"></a>分支操作的背后逻辑</h2><blockquote>
<p>执行完成了 git branch 命令，究竟做了什么呢？</p>
</blockquote>
<blockquote>
<p>这里我们可以看到分支切换之后，HEAD 指向发生变动了。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 左边执行</span><br><span class="line">$ git branch</span><br><span class="line">$ git branch dev</span><br><span class="line">$ ll .git/refs/heads</span><br><span class="line">$ cat .git/refs/heads/master</span><br><span class="line">$ cat .git/refs/heads/dev</span><br><span class="line">$ cat .git/HEAD</span><br><span class="line">$ git checkout dev</span><br><span class="line">$ cat .git/HEAD</span><br><span class="line"></span><br><span class="line"># 右边执行</span><br><span class="line">$ glo = git log</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdHGFlT1Wx7eHknHFAgsChNWOnGlo3VSXmogzibopMfSVUAtAsDNaWGOg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<blockquote>
<p>这里需要注意的是，即使我们删除了分支，但是该分支上一些特有的对象并不会被删除的。这些对象其实就是我们俗称的垃圾对象，还有我们多次使用 add 命令所产生的也有垃圾对象，而这些垃圾对象怎么清除和回收呢？后续，我们会涉及到的。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 左边执行</span><br><span class="line">$ echo &quot;dev&quot; &gt; dev.txt</span><br><span class="line">$ git add dev.txt</span><br><span class="line">$ git commit -m &quot;1st commit from dev branch&quot;</span><br><span class="line">$ git checkout master</span><br><span class="line">$ git branch -d dev</span><br><span class="line">$ git branch -D dev</span><br><span class="line">$ git cat-file -t 861832c</span><br><span class="line">$ git cat-file -p 861832c</span><br><span class="line">$ git cat-file -p 680f6e9</span><br><span class="line">$ git cat-file -p 38f8e88</span><br><span class="line"></span><br><span class="line"># 右边执行</span><br><span class="line">$ glo = git log</span><br></pre></td></tr></table></figure>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdhlR0wfGICCww4WdOTias7BickkURdJJ2ibVft9czJyv4T7ggNhDR2Im5g/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<h2 id="checkout-和-commit-操作"><a href="#checkout-和-commit-操作" class="headerlink" title="checkout 和 commit 操作"></a>checkout 和 commit 操作</h2><blockquote>
<p>我们一起聊一聊，checkout 和 commit 的操作！</p>
</blockquote>
<p>我们执行 checkout 命令的时候，其不光可以切换分支，而且可以切换到指定的 commit 上面，即 HEAD 文件会指向某个 commit 对象。在 Git 里面，将 HEAD 文件没有指向 master 的这个现象称之为 detached HEAD。</p>
<p>这里不管 HEAD 文件指向的是分支名称也好，是 commit 对象也罢，其实本质都是一样的，因为分支名称也是指向某个 commit 对象的。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdeEicCukC1cO60Quf8GdcXxjbUxgicSjjpOdQKiaBZB3Sm5xia3A1qwiacZQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 左边执行</span><br><span class="line">$ git checkout 6e4a700</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 右边执行</span><br><span class="line">$ glo = git log</span><br></pre></td></tr></table></figure>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdk8Ase4zsQibPcpKmMoalllicWV2rDR8zrib0NKVv9KkWyOY1H3ib0L7pzg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<blockquote>
<p>当我们切换到指定的 commit 的时候，如果需要在对应的 commit 上继续修改代码提交的话，可以使用上述图片中提及的 swtich 命令创建新分支，再进行提交。但是，通常我们都不会着玩，都会使用 checkout 命令来创建新分支的。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout -b tmp</span><br><span class="line">$ git log</span><br></pre></td></tr></table></figure>

<blockquote>
<p>即使可以这样操作，我们也很少使用。还记得我们上一章节创建的 dev 分支吗？我们创建了该分支并有了一个新的提交，但是没有合并到 master 分支就直接删除了。现在再使用 log 命令查看的话，是看不到了。</p>
</blockquote>
<p>实际，真的看不到了吗？大家要记住，在 Git 里面任何的操作，比如分支的删除。它只是删除了指向某个特定 commit 的指针引用而已，而那个 commit 本身并不会被删除，即 dev 分支的那个 commit 提交还是在的。</p>
<blockquote>
<p>那我们怎么找到这个 commit 呢？找到之后，我们就可以在上面继续工作，或者找到之前的文件数据等。</p>
</blockquote>
<blockquote>
<p>第一种方法：</p>
</blockquote>
<ul>
<li>[费劲不太好，下下策]</li>
<li>在 objects 目录下面，自己一个一个看，然后切换过去。</li>
</ul>
<blockquote>
<p>第二种方法：</p>
</blockquote>
<ul>
<li>[推荐的操作方式]</li>
<li>使用 Git 提供的 git reflog 专用命令来查找。</li>
<li>该命令的作用就是用于将我们之前的所有操作都记录下来。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 左边执行</span><br><span class="line">$ git reflog</span><br><span class="line">$ git checkout 9fb7a14</span><br><span class="line">$ git checkout -b dev</span><br><span class="line"></span><br><span class="line"># 右边执行</span><br><span class="line">$ glo = git log</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdtgeQnV3boLkKXxSnlPPibzUBmVwqY8k5hUxibBRb5rXHqx7t6acibCDFw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdfIMZR9Ghd8NichMXdHImBRwe2bvstIPAg6MibZvG1GlTGVbIj5cXl1kA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<h2 id="聊聊-diff-的执行逻辑"><a href="#聊聊-diff-的执行逻辑" class="headerlink" title="聊聊 diff 的执行逻辑"></a>聊聊 diff 的执行逻辑</h2><blockquote>
<p>当我们执行 diff 命令之后，Git 的逻辑它们是怎么对比出来的呢？</p>
</blockquote>
<blockquote>
<p>就在本节中中，我们使用上节的仓库，修改文件内容之后，看看 diff 命令都输出了哪些内容呢？我们这里一起来看看，研究研究！</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ echo &quot;hello&quot; &gt; file1.txt</span><br><span class="line">$ git diff</span><br><span class="line">$ git cat-file -p 42d9955</span><br><span class="line">$ git cat-file -p ce01362</span><br><span class="line"></span><br><span class="line"># 下述命令原理也是一样的</span><br><span class="line">$ git diff --cached</span><br><span class="line">$ git diff HEAD</span><br></pre></td></tr></table></figure>

<p><img src="https://mmbiz.qpic.cn/mmbiz_png/8v3VjEJ7GTrqCcl485nLEMZibvrskgqxdL5ibksNQAk26sHUjSSge4ETaPJeqiba2JPRymzUmxa0CrOcs5y1D3Brg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图片</p>
<h2 id="Git-如何添加远程仓库"><a href="#Git-如何添加远程仓库" class="headerlink" title="Git 如何添加远程仓库"></a>Git 如何添加远程仓库</h2><blockquote>
<p>如何将我们本地的仓库和远程服务器上面的仓库关联起来呢？</p>
</blockquote>
<p><strong>初始化仓库</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git init$ git add README.md$ git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure>

<p><strong>关联远程仓库</strong></p>
<blockquote>
<p>当我们使用上述命令来关联远程服务器仓库的时候，我们本地 .git 目录也是会发生改变的。通过命令查看 .git/config 文件的话，可以看到配置文件中出现了 [remote] 字段。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 关联远程仓库</span><br><span class="line">$ git remote add origin git@github.com:escapelife/git-demo.git</span><br><span class="line"></span><br><span class="line">➜ cat .git/config</span><br><span class="line">[core]</span><br><span class="line">    repositoryformatversion = 0</span><br><span class="line">    filemode = true</span><br><span class="line">    bare = false</span><br><span class="line">    logallrefupdates = true</span><br><span class="line">    ignorecase = true</span><br><span class="line">    precomposeunicode = true</span><br><span class="line"></span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">    url = git@github.com:escapelife/git-demo.git</span><br><span class="line">    fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>推送本地分支</strong></p>
<blockquote>
<p>当我们执行如下命令，将本地 master 分支推送到远程 origin 仓库的 master 分支。之后，我们登陆 GitHub 就可以看到推送的文件及目录内容了。</p>
</blockquote>
<blockquote>
<p>推送分支内容的时候，会列举推送的 objects 数量，并将其内容进行压缩，之后推送到我们远程的 GitHub 仓库，并且创建了一个远程的 master 分支（origin 仓库）。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 推送本地分支</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<p>推送之后，我们可以发现，本地的 .git 生成了一些文件和目录，它们都是什么呢？如下所示，会新增四个目录和两个文件，皆为远程仓库的信息。当我们通过命令查看 master 这个文件的内容时，会发现其也是一个 commit 对象。此时与我们本地 master 分支所指向的一致。而其用于表示远程仓库的当前版本，用于和本地进行区别和校对的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜ tree .git</span><br><span class="line">├── logs</span><br><span class="line">│&amp;nbsp;&amp;nbsp; ├── HEAD</span><br><span class="line">│&amp;nbsp;&amp;nbsp; └── refs</span><br><span class="line">│&amp;nbsp;&amp;nbsp;     ├── heads</span><br><span class="line">│&amp;nbsp;&amp;nbsp;     │   ├── dev</span><br><span class="line">│&amp;nbsp;&amp;nbsp;     │   ├── master</span><br><span class="line">│&amp;nbsp;&amp;nbsp;     │   └── tmp</span><br><span class="line">│       └── remotes     # 新增目录</span><br><span class="line">│&amp;nbsp;&amp;nbsp;         └── origin  # 新增目录</span><br><span class="line">│&amp;nbsp;&amp;nbsp;             └── master  # 新增文件</span><br><span class="line">└── refs</span><br><span class="line">    ├── heads</span><br><span class="line">    │&amp;nbsp;&amp;nbsp; ├── dev</span><br><span class="line">    │&amp;nbsp;&amp;nbsp; ├── master</span><br><span class="line">    │&amp;nbsp;&amp;nbsp; └── tmp</span><br><span class="line">    ├── remotes     # 新增目录</span><br><span class="line">    │&amp;nbsp;&amp;nbsp; └── origin  # 新增目录</span><br><span class="line">    │&amp;nbsp;&amp;nbsp;     └── master  # 新增文件</span><br><span class="line">    └── tags</span><br></pre></td></tr></table></figure>

<h2 id="远程仓库存储代码"><a href="#远程仓库存储代码" class="headerlink" title="远程仓库存储代码"></a>远程仓库存储代码</h2><p>使用 GitLab 来了解远程仓库的服务器到底是如何存储，我们的代码的！</p>
<blockquote>
<p>当我们编写完代码之后，将其提交到对应的远程服务器上面，其存储结构和我们地址是一模一样的。如果我们仔细想想的话，不一样的话才见怪了。</p>
</blockquote>
<blockquote>
<p>Git 本来就是代码的分发平台，无中心节点，即每个节点都是主节点，所以其存储的目录结构都是一直的。这样，不管哪一个节点的内容发生丢失或缺失的话，我们都可以通过其他节点来找到。而 Git 服务器就是一个可以帮助我们，实时都可以找到的节点，而已。</p>
</blockquote>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>待续</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins CLI命令行</title>
    <url>/2022/04/21/TODO-JenkinsCli/</url>
    <content><![CDATA[<h1 id="Jenkins-CLI命令行"><a href="#Jenkins-CLI命令行" class="headerlink" title="Jenkins CLI命令行"></a>Jenkins CLI命令行</h1><blockquote>
<p>jenkins不光可以UI操作还提供了命令行接口</p>
</blockquote>
<h2 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h2><ul>
<li>首页-&gt;系统管理-&gt;工具和动作-&gt;Jenkins 命令行接口</li>
<li>在这个界面下载一个jenkins-cli.jar</li>
</ul>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><h4 id="方式一：用户名密码"><a href="#方式一：用户名密码" class="headerlink" title="方式一：用户名密码"></a>方式一：用户名密码</h4><ul>
<li>登录操作是所有操作的前提</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar jenkins-cli.jar -s http://106.14.1.150:8082/ -auth ruru023:123456</span><br></pre></td></tr></table></figure>

<ul>
<li>显然这样是不太安全的</li>
<li></li>
</ul>
<h4 id="方式二：API-Token"><a href="#方式二：API-Token" class="headerlink" title="方式二：API Token"></a>方式二：API Token</h4><ul>
<li>Jenkins-&gt;用户列表-&gt;用户名-&gt;设置-&gt;API Token</li>
<li>输入名称，点击生成保存即可，但这个token一定要记录下来，你以后再也看不到了。</li>
</ul>
<p><img src="C:/Users/songqin008/AppData/Roaming/Typora/typora-user-images/1650520389931.png" alt="1650520389931"></p>
<ul>
<li><p>命令行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar jenkins-cli.jar -s http://106.14.1.150:8082/ -auth ruru023:11129918daa39bdba49852a08d64ad1f44 list-jobs</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="方式三：文件方式-推荐"><a href="#方式三：文件方式-推荐" class="headerlink" title="方式三：文件方式(推荐)"></a>方式三：文件方式(推荐)</h4><ul>
<li><p>在有了token的基础上，你可以把以下信息保存下来</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ruru023:11129918daa39bdba49852a08d64ad1f44</span><br></pre></td></tr></table></figure></li>
<li><p>存放到你命令行所在机器的D:\下，如命名为password.txt</p>
</li>
<li><p>后面执行命令就用如下方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar jenkins-cli.jar -s http://106.14.1.150:8082/ -auth @d:\password.txt   list-jobs</span><br></pre></td></tr></table></figure></li>
<li><p>你也可以放在linux服务器上，存放到服务器<strong>Jenkins安装目录/war/WEB-INF</strong>下，如命名为password.txt</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar jenkins-cli.jar -s http://106.14.1.150:8082/ -auth @password.txt   list-jobs</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="方式四：ssh方式-推荐"><a href="#方式四：ssh方式-推荐" class="headerlink" title="方式四：ssh方式(推荐)"></a>方式四：ssh方式(推荐)</h4><blockquote>
<p>未测试成功，可能跟阿里云有关系</p>
</blockquote>
<ul>
<li>系统-&gt;系统管理-&gt;全局安全配置-&gt;ssh server<ul>
<li>指定端口：7654（不要冲突即可）</li>
<li>保存</li>
</ul>
</li>
<li>参考方式二，切换到API TOKEN界面，找到SSH Public Keys<ul>
<li>输入你本机的pub key</li>
</ul>
</li>
<li>重启?</li>
<li></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh -l ruru023 -p 8085  106.14.1.150 <span class="built_in">help</span></span></span><br><span class="line">ssh: connect to host 106.14.1.150 port 8085: Connection refused</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h4 id="★写成bat来调度"><a href="#★写成bat来调度" class="headerlink" title="★写成bat来调度"></a>★写成bat来调度</h4><ul>
<li>参考上面的内容</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">cls</span><br><span class="line">:start</span><br><span class="line">set /p args=&quot;please input command args:&quot;</span><br><span class="line">java -jar jenkins-cli.jar -s http://106.14.1.150:8082/ -auth @d:\password.txt %args%</span><br><span class="line">goto start</span><br></pre></td></tr></table></figure>

<ul>
<li><p>执行效果如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">please input command args:list-jobs</span><br><span class="line">Pipeline_forcli</span><br><span class="line">pipeline_forcli2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">please input command args:version</span><br><span class="line">2.319.1</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="重启-关闭Jenkins"><a href="#重启-关闭Jenkins" class="headerlink" title="重启/关闭Jenkins"></a>重启/关闭Jenkins</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar jenkins-cli.jar -s http://106.14.1.150:8082/ -auth ruru023:123456 restart</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar jenkins-cli.jar -s http://106.14.1.150:8082/ -auth ruru023:123456 shutdown</span><br></pre></td></tr></table></figure>

<ul>
<li><p>还有安全重启</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">safe-restart   #等到所有的操作都完成然后执行重启</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="列出jobs"><a href="#列出jobs" class="headerlink" title="列出jobs"></a>列出jobs</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">java -jar jenkins-cli.jar -s http://106.14.1.150:8082/ -auth ruru023:123456 list-jobs</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出</span></span><br><span class="line">Pipeline_forcli</span><br></pre></td></tr></table></figure>



<h3 id="构建job"><a href="#构建job" class="headerlink" title="构建job"></a>构建job</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar jenkins-cli.jar -s http://106.14.1.150:8082/ -auth ruru023:123456 build Pipeline_forcli  #这是一行</span><br></pre></td></tr></table></figure>



<h3 id="删除job的build"><a href="#删除job的build" class="headerlink" title="删除job的build"></a>删除job的build</h3><ul>
<li><p>语法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar jenkins-cli.jar delete-builds JOB RANGE</span><br><span class="line">Delete build records of a specified job, possibly in a bulk.</span><br><span class="line"> JOB   : Name of the job to build</span><br><span class="line"> RANGE : Range of the build records to delete. &#x27;N-M&#x27;, &#x27;N,M&#x27;, or &#x27;N&#x27;</span><br></pre></td></tr></table></figure></li>
<li><p>示例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">java -jar jenkins-cli.jar -s http://106.14.1.150:8082/ -auth ruru023:123456 delete-builds pipeline_forcli 1</span></span><br><span class="line">Deleted 1 builds</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">java -jar jenkins-cli.jar -s http://106.14.1.150:8082/ -auth ruru023:123456 delete-builds pipeline_forcli 2-3</span></span><br><span class="line">Deleted 2 builds</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">java -jar jenkins-cli.jar -s http://106.14.1.150:8082/ -auth ruru023:123456 delete-builds pipeline_forcli 4,5</span></span><br><span class="line">Deleted 2 builds</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="禁用-启用job"><a href="#禁用-启用job" class="headerlink" title="禁用/启用job"></a>禁用/启用job</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar jenkins-cli.jar -s http://106.14.1.150:8082/ -auth ruru023:123456 disable-job pipeline_forcli</span><br><span class="line"></span><br><span class="line">java -jar jenkins-cli.jar -s http://106.14.1.150:8082/ -auth ruru023:123456 enable-job pipeline_forcli</span><br></pre></td></tr></table></figure>



<h3 id="获取job的xml描述"><a href="#获取job的xml描述" class="headerlink" title="获取job的xml描述"></a>获取job的xml描述</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar jenkins-cli.jar -s http://106.14.1.150:8082/ -auth ruru023:123456 get-job pipeline_forcli</span><br></pre></td></tr></table></figure>

<ul>
<li>导出到xml文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar jenkins-cli.jar -s http://106.14.1.150:8082/ -auth ruru023:123456 get-job pipeline_forcli  &gt;xxx.xml</span><br></pre></td></tr></table></figure>



<h3 id="复制job"><a href="#复制job" class="headerlink" title="复制job"></a>复制job</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar jenkins-cli.jar -s http://106.14.1.150:8082/ -auth ruru023:123456 copy-job pipeline_forcli pipeline_forcli2</span><br></pre></td></tr></table></figure>





<h3 id="删除job"><a href="#删除job" class="headerlink" title="删除job"></a>删除job</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar jenkins-cli.jar -s http://106.14.1.150:8082/ -auth ruru023:123456 delete-job pipeline_forcli</span><br></pre></td></tr></table></figure>



<h3 id="列出插件"><a href="#列出插件" class="headerlink" title="列出插件"></a>列出插件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar jenkins-cli.jar -s http://106.14.1.150:8082/ -auth ruru023:123456 list-plugins</span><br></pre></td></tr></table></figure>



<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar jenkins-cli.jar -s http://106.14.1.150:8082/ -auth ruru023:123456 install-plugin jira:3.7.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出信息</span></span><br><span class="line">Installing jira:3.7.1 from update center</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>其他要么比较简单，要么很少用，要么太复杂，没意思了。</li>
</ul>
<h2 id="附录：CLI命令语法"><a href="#附录：CLI命令语法" class="headerlink" title="附录：CLI命令语法"></a>附录：CLI命令语法</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Jenkins CLI</span><br><span class="line">Usage: java -jar jenkins-cli.jar [-s URL] command [opts...] args...</span><br><span class="line">Options:</span><br><span class="line"> -s URL              : the server URL (defaults to the JENKINS_URL env var)</span><br><span class="line"> -http               : use a plain CLI protocol over HTTP(S) (the default; mutually exclusive with -ssh)</span><br><span class="line"> -webSocket          : like -http but using WebSocket (works better with most reverse proxies)</span><br><span class="line"> -ssh                : use SSH protocol (requires -user; SSH port must be open on server, and user must have registered a public key)</span><br><span class="line"> -i KEY              : SSH private key file used for authentication (for use with -ssh)</span><br><span class="line"> -noCertificateCheck : bypass HTTPS certificate check entirely. Use with caution</span><br><span class="line"> -noKeyAuth          : don&#x27;t try to load the SSH authentication private key. Conflicts with -i</span><br><span class="line"> -user               : specify user (for use with -ssh)</span><br><span class="line"> -strictHostKey      : request strict host key checking (for use with -ssh)</span><br><span class="line"> -logger FINE        : enable detailed logging from the client</span><br><span class="line"> -auth [ USER:SECRET | @FILE ] : specify username and either password or API token (or load from them both from a file);</span><br><span class="line">                                 for use with -http.</span><br><span class="line">                                 Passing credentials by file is recommended.</span><br><span class="line">                                 See https://jenkins.io/redirect/cli-http-connection-mode for more info and options.</span><br><span class="line"></span><br><span class="line">The available commands depend on the server. Run the &#x27;help&#x27; command to see the list.</span><br></pre></td></tr></table></figure>





<h2 id="附录：CLI命令操作"><a href="#附录：CLI命令操作" class="headerlink" title="附录：CLI命令操作"></a>附录：CLI命令操作</h2><table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>add-job-to-view</td>
<td>Adds jobs to view.</td>
</tr>
<tr>
<td>build</td>
<td>Builds a job, and optionally waits until its completion.</td>
</tr>
<tr>
<td>cancel-quiet-down</td>
<td>Cancel the effect of the “quiet-down” command.</td>
</tr>
<tr>
<td>clear-queue</td>
<td>Clears the build queue.</td>
</tr>
<tr>
<td>connect-node</td>
<td>Reconnect to a node(s)</td>
</tr>
<tr>
<td>console</td>
<td>Retrieves console output of a build.</td>
</tr>
<tr>
<td>copy-job</td>
<td>Copies a job.</td>
</tr>
<tr>
<td>create-credentials-by-xml</td>
<td>Create Credential by XML</td>
</tr>
<tr>
<td>create-credentials-domain-by-xml</td>
<td>Create Credentials Domain by XML</td>
</tr>
<tr>
<td>create-job</td>
<td>Creates a new job by reading stdin as a configuration XML file.</td>
</tr>
<tr>
<td>create-node</td>
<td>Creates a new node by reading stdin as a XML configuration.</td>
</tr>
<tr>
<td>create-view</td>
<td>Creates a new view by reading stdin as a XML configuration.</td>
</tr>
<tr>
<td>declarative-linter</td>
<td>Validate a Jenkinsfile containing a Declarative Pipeline</td>
</tr>
<tr>
<td>delete-builds</td>
<td>Deletes build record(s).</td>
</tr>
<tr>
<td>delete-credentials</td>
<td>Delete a Credential</td>
</tr>
<tr>
<td>delete-credentials-domain</td>
<td>Delete a Credentials Domain</td>
</tr>
<tr>
<td>delete-job</td>
<td>Deletes job(s).</td>
</tr>
<tr>
<td>delete-node</td>
<td>Deletes node(s)</td>
</tr>
<tr>
<td>delete-view</td>
<td>Deletes view(s).</td>
</tr>
<tr>
<td>disable-job</td>
<td>禁用任务</td>
</tr>
<tr>
<td>disable-plugin</td>
<td>Disable one or more installed plugins.</td>
</tr>
<tr>
<td>disconnect-node</td>
<td>Disconnects from a node.</td>
</tr>
<tr>
<td>enable-job</td>
<td>启用任务</td>
</tr>
<tr>
<td>enable-plugin</td>
<td>Enables one or more installed plugins transitively.</td>
</tr>
<tr>
<td>get-credentials-as-xml</td>
<td>Get a Credentials as XML (secrets redacted)</td>
</tr>
<tr>
<td>get-credentials-domain-as-xml</td>
<td>Get a Credentials Domain as XML</td>
</tr>
<tr>
<td>get-gradle</td>
<td>List available gradle installations</td>
</tr>
<tr>
<td>get-job</td>
<td>Dumps the job definition XML to stdout.</td>
</tr>
<tr>
<td>get-node</td>
<td>Dumps the node definition XML to stdout.</td>
</tr>
<tr>
<td>get-view</td>
<td>Dumps the view definition XML to stdout.</td>
</tr>
<tr>
<td>groovy</td>
<td>Executes the specified Groovy script.</td>
</tr>
<tr>
<td>groovysh</td>
<td>Runs an interactive groovy shell.</td>
</tr>
<tr>
<td>help</td>
<td>Lists all the available commands or a detailed description of single command.</td>
</tr>
<tr>
<td>import-credentials-as-xml</td>
<td>Import credentials as XML. The output of “list-credentials-as-xml” can be used as input here as is, the only needed change is to set the actual Secrets which are redacted in the output.</td>
</tr>
<tr>
<td>install-plugin</td>
<td>Installs a plugin either from a file, an URL, or from update center.</td>
</tr>
<tr>
<td>keep-build</td>
<td>永久保留这次构建。</td>
</tr>
<tr>
<td>list-changes</td>
<td>Dumps the changelog for the specified build(s).</td>
</tr>
<tr>
<td>list-credentials</td>
<td>Lists the Credentials in a specific Store</td>
</tr>
<tr>
<td>list-credentials-as-xml</td>
<td>Export credentials as XML. The output of this command can be used as input for “import-credentials-as-xml” as is, the only needed change is to set the actual Secrets which are redacted in the output.</td>
</tr>
<tr>
<td>list-credentials-context-resolvers</td>
<td>List Credentials Context Resolvers</td>
</tr>
<tr>
<td>list-credentials-providers</td>
<td>List Credentials Providers</td>
</tr>
<tr>
<td>list-jobs</td>
<td>Lists all jobs in a specific view or item group.</td>
</tr>
<tr>
<td>list-plugins</td>
<td>Outputs a list of installed plugins.</td>
</tr>
<tr>
<td>mail</td>
<td>Reads stdin and sends that out as an e-mail.</td>
</tr>
<tr>
<td>offline-node</td>
<td>Stop using a node for performing builds temporarily, until the next “online-node” command.</td>
</tr>
<tr>
<td>online-node</td>
<td>Resume using a node for performing builds, to cancel out the earlier “offline-node” command.</td>
</tr>
<tr>
<td>quiet-down</td>
<td>Quiet down Jenkins, in preparation for a restart. Don’t start any builds.</td>
</tr>
<tr>
<td>reload-configuration</td>
<td>Discard all the loaded data in memory and reload everything from file system. Useful when you modified config files directly on disk.</td>
</tr>
<tr>
<td>reload-job</td>
<td>Reload job(s)</td>
</tr>
<tr>
<td>remove-job-from-view</td>
<td>Removes jobs from view.</td>
</tr>
<tr>
<td>replay-pipeline</td>
<td>从标准输入中获取的脚本并回放流水线执行</td>
</tr>
<tr>
<td>restart</td>
<td>重新启动Jenkins</td>
</tr>
<tr>
<td>restart-from-stage</td>
<td>Restart a completed Declarative Pipeline build from a given stage.</td>
</tr>
<tr>
<td>safe-restart</td>
<td>安全地重新启动Jenkins</td>
</tr>
<tr>
<td>safe-shutdown</td>
<td>Puts Jenkins into the quiet mode, wait for existing builds to be completed, and then shut down Jenkins.</td>
</tr>
<tr>
<td>session-id</td>
<td>Outputs the session ID, which changes every time Jenkins restarts.</td>
</tr>
<tr>
<td>set-build-description</td>
<td>Sets the description of a build.</td>
</tr>
<tr>
<td>set-build-display-name</td>
<td>Sets the displayName of a build.</td>
</tr>
<tr>
<td>shutdown</td>
<td>立刻关闭Jenkins</td>
</tr>
<tr>
<td>stop-builds</td>
<td>Stop all running builds for job(s)</td>
</tr>
<tr>
<td>update-credentials-by-xml</td>
<td>Update Credentials by XML</td>
</tr>
<tr>
<td>update-credentials-domain-by-xml</td>
<td>Update Credentials Domain by XML</td>
</tr>
<tr>
<td>update-job</td>
<td>Updates the job definition XML from stdin. The opposite of the get-job command.</td>
</tr>
<tr>
<td>update-node</td>
<td>Updates the node definition XML from stdin. The opposite of the get-node command.</td>
</tr>
<tr>
<td>update-view</td>
<td>Updates the view definition XML from stdin. The opposite of the get-view command.</td>
</tr>
<tr>
<td>version</td>
<td>Outputs the current version.</td>
</tr>
<tr>
<td>wait-node-offline</td>
<td>Wait for a node to become offline.</td>
</tr>
<tr>
<td>wait-node-online</td>
<td>Wait for a node to become online.</td>
</tr>
<tr>
<td>who-am-i</td>
<td>Reports your credential and permissions.</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>完结</tag>
        <tag>jenkins</tag>
        <tag>devops</tag>
      </tags>
  </entry>
  <entry>
    <title>Git入门指南(三)</title>
    <url>/2022/04/10/TODO-Git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97-%E4%B8%89/</url>
    <content><![CDATA[<h1 id="Git入门指南-三"><a href="#Git入门指南-三" class="headerlink" title="Git入门指南(三)"></a>Git入门指南(三)</h1><blockquote>
<p>引用了 微信公众号 入门小站的内容</p>
<p>参考了pro git</p>
</blockquote>
<h2 id="实用案例"><a href="#实用案例" class="headerlink" title="实用案例"></a>实用案例</h2><h3 id="我刚才提交了什么"><a href="#我刚才提交了什么" class="headerlink" title="我刚才提交了什么?"></a>我刚才提交了什么?</h3><blockquote>
<p>如果你用 <code>git commit -a</code> 提交了一次变化(changes)，而你又不确定到底这次提交了哪些内容。你就可以用下面的命令显示当前<code>HEAD</code>上的最近一次的提交(commit):</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git show</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log -n1 -p</span><br></pre></td></tr></table></figure>

<h3 id="我的提交信息-commit-message-写错了"><a href="#我的提交信息-commit-message-写错了" class="headerlink" title="我的提交信息(commit message)写错了"></a>我的提交信息(commit message)写错了</h3><blockquote>
<p>如果你的提交信息(commit message)写错了且这次提交(commit)还没有推(push), 你可以通过下面的方法来修改提交信息(commit message):</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git commit --amend --only</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这会打开你的默认编辑器, 在这里你可以编辑信息. 另一方面, 你也可以用一条命令一次完成:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git commit --amend --only -m &#x27;xxxxxxx&#x27;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果你已经推(push)了这次提交(commit), 你可以修改这次提交(commit)然后强推(force push), 但是不推荐这么做。</p>
</blockquote>
<h3 id="我提交-commit-里的用户名和邮箱不对"><a href="#我提交-commit-里的用户名和邮箱不对" class="headerlink" title="我提交(commit)里的用户名和邮箱不对"></a>我提交(commit)里的用户名和邮箱不对</h3><blockquote>
<p>如果这只是单个提交(commit)，修改它：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git commit --amend --author &quot;New Authorname &lt;authoremail@mydomain.com&gt;&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果你需要修改所有历史, 参考 ‘git filter-branch’的指南页.</p>
</blockquote>
<h3 id="我想从一个提交-commit-里移除一个文件"><a href="#我想从一个提交-commit-里移除一个文件" class="headerlink" title="我想从一个提交(commit)里移除一个文件"></a>我想从一个提交(commit)里移除一个文件</h3><p>通过下面的方法，从一个提交(commit)里移除一个文件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout HEAD^ myfile</span><br><span class="line">$ git add -A</span><br><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这将非常有用，当你有一个开放的补丁(open patch)，你往上面提交了一个不必要的文件，你需要强推(force push)去更新这个远程补丁。</p>
</blockquote>
<h3 id="我想删除我的的最后一次提交-commit"><a href="#我想删除我的的最后一次提交-commit" class="headerlink" title="我想删除我的的最后一次提交(commit)"></a>我想删除我的的最后一次提交(commit)</h3><blockquote>
<p>如果你需要删除推了的提交(pushed commits)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled)了的人的历史。简而言之，如果你不是很确定，千万不要这么做。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset HEAD^ --hard</span><br><span class="line">$ git push -f [remote] [branch]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果你还没有推到远程, 把Git重置(reset)到你最后一次提交前的状态就可以了(同时保存暂存的变化):</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(my-branch*)$ git reset --soft HEAD@&#123;1&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 <code>git revert SHAofBadCommit</code>， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)；或者, 如果你推的这个分支是rebase-safe的 (例如：其它开发者不会从这个分支拉), 只需要使用 <code>git push -f</code>。</p>
</blockquote>
<h3 id="删除任意提交-commit"><a href="#删除任意提交-commit" class="headerlink" title="删除任意提交(commit)"></a>删除任意提交(commit)</h3><p>同样的警告：不到万不得已的时候不要这么做.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git rebase --onto SHA1_OF_BAD_COMMIT^ SHA1_OF_BAD_COMMIT</span><br><span class="line">$ git push -f [remote] [branch]</span><br></pre></td></tr></table></figure>

<p>或者做一个 交互式rebase 删除那些你想要删除的提交(commit)里所对应的行。</p>
<h3 id="我尝试推一个修正后的提交-amended-commit-到远程，但是报错："><a href="#我尝试推一个修正后的提交-amended-commit-到远程，但是报错：" class="headerlink" title="我尝试推一个修正后的提交(amended commit)到远程，但是报错："></a>我尝试推一个修正后的提交(amended commit)到远程，但是报错：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">To https://github.com/yourusername/repo.git</span><br><span class="line">! [rejected]        mybranch -&gt; mybranch (non-fast-forward)</span><br><span class="line">error: failed to push some refs to &#x27;https://github.com/tanay1337/webmaker.org.git&#x27;</span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: &#x27;git pull ...&#x27;) before pushing again.</span><br><span class="line">hint: See the &#x27;Note about fast-forwards&#x27; in &#x27;git push --help&#x27; for details.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意, rebasing(见下面)和修正(amending)会用一个<strong>新的提交(commit)代替旧的</strong>, 所以如果之前你已经往远程仓库上推过一次修正前的提交(commit)，那你现在就必须强推(force push) (<code>-f</code>)。注意 – <em>总是</em> 确保你指明一个分支!</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(my-branch)$ git push origin mybranch -f</span><br></pre></td></tr></table></figure>

<p>一般来说, <strong>要避免强推</strong>. 最好是创建和推(push)一个新的提交(commit)，而不是强推一个修正后的提交。后者会使那些与该分支或该分支的子分支工作的开发者，在源历史中产生冲突。</p>
<h3 id="我意外的做了一次硬重置-hard-reset-，我想找回我的内容"><a href="#我意外的做了一次硬重置-hard-reset-，我想找回我的内容" class="headerlink" title="我意外的做了一次硬重置(hard reset)，我想找回我的内容"></a>我意外的做了一次硬重置(hard reset)，我想找回我的内容</h3><blockquote>
<p>如果你意外的做了 <code>git reset --hard</code>, 你通常能找回你的提交(commit), 因为Git对每件事都会有日志，且都会保存几天。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git reflog</span><br></pre></td></tr></table></figure>

<blockquote>
<p>你将会看到一个你过去提交(commit)的列表, 和一个重置的提交。选择你想要回到的提交(commit)的SHA，再重置一次:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git reset --hard SHA1234</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这样就完成了。</p>
</blockquote>
<hr>
<blockquote>
<p>暂存(Staging)</p>
</blockquote>
<h3 id="我需要把暂存的内容添加到上一次的提交-commit"><a href="#我需要把暂存的内容添加到上一次的提交-commit" class="headerlink" title="我需要把暂存的内容添加到上一次的提交(commit)"></a>我需要把暂存的内容添加到上一次的提交(commit)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(my-branch*)$ git commit --amend</span><br></pre></td></tr></table></figure>

<h3 id="我想要暂存一个新文件的一部分，而不是这个文件的全部"><a href="#我想要暂存一个新文件的一部分，而不是这个文件的全部" class="headerlink" title="我想要暂存一个新文件的一部分，而不是这个文件的全部"></a>我想要暂存一个新文件的一部分，而不是这个文件的全部</h3><p>一般来说, 如果你想暂存一个文件的一部分, 你可这样做:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git add --patch filename.x</span><br></pre></td></tr></table></figure>

<p><code>-p</code> 简写。这会打开交互模式， 你将能够用 <code>s</code> 选项来分隔提交(commit)；然而, 如果这个文件是新的, 会没有这个选择， 添加一个新文件时, 这样做:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git add -N filename.x</span><br></pre></td></tr></table></figure>

<p>然后, 你需要用 <code>e</code> 选项来手动选择需要添加的行，执行 <code>git diff --cached</code> 将会显示哪些行暂存了哪些行只是保存在本地了。</p>
<h3 id="我想把在一个文件里的变化-changes-加到两个提交-commit-里"><a href="#我想把在一个文件里的变化-changes-加到两个提交-commit-里" class="headerlink" title="我想把在一个文件里的变化(changes)加到两个提交(commit)里"></a>我想把在一个文件里的变化(changes)加到两个提交(commit)里</h3><p><code>git add</code> 会把整个文件加入到一个提交. <code>git add -p</code> 允许交互式的选择你想要提交的部分.</p>
<h3 id="我想把暂存的内容变成未暂存，把未暂存的内容暂存起来"><a href="#我想把暂存的内容变成未暂存，把未暂存的内容暂存起来" class="headerlink" title="我想把暂存的内容变成未暂存，把未暂存的内容暂存起来"></a>我想把暂存的内容变成未暂存，把未暂存的内容暂存起来</h3><p>多数情况下，你应该将所有的内容变为未暂存，然后再选择你想要的内容进行commit。但假定你就是想要这么做，这里你可以创建一个临时的commit来保存你已暂存的内容，然后暂存你的未暂存的内容并进行stash。然后reset最后一个commit将原本暂存的内容变为未暂存，最后stash pop回来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;WIP&quot;</span><br><span class="line">$ git add .</span><br><span class="line">$ git stash</span><br><span class="line">$ git reset HEAD^</span><br><span class="line">$ git stash pop --index 0</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意1: 这里使用<code>pop</code>仅仅是因为想尽可能保持幂等。注意2: 假如你不加上<code>--index</code>你会把暂存的文件标记为为存储。</p>
</blockquote>
<hr>
<blockquote>
<p>未暂存(Unstaged)的内容</p>
</blockquote>
<h3 id="我想把未暂存的内容移动到一个新分支"><a href="#我想把未暂存的内容移动到一个新分支" class="headerlink" title="我想把未暂存的内容移动到一个新分支"></a>我想把未暂存的内容移动到一个新分支</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout -b my-branch</span><br></pre></td></tr></table></figure>

<h3 id="我想把未暂存的内容移动到另一个已存在的分支"><a href="#我想把未暂存的内容移动到另一个已存在的分支" class="headerlink" title="我想把未暂存的内容移动到另一个已存在的分支"></a>我想把未暂存的内容移动到另一个已存在的分支</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">$ git checkout my-branch</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>

<h3 id="我想丢弃本地未提交的变化-uncommitted-changes"><a href="#我想丢弃本地未提交的变化-uncommitted-changes" class="headerlink" title="我想丢弃本地未提交的变化(uncommitted changes)"></a>我想丢弃本地未提交的变化(uncommitted changes)</h3><blockquote>
<p>如果你只是想重置源(origin)和你本地(local)之间的一些提交(commit)，你可以：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># one commit</span><br><span class="line">(my-branch)$ git reset --hard HEAD^</span><br><span class="line"># two commits</span><br><span class="line">(my-branch)$ git reset --hard HEAD^^</span><br><span class="line"># four commits</span><br><span class="line">(my-branch)$ git reset --hard HEAD~4</span><br><span class="line"># or</span><br><span class="line">(main)$ git checkout -f</span><br></pre></td></tr></table></figure>

<p>重置某个特殊的文件, 你可以用文件名做为参数:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset filename</span><br></pre></td></tr></table></figure>

<h3 id="我想丢弃某些未暂存的内容"><a href="#我想丢弃某些未暂存的内容" class="headerlink" title="我想丢弃某些未暂存的内容"></a>我想丢弃某些未暂存的内容</h3><blockquote>
<p>如果你想丢弃工作拷贝中的一部分内容，而不是全部。</p>
</blockquote>
<p>签出(checkout)不需要的内容，保留需要的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout -p</span><br><span class="line"># Answer y to all of the snippets you want to drop</span><br></pre></td></tr></table></figure>

<p>另外一个方法是使用 <code>stash</code>， Stash所有要保留下的内容, 重置工作拷贝, 重新应用保留的部分。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash -p</span><br><span class="line"># Select all of the snippets you want to save</span><br><span class="line">$ git reset --hard</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>

<p>或者, stash 你不需要的部分, 然后stash drop。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash -p</span><br><span class="line"># Select all of the snippets you don&#x27;t want to save</span><br><span class="line">$ git stash drop</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<h2 id="分支-Branches"><a href="#分支-Branches" class="headerlink" title="分支(Branches)"></a>分支(Branches)</h2></blockquote>
<h3 id="我从错误的分支拉取了内容，或把内容拉取到了错误的分支"><a href="#我从错误的分支拉取了内容，或把内容拉取到了错误的分支" class="headerlink" title="我从错误的分支拉取了内容，或把内容拉取到了错误的分支"></a>我从错误的分支拉取了内容，或把内容拉取到了错误的分支</h3><blockquote>
<p>这是另外一种使用 <code>git reflog</code> 情况，找到在这次错误拉(pull) 之前HEAD的指向。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git reflog</span><br><span class="line">ab7555f HEAD@&#123;0&#125;: pull origin wrong-branch: Fast-forward</span><br><span class="line">c5bc55a HEAD@&#123;1&#125;: checkout: checkout message goes here</span><br></pre></td></tr></table></figure>

<p>重置分支到你所需的提交(desired commit):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset --hard c5bc55a</span><br></pre></td></tr></table></figure>

<p>完成。</p>
<h3 id="我想扔掉本地的提交-commit-，以便我的分支与远程的保持一致"><a href="#我想扔掉本地的提交-commit-，以便我的分支与远程的保持一致" class="headerlink" title="我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致"></a>我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致</h3><p>先确认你没有推(push)你的内容到远程。</p>
<p><code>git status</code> 会显示你领先(ahead)源(origin)多少个提交:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(my-branch)$ git status</span><br><span class="line"># On branch my-branch</span><br><span class="line"># Your branch is ahead of &#x27;origin/my-branch&#x27; by 2 commits.</span><br><span class="line">#   (use &quot;git push&quot; to publish your local commits)</span><br><span class="line">#</span><br></pre></td></tr></table></figure>

<p>一种方法是:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git reset --hard origin/my-branch</span><br></pre></td></tr></table></figure>

<h3 id="我需要提交到一个新分支，但错误的提交到了main"><a href="#我需要提交到一个新分支，但错误的提交到了main" class="headerlink" title="我需要提交到一个新分支，但错误的提交到了main"></a>我需要提交到一个新分支，但错误的提交到了main</h3><p>在main下创建一个新分支，不切换到新分支,仍在main下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git branch my-branch</span><br></pre></td></tr></table></figure>

<p>把main分支重置到前一个提交:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure>

<p><code>HEAD^</code> 是 <code>HEAD^1</code> 的简写，你可以通过指定要设置的<code>HEAD</code>来进一步重置。</p>
<blockquote>
<p>或者, 如果你不想使用 <code>HEAD^</code>, 找到你想重置到的提交(commit)的hash(<code>git log</code> 能够完成)， 然后重置到这个hash。使用<code>git push</code> 同步内容到远程。</p>
</blockquote>
<p>例如, main分支想重置到的提交的hash为<code>a13b85e</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git reset --hard a13b85eHEAD is now at a13b85e</span><br></pre></td></tr></table></figure>

<p>签出(checkout)刚才新建的分支继续工作:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git checkout my-branch</span><br></pre></td></tr></table></figure>

<h3 id="我想保留来自另外一个ref-ish的整个文件"><a href="#我想保留来自另外一个ref-ish的整个文件" class="headerlink" title="我想保留来自另外一个ref-ish的整个文件"></a>我想保留来自另外一个ref-ish的整个文件</h3><blockquote>
<p>假设你正在做一个原型方案(原文为working spike (see note)), 有成百的内容，每个都工作得很好。现在, 你提交到了一个分支，保存工作内容:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(solution)$ git add -A &amp;&amp; git commit -m &quot;Adding all changes from this spike into one big commit.&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>当你想要把它放到一个分支里 (可能是<code>feature</code>, 或者 <code>develop</code>), 你关心是保持整个文件的完整，你想要一个大的提交分隔成比较小。</p>
</blockquote>
<p>假设你有:</p>
<ul>
<li>分支 <code>solution</code>, 拥有原型方案， 领先 <code>develop</code> 分支。</li>
<li>分支 <code>develop</code>, 在这里你应用原型方案的一些内容。</li>
</ul>
<p>我去可以通过把内容拿到你的分支里，来解决这个问题:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(develop)$ git checkout solution -- file1.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这会把这个文件内容从分支 <code>solution</code> 拿到分支 <code>develop</code> 里来:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># On branch develop</span><br><span class="line"># Your branch is up-to-date with &#x27;origin/develop&#x27;.</span><br><span class="line"># Changes to be committed:</span><br><span class="line">#  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line">##        modified:   file1.txt</span><br></pre></td></tr></table></figure>

<p>然后, 正常提交。</p>
<p>Note: Spike solutions are made to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem.</p>
<h3 id="我把几个提交-commit-提交到了同一个分支，而这些提交应该分布在不同的分支里"><a href="#我把几个提交-commit-提交到了同一个分支，而这些提交应该分布在不同的分支里" class="headerlink" title="我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里"></a>我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里</h3><p>假设你有一个<code>main</code>分支， 执行<code>git log</code>, 你看到你做过两次提交:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git log</span><br><span class="line"></span><br><span class="line">commit e3851e817c451cc36f2e6f3049db528415e3c114</span><br><span class="line">Author: Alex Lee &lt;alexlee@example.com&gt;</span><br><span class="line">Date:   Tue Jul 22 15:39:27 2014 -0400</span><br><span class="line"></span><br><span class="line">    Bug #21 - Added CSRF protection</span><br><span class="line"></span><br><span class="line">commit 5ea51731d150f7ddc4a365437931cd8be3bf3131</span><br><span class="line">Author: Alex Lee &lt;alexlee@example.com&gt;</span><br><span class="line">Date:   Tue Jul 22 15:39:12 2014 -0400</span><br><span class="line"></span><br><span class="line">    Bug #14 - Fixed spacing on title</span><br><span class="line"></span><br><span class="line">commit a13b85e984171c6e2a1729bb061994525f626d14</span><br><span class="line">Author: Aki Rose &lt;akirose@example.com&gt;</span><br><span class="line">Date:   Tue Jul 21 01:12:48 2014 -0400</span><br><span class="line"></span><br><span class="line">    First commit</span><br></pre></td></tr></table></figure>

<blockquote>
<p>让我们用提交hash(commit hash)标记bug (<code>e3851e8</code> for #21, <code>5ea5173</code> for #14).</p>
</blockquote>
<p>首先, 我们把<code>main</code>分支重置到正确的提交(<code>a13b85e</code>):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git reset --hard a13b85e</span><br><span class="line">HEAD is now at a13b85e</span><br></pre></td></tr></table></figure>

<p>现在, 我们对 bug #21 创建一个新的分支:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git checkout -b 21(21)$</span><br></pre></td></tr></table></figure>

<p>接着, 我们用 <em>cherry-pick</em> 把对bug #21的提交放入当前分支。这意味着我们将应用(apply)这个提交(commit)，仅仅这一个提交(commit)，直接在HEAD上面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(21)$ git cherry-pick e3851e8</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这时候, 这里可能会产生冲突， 参见交互式 rebasing 章 <strong>冲突节</strong> 解决冲突.</p>
</blockquote>
<p>再者， 我们为bug #14 创建一个新的分支, 也基于<code>main</code>分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(21)$ git checkout main</span><br><span class="line">(main)$ git checkout -b 14</span><br><span class="line">(14)$</span><br></pre></td></tr></table></figure>

<p>最后, 为 bug #14 执行 <code>cherry-pick</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(14)$ git cherry-pick 5ea5173</span><br></pre></td></tr></table></figure>

<h3 id="我想删除上游-upstream-分支被删除了的本地分支"><a href="#我想删除上游-upstream-分支被删除了的本地分支" class="headerlink" title="我想删除上游(upstream)分支被删除了的本地分支"></a>我想删除上游(upstream)分支被删除了的本地分支</h3><blockquote>
<p>一旦你在github 上面合并(merge)了一个pull request, 你就可以删除你fork里被合并的分支。如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中（<a href="http://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&mid=2247496560&idx=1&sn=2e9d4b74085b1ebd73b6c4145d0f28de&chksm=e9c0a110deb72806c10a2165a0979749e675b2bee4219e11f76da46b5be96fd32d8068ad2b23&scene=21#wechat_redirect">IDEA 中玩转 Git</a>）。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git fetch -p</span><br></pre></td></tr></table></figure>

<h3 id="我不小心删除了我的分支"><a href="#我不小心删除了我的分支" class="headerlink" title="我不小心删除了我的分支"></a>我不小心删除了我的分支</h3><blockquote>
<p>如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。让我们先创建一个分支和一个新的文件:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git checkout -b my-branch</span><br><span class="line">(my-branch)$ git branch</span><br><span class="line">(my-branch)$ touch foo.txt</span><br><span class="line">(my-branch)$ ls</span><br><span class="line">README.md foo.txt</span><br></pre></td></tr></table></figure>

<p>添加文件并做一次提交</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(my-branch)$ git add .</span><br><span class="line">(my-branch)$ git commit -m &#x27;foo.txt added&#x27;</span><br><span class="line">(my-branch)$ foo.txt added</span><br><span class="line"> 1 files changed, 1 insertions(+)</span><br><span class="line"> create mode 100644 foo.txt</span><br><span class="line">(my-branch)$ git log</span><br><span class="line"></span><br><span class="line">commit 4e3cd85a670ced7cc17a2b5d8d3d809ac88d5012</span><br><span class="line">Author: siemiatj &lt;siemiatj@example.com&gt;</span><br><span class="line">Date:   Wed Jul 30 00:34:10 2014 +0200</span><br><span class="line"></span><br><span class="line">    foo.txt added</span><br><span class="line"></span><br><span class="line">commit 69204cdf0acbab201619d95ad8295928e7f411d5</span><br><span class="line">Author: Kate Hudson &lt;katehudson@example.com&gt;</span><br><span class="line">Date:   Tue Jul 29 13:14:46 2014 -0400</span><br><span class="line"></span><br><span class="line">    Fixes #6: Force pushing after amending commits</span><br></pre></td></tr></table></figure>

<p>现在我们切回到主(main)分支，‘不小心的’删除<code>my-branch</code>分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(my-branch)$ git checkout main</span><br><span class="line">Switched to branch &#x27;main&#x27;</span><br><span class="line">Your branch is up-to-date with &#x27;origin/main&#x27;.</span><br><span class="line">(main)$ git branch -D my-branch</span><br><span class="line">Deleted branch my-branch (was 4e3cd85).</span><br><span class="line">(main)$ echo oh noes, deleted my branch!</span><br><span class="line">oh noes, deleted my branch!</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在这时候你应该想起了<code>reflog</code>, 一个升级版的日志，它存储了仓库(repo)里面所有动作的历史。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git reflog</span><br><span class="line">69204cd HEAD@&#123;0&#125;: checkout: moving from my-branch to main</span><br><span class="line">4e3cd85 HEAD@&#123;1&#125;: commit: foo.txt added</span><br><span class="line">69204cd HEAD@&#123;2&#125;: checkout: moving from main to my-branch</span><br></pre></td></tr></table></figure>

<blockquote>
<p>正如你所见，我们有一个来自删除分支的提交hash(commit hash)，接下来看看是否能恢复删除了的分支。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git checkout -b my-branch-help</span><br><span class="line">Switched to a new branch &#x27;my-branch-help&#x27;</span><br><span class="line">(my-branch-help)$ git reset --hard 4e3cd85</span><br><span class="line">HEAD is now at 4e3cd85 foo.txt added</span><br><span class="line">(my-branch-help)$ ls</span><br><span class="line">README.md foo.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>看! 我们把删除的文件找回来了。Git的 <code>reflog</code> 在rebasing出错的时候也是同样有用的。</p>
</blockquote>
<h3 id="我想删除一个分支"><a href="#我想删除一个分支" class="headerlink" title="我想删除一个分支"></a>我想删除一个分支</h3><p>删除一个远程分支:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git push origin --delete my-branch</span><br></pre></td></tr></table></figure>

<blockquote>
<p>你也可以:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git push origin :my-branch</span><br></pre></td></tr></table></figure>

<p>删除一个本地分支:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git branch -D my-branch</span><br></pre></td></tr></table></figure>

<h3 id="我想从别人正在工作的远程分支签出-checkout-一个分支"><a href="#我想从别人正在工作的远程分支签出-checkout-一个分支" class="headerlink" title="我想从别人正在工作的远程分支签出(checkout)一个分支"></a>我想从别人正在工作的远程分支签出(checkout)一个分支</h3><p>首先, 从远程拉取(fetch) 所有分支:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git fetch --all</span><br></pre></td></tr></table></figure>

<p>假设你想要从远程的<code>daves</code>分支签出到本地的<code>daves</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git checkout --track origin/daves</span><br><span class="line">Branch daves set up to track remote branch daves from origin.</span><br><span class="line">Switched to a new branch &#x27;daves&#x27;</span><br></pre></td></tr></table></figure>

<p>(<code>--track</code> 是 <code>git checkout -b [branch] [remotename]/[branch]</code> 的简写)</p>
<blockquote>
<p>这样就得到了一个<code>daves</code>分支的本地拷贝, 任何推过(pushed)的更新，远程都能看到.</p>
</blockquote>
<hr>
<blockquote>
<h2 id="Rebasing-和合并-Merging"><a href="#Rebasing-和合并-Merging" class="headerlink" title="Rebasing 和合并(Merging)"></a>Rebasing 和合并(Merging)</h2></blockquote>
<h3 id="我想撤销rebase-merge"><a href="#我想撤销rebase-merge" class="headerlink" title="我想撤销rebase/merge"></a>我想撤销rebase/merge</h3><blockquote>
<p>你可以合并(merge)或rebase了一个错误的分支, 或者完成不了一个进行中的rebase/merge。Git 在进行危险操作的时候会把原始的HEAD保存在一个叫ORIG_HEAD的变量里, 所以要把分支恢复到rebase/merge前的状态是很容易的。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(my-branch)$ git reset --hard ORIG_HEAD</span><br></pre></td></tr></table></figure>

<h3 id="我已经rebase过-但是我不想强推-force-push"><a href="#我已经rebase过-但是我不想强推-force-push" class="headerlink" title="我已经rebase过, 但是我不想强推(force push)"></a>我已经rebase过, 但是我不想强推(force push)</h3><blockquote>
<p>不幸的是，如果你想把这些变化(changes)反应到远程分支上，你就必须得强推(force push)。是因你快进(Fast forward)了提交，改变了Git历史, 远程分支不会接受变化(changes)，除非强推(force push)。这就是许多人使用 merge 工作流, 而不是 rebasing 工作流的主要原因之一， 开发者的强推(force push)会使大的团队陷入麻烦。使用时需要注意，一种安全使用 rebase 的方法是，不要把你的变化(changes)反映到远程分支上, 而是按下面的做:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git checkout my-branch</span><br><span class="line">(my-branch)$ git rebase -i main</span><br><span class="line">(my-branch)$ git checkout main</span><br><span class="line">(main)$ git merge --ff-only my-branch</span><br></pre></td></tr></table></figure>

<h3 id="我需要组合-combine-几个提交-commit"><a href="#我需要组合-combine-几个提交-commit" class="headerlink" title="我需要组合(combine)几个提交(commit)"></a>我需要组合(combine)几个提交(commit)</h3><blockquote>
<p>假设你的工作分支将会做对于 <code>main</code> 的pull-request。一般情况下你不关心提交(commit)的时间戳，只想组合 <strong>所有</strong> 提交(commit) 到一个单独的里面, 然后重置(reset)重提交(recommit)。确保主(main)分支是最新的和你的变化都已经提交了, 然后:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(my-branch)$ git reset --soft main</span><br><span class="line">(my-branch)$ git commit -am &quot;New awesome feature&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果你想要更多的控制, 想要保留时间戳, 你需要做交互式rebase (interactive rebase):</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(my-branch)$ git rebase -i main</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果没有相对的其它分支， 你将不得不相对自己的<code>HEAD</code> 进行 rebase。例如：你想组合最近的两次提交(commit), 你将相对于<code>HEAD~2</code> 进行rebase， 组合最近3次提交(commit), 相对于<code>HEAD~3</code>, 等等。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git rebase -i HEAD~2</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在你执行了交互式 rebase的命令(interactive rebase command)后, 你将在你的编辑器里看到类似下面的内容:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pick a9c8a1d Some refactoring</span><br><span class="line">pick 01b2fd8 New awesome feature</span><br><span class="line">pick b729ad5 fixup</span><br><span class="line">pick e3851e8 another fix</span><br><span class="line"></span><br><span class="line"># Rebase 8074d12..b729ad5 onto 8074d12</span><br><span class="line">#</span><br><span class="line"># Commands:</span><br><span class="line">#  p, pick = use commit</span><br><span class="line">#  r, reword = use commit, but edit the commit message</span><br><span class="line">#  e, edit = use commit, but stop for amending</span><br><span class="line">#  s, squash = use commit, but meld into previous commit</span><br><span class="line">#  f, fixup = like &quot;squash&quot;, but discard this commit&#x27;s log message</span><br><span class="line">#  x, exec = run command (the rest of the line) using shell</span><br><span class="line">#</span><br><span class="line"># These lines can be re-ordered; they are executed from top to bottom.</span><br><span class="line">#</span><br><span class="line"># If you remove a line here THAT COMMIT WILL BE LOST.</span><br><span class="line">#</span><br><span class="line"># However, if you remove everything, the rebase will be aborted.</span><br><span class="line">#</span><br><span class="line"># Note that empty commits are commented out</span><br></pre></td></tr></table></figure>

<p>所有以 <code>#</code> 开头的行都是注释, 不会影响 rebase.</p>
<blockquote>
<p>然后，你可以用任何上面命令列表的命令替换 <code>pick</code>, 你也可以通过删除对应的行来删除一个提交(commit)。</p>
</blockquote>
<blockquote>
<p>例如, 如果你想 <strong>单独保留最旧(first)的提交(commit),组合所有剩下的到第二个里面</strong>, 你就应该编辑第二个提交(commit)后面的每个提交(commit) 前的单词为 <code>f</code>:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pick a9c8a1d Some refactoring</span><br><span class="line">pick 01b2fd8 New awesome feature</span><br><span class="line">f b729ad5 fixup</span><br><span class="line">f e3851e8 another fix</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果你想组合这些提交(commit) <strong>并重命名这个提交(commit)</strong>, 你应该在第二个提交(commit)旁边添加一个<code>r</code>，或者更简单的用<code>s</code> 替代 <code>f</code>:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pick a9c8a1d Some refactoring</span><br><span class="line">pick 01b2fd8 New awesome feature</span><br><span class="line">s b729ad5 fixup</span><br><span class="line">s e3851e8 another fix</span><br></pre></td></tr></table></figure>

<blockquote>
<p>你可以在接下来弹出的文本提示框里重命名提交(commit)。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Newer, awesomer features</span><br><span class="line"></span><br><span class="line"># Please enter the commit message for your changes. Lines starting</span><br><span class="line"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span><br><span class="line"># rebase in progress; onto 8074d12</span><br><span class="line"># You are currently editing a commit while rebasing branch &#x27;main&#x27; on &#x27;8074d12&#x27;.</span><br><span class="line">#</span><br><span class="line"># Changes to be committed:</span><br><span class="line"># modified:   README.md</span><br><span class="line">#</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果成功了, 你应该看到类似下面的内容:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ Successfully rebased and updated refs/heads/main.</span><br></pre></td></tr></table></figure>

<h4 id="安全合并-merging-策略"><a href="#安全合并-merging-策略" class="headerlink" title="安全合并(merging)策略"></a>安全合并(merging)策略</h4><blockquote>
<p><code>--no-commit</code> 执行合并(merge)但不自动提交, 给用户在做提交前检查和修改的机会。<code>no-ff</code> 会为特性分支(feature branch)的存在过留下证据, 保持项目历史一致（更多Git资料，参见<a href="http://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&mid=2247496619&idx=1&sn=712295e82ce4167afa490502dc6aa279&chksm=e9c0a1cbdeb728dd12f134689e60ae287c144fbad4bc6f3c2ba1df7ca950a57aebe4dd87f4fe&scene=21#wechat_redirect">IDEA 中如何完成 Git 版本回退？</a>）。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git merge --no-ff --no-commit my-branch</span><br></pre></td></tr></table></figure>

<h4 id="我需要将一个分支合并成一个提交-commit"><a href="#我需要将一个分支合并成一个提交-commit" class="headerlink" title="我需要将一个分支合并成一个提交(commit)"></a>我需要将一个分支合并成一个提交(commit)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git merge --squash my-branch</span><br></pre></td></tr></table></figure>

<h4 id="我只想组合-combine-未推的提交-unpushed-commit"><a href="#我只想组合-combine-未推的提交-unpushed-commit" class="headerlink" title="我只想组合(combine)未推的提交(unpushed commit)"></a>我只想组合(combine)未推的提交(unpushed commit)</h4><blockquote>
<p>有时候，在将数据推向上游之前，你有几个正在进行的工作提交(commit)。这时候不希望把已经推(push)过的组合进来，因为其他人可能已经有提交(commit)引用它们了。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git rebase -i @&#123;u&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这会产生一次交互式的rebase(interactive rebase), 只会列出没有推(push)的提交(commit)， 在这个列表时进行reorder/fix/squash 都是安全的。</p>
</blockquote>
<h3 id="检查是否分支上的所有提交-commit-都合并-merge-过了"><a href="#检查是否分支上的所有提交-commit-都合并-merge-过了" class="headerlink" title="检查是否分支上的所有提交(commit)都合并(merge)过了"></a>检查是否分支上的所有提交(commit)都合并(merge)过了</h3><blockquote>
<p>检查一个分支上的所有提交(commit)是否都已经合并(merge)到了其它分支, 你应该在这些分支的head(或任何 commits)之间做一次diff:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git log --graph --left-right --cherry-pick --oneline HEAD...feature/120-on-scroll</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这会告诉你在一个分支里有而另一个分支没有的所有提交(commit), 和分支之间不共享的提交(commit)的列表。另一个做法可以是:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git log main ^feature/120-on-scroll --no-merges</span><br></pre></td></tr></table></figure>

<h3 id="交互式rebase-interactive-rebase-可能出现的问题"><a href="#交互式rebase-interactive-rebase-可能出现的问题" class="headerlink" title="交互式rebase(interactive rebase)可能出现的问题"></a>交互式rebase(interactive rebase)可能出现的问题</h3><h4 id="这个rebase-编辑屏幕出现’noop’"><a href="#这个rebase-编辑屏幕出现’noop’" class="headerlink" title="这个rebase 编辑屏幕出现’noop’"></a>这个rebase 编辑屏幕出现’noop’</h4><blockquote>
<p>如果你看到的是这样:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">noop</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这意味着你rebase的分支和当前分支在同一个提交(commit)上, 或者 <em>领先(ahead)</em> 当前分支。你可以尝试:</p>
</blockquote>
<ul>
<li>检查确保主(main)分支没有问题</li>
<li>rebase  <code>HEAD~2</code> 或者更早</li>
</ul>
<h4 id="有冲突的情况"><a href="#有冲突的情况" class="headerlink" title="有冲突的情况"></a>有冲突的情况</h4><blockquote>
<p>如果你不能成功的完成rebase, 你可能必须要解决冲突。</p>
</blockquote>
<p>首先执行 <code>git status</code> 找出哪些文件有冲突:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(my-branch)$ git status</span><br><span class="line">On branch my-branch</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line"> modified:   README.md</span><br></pre></td></tr></table></figure>

<p>在这个例子里面, <code>README.md</code> 有冲突。打开这个文件找到类似下面的内容:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">some code</span><br><span class="line">=========</span><br><span class="line">some code</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; new-commit</span><br></pre></td></tr></table></figure>

<blockquote>
<p>你需要解决新提交的代码(示例里, 从中间<code>==</code>线到<code>new-commit</code>的地方)与<code>HEAD</code> 之间不一样的地方.</p>
</blockquote>
<p>有时候这些合并非常复杂，你应该使用可视化的差异编辑器(visual diff editor):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main*)$ git mergetool -t opendiff</span><br></pre></td></tr></table></figure>

<p>在你解决完所有冲突和测试过后, <code>git add</code> 变化了的(changed)文件, 然后用<code>git rebase --continue</code> 继续rebase。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(my-branch)$ git add README.md</span><br><span class="line">(my-branch)$ git rebase --continue</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行<code>git rebase --skip</code>。</p>
</blockquote>
<p>任何时候你想结束整个rebase 过程，回来rebase前的分支状态, 你可以做:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(my-branch)$ git rebase --abort</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<h2 id="Stash"><a href="#Stash" class="headerlink" title="Stash"></a>Stash</h2></blockquote>
<h3 id="暂存所有改动"><a href="#暂存所有改动" class="headerlink" title="暂存所有改动"></a>暂存所有改动</h3><p>暂存你工作目录下的所有改动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash</span><br></pre></td></tr></table></figure>

<blockquote>
<p>你可以使用<code>-u</code>来排除一些文件</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash -u</span><br></pre></td></tr></table></figure>

<h3 id="暂存指定文件"><a href="#暂存指定文件" class="headerlink" title="暂存指定文件"></a>暂存指定文件</h3><p>假设你只想暂存某一个文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash push working-directory-path/filename.ext</span><br></pre></td></tr></table></figure>

<p>假设你想暂存多个文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash push working-directory-path/filename1.ext working-directory-path/filename2.ext</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="暂存时记录消息"><a href="#暂存时记录消息" class="headerlink" title="暂存时记录消息"></a>暂存时记录消息</h3><blockquote>
<p>这样你可以在<code>list</code>时看到它</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash save &lt;message&gt;</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash push -m &lt;message&gt;</span><br></pre></td></tr></table></figure>

<h3 id="使用某个指定暂存"><a href="#使用某个指定暂存" class="headerlink" title="使用某个指定暂存"></a>使用某个指定暂存</h3><p>首先你可以查看你的<code>stash</code>记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br></pre></td></tr></table></figure>

<p>然后你可以<code>apply</code>某个<code>stash</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash apply &quot;stash@&#123;n&#125;&quot;</span><br></pre></td></tr></table></figure>

<p>此处， ‘n’是<code>stash</code>在栈中的位置，最上层的<code>stash</code>会是0</p>
<p>除此之外，也可以使用时间标记(假如你能记得的话)。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash apply &quot;stash@&#123;2.hours.ago&#125;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="暂存时保留未暂存的内容"><a href="#暂存时保留未暂存的内容" class="headerlink" title="暂存时保留未暂存的内容"></a>暂存时保留未暂存的内容</h3><blockquote>
<p>你需要手动create一个<code>stash commit</code>， 然后使用<code>git stash store</code>。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash create</span><br><span class="line">$ git stash store -m &quot;commit-message&quot; CREATED_SHA1</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<h2 id="杂项-Miscellaneous-Objects"><a href="#杂项-Miscellaneous-Objects" class="headerlink" title="杂项(Miscellaneous Objects)"></a>杂项(Miscellaneous Objects)</h2></blockquote>
<h3 id="克隆所有子模块"><a href="#克隆所有子模块" class="headerlink" title="克隆所有子模块"></a>克隆所有子模块</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone --recursive git://github.com/foo/bar.git</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果已经克隆了:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git submodule update --init --recursive</span><br></pre></td></tr></table></figure>

<h3 id="删除标签-tag"><a href="#删除标签-tag" class="headerlink" title="删除标签(tag)"></a>删除标签(tag)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag -d &lt;tag_name&gt;$ git push &lt;remote&gt; :refs/tags/&lt;tag_name&gt;</span><br></pre></td></tr></table></figure>

<h3 id="恢复已删除标签-tag"><a href="#恢复已删除标签-tag" class="headerlink" title="恢复已删除标签(tag)"></a>恢复已删除标签(tag)</h3><blockquote>
<p>如果你想恢复一个已删除标签(tag), 可以按照下面的步骤: 首先, 需要找到无法访问的标签(unreachable tag):</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git fsck --unreachable | grep tag</span><br></pre></td></tr></table></figure>

<p>记下这个标签(tag)的hash，然后用Git的 update-ref</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git update-ref refs/tags/&lt;tag_name&gt; &lt;hash&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这时你的标签(tag)应该已经恢复了。</p>
</blockquote>
<h3 id="已删除补丁-patch"><a href="#已删除补丁-patch" class="headerlink" title="已删除补丁(patch)"></a>已删除补丁(patch)</h3><blockquote>
<p>如果某人在 GitHub 上给你发了一个pull request, 但是然后他删除了他自己的原始 fork, 你将没法克隆他们的提交(commit)或使用 <code>git am</code>。在这种情况下, 最好手动的查看他们的提交(commit)，并把它们拷贝到一个本地新分支，然后做提交。</p>
</blockquote>
<p>做完提交后, 再修改作者，参见变更作者。然后, 应用变化, 再发起一个新的pull request。</p>
<hr>
<blockquote>
<h2 id="跟踪文件-Tracking-Files"><a href="#跟踪文件-Tracking-Files" class="headerlink" title="跟踪文件(Tracking Files)"></a>跟踪文件(Tracking Files)</h2></blockquote>
<h3 id="我只想改变一个文件名字的大小写，而不修改内容"><a href="#我只想改变一个文件名字的大小写，而不修改内容" class="headerlink" title="我只想改变一个文件名字的大小写，而不修改内容"></a>我只想改变一个文件名字的大小写，而不修改内容</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git mv --force myfile MyFile</span><br></pre></td></tr></table></figure>

<h3 id="我想从Git删除一个文件，但保留该文件"><a href="#我想从Git删除一个文件，但保留该文件" class="headerlink" title="我想从Git删除一个文件，但保留该文件"></a>我想从Git删除一个文件，但保留该文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git rm --cached log.txt</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<h2 id="配置-Configuration"><a href="#配置-Configuration" class="headerlink" title="配置(Configuration)"></a>配置(Configuration)</h2></blockquote>
<h3 id="我想给一些Git命令添加别名-alias"><a href="#我想给一些Git命令添加别名-alias" class="headerlink" title="我想给一些Git命令添加别名(alias)"></a>我想给一些Git命令添加别名(alias)</h3><p>在 OS X 和 Linux 下, 你的 Git的配置文件储存在 <code>~/.gitconfig</code>。我在<code>[alias]</code> 部分添加了一些快捷别名(和一些我容易拼写错误的)，如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[alias]</span><br><span class="line">    a = add</span><br><span class="line">    amend = commit --amend</span><br><span class="line">    c = commit</span><br><span class="line">    ca = commit --amend</span><br><span class="line">    ci = commit -a</span><br><span class="line">    co = checkout</span><br><span class="line">    d = diff</span><br><span class="line">    dc = diff --changed</span><br><span class="line">    ds = diff --staged</span><br><span class="line">    f = fetch</span><br><span class="line">    loll = log --graph --decorate --pretty=oneline --abbrev-commit</span><br><span class="line">    m = merge</span><br><span class="line">    one = log --pretty=oneline</span><br><span class="line">    outstanding = rebase -i @&#123;u&#125;</span><br><span class="line">    s = status</span><br><span class="line">    unpushed = log @&#123;u&#125;</span><br><span class="line">    wc = whatchanged</span><br><span class="line">    wip = rebase -i @&#123;u&#125;</span><br><span class="line">    zap = fetch -p</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="我想缓存一个仓库-repository-的用户名和密码"><a href="#我想缓存一个仓库-repository-的用户名和密码" class="headerlink" title="我想缓存一个仓库(repository)的用户名和密码"></a>我想缓存一个仓库(repository)的用户名和密码</h3><blockquote>
<p>你可能有一个仓库需要授权，这时你可以缓存用户名和密码，而不用每次推/拉(push/pull)的时候都输入，Credential helper能帮你。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global credential.helper cache</span><br><span class="line"># Set git to use the credential memory cache</span><br><span class="line"></span><br><span class="line">$ git config --global credential.helper &#x27;cache --timeout=3600&#x27;</span><br><span class="line"># Set the cache to timeout after 1 hour (setting is in seconds)</span><br></pre></td></tr></table></figure>

<h3 id="我不知道我做错了些什么"><a href="#我不知道我做错了些什么" class="headerlink" title="我不知道我做错了些什么"></a>我不知道我做错了些什么</h3><blockquote>
<p>你把事情搞砸了：你 <code>重置(reset)</code> 了一些东西, 或者你合并了错误的分支, 亦或你强推了后找不到你自己的提交(commit)了。有些时候, 你一直都做得很好, 但你想回到以前的某个状态。</p>
</blockquote>
<blockquote>
<p>这就是 <code>git reflog</code> 的目的， <code>reflog</code> 记录对分支顶端(the tip of a branch)的任何改变, 即使那个顶端没有被任何分支或标签引用。基本上, 每次HEAD的改变, 一条新的记录就会增加到<code>reflog</code>。遗憾的是，这只对本地分支起作用，且它只跟踪动作 (例如，不会跟踪一个没有被记录的文件的任何改变)。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(main)$ git reflog</span><br><span class="line">0a2e358 HEAD@&#123;0&#125;: reset: moving to HEAD~2</span><br><span class="line">0254ea7 HEAD@&#123;1&#125;: checkout: moving from 2.2 to main</span><br><span class="line">c10f740 HEAD@&#123;2&#125;: checkout: moving from main to 2.2</span><br></pre></td></tr></table></figure>

<p>上面的reflog展示了从main分支签出(checkout)到2.2 分支，然后再签回。那里，还有一个硬重置(hard reset)到一个较旧的提交。最新的动作出现在最上面以 <code>HEAD@&#123;0&#125;</code>标识.</p>
<blockquote>
<p>如果事实证明你不小心回移(move back)了提交(commit), reflog 会包含你不小心回移前main上指向的提交(0254ea7)。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset --hard 0254ea7</span><br></pre></td></tr></table></figure>

<p>然后使用git reset就可以把main改回到之前的commit，这提供了一个在历史被意外更改情况下的安全网</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>待续</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Python小技巧</title>
    <url>/2022/03/31/TODO-Python%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="Python小技巧"><a href="#Python小技巧" class="headerlink" title="Python小技巧"></a>Python小技巧</h1><blockquote>
<p>参考文档： <a href="https://therenegadecoder.com/code/python-code-snippets-for-everyday-problems/#code-snippet-repository">https://therenegadecoder.com/code/python-code-snippets-for-everyday-problems/#code-snippet-repository</a></p>
<p>计划：先翻译上述文档；再把工作中遇到的逐步移植过来。</p>
</blockquote>
<h1 id="001：合并字典的多种方式"><a href="#001：合并字典的多种方式" class="headerlink" title="001：合并字典的多种方式"></a>001：合并字典的多种方式</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#原始的字典</span></span><br><span class="line">orig_dict = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;wuxianfeng&quot;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#新的key</span></span><br><span class="line">new_dict = &#123;<span class="string">&#x27;country&#x27;</span>:<span class="string">&#x27;china&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#重复的key</span></span><br><span class="line">dupe_dict = &#123;<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;female&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#合并方式1</span></span><br><span class="line">orig_dict.update(new_dict)</span><br><span class="line"><span class="built_in">print</span>(orig_dict)</span><br><span class="line"></span><br><span class="line"><span class="comment">#合并方式2 遍历2个字典   注意与方式1要分开测试，因为方式1已经改变了原始的字典，下面的是新的字典不影响</span></span><br><span class="line">merge_dict2 = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> (orig_dict, new_dict):</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> _.items():</span><br><span class="line">        merge_dict2[key] = value</span><br><span class="line"><span class="built_in">print</span>(merge_dict2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#合并方式3 字典推导式</span></span><br><span class="line">merge_dict3 = &#123;key: value <span class="keyword">for</span> d <span class="keyword">in</span> (orig_dict, new_dict) <span class="keyword">for</span> key, value <span class="keyword">in</span> d.items()&#125;</span><br><span class="line"><span class="built_in">print</span>(merge_dict3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并方式4  字典解包</span></span><br><span class="line"><span class="comment"># Dictionary unpacking (Python 3.5+)</span></span><br><span class="line">merge_dict4 = &#123;**orig_dict, **new_dict&#125;</span><br><span class="line"><span class="built_in">print</span>(merge_dict4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式5 联合字典</span></span><br><span class="line"><span class="comment"># # Dictionary union operator (Python 3.9+ maybe?)</span></span><br><span class="line">merge_dict5 = orig_dict | dupe_dict</span><br><span class="line">merge_dict6 = dupe_dict | orig_dict</span><br><span class="line"><span class="built_in">print</span>(merge_dict5)</span><br><span class="line"><span class="built_in">print</span>(merge_dict6)</span><br></pre></td></tr></table></figure>



<h1 id="002：-转置字典的多种方式"><a href="#002：-转置字典的多种方式" class="headerlink" title="002： 转置字典的多种方式"></a>002： 转置字典的多种方式</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ori_dict = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;wuxianfeng&#x27;</span>,<span class="string">&#x27;city&#x27;</span>:<span class="string">&#x27;suzhou&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 方法一：推导式</span></span><br><span class="line">reverse_dict2 = &#123;value:key <span class="keyword">for</span> key,value <span class="keyword">in</span> ori_dict.items()&#125;</span><br><span class="line"><span class="built_in">print</span>(reverse_dict2)</span><br><span class="line"><span class="comment"># 方法二：map映射 结合reversed转置</span></span><br><span class="line">reverse_dict1 = <span class="built_in">dict</span>(<span class="built_in">map</span>(<span class="built_in">reversed</span>,ori_dict.items()))</span><br><span class="line"><span class="built_in">print</span>(reverse_dict1)</span><br></pre></td></tr></table></figure>





<h1 id="003：输出在同一行"><a href="#003：输出在同一行" class="headerlink" title="003：输出在同一行"></a>003：输出在同一行</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello china&#x27;</span>)  <span class="comment">#这一行跟上一行在一起</span></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.stdout.write(<span class="string">&#x27;hello nanjing&#x27;</span>)</span><br><span class="line">sys.stdout.write(<span class="string">&#x27;hello jiangning&#x27;</span>)  <span class="comment">#这一行跟上一行在一起</span></span><br></pre></td></tr></table></figure>



<h1 id="004：代码运行时间"><a href="#004：代码运行时间" class="headerlink" title="004：代码运行时间"></a>004：代码运行时间</h1><ul>
<li><p><strong>方法一:timeit</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line">expr = <span class="string">&#x27;[(a, b) for a in (1, 3, 5) for b in (2, 4, 6)]&#x27;</span>  <span class="comment">#被测代码</span></span><br><span class="line"><span class="built_in">print</span>(timeit.timeit(expr,number=<span class="number">1000000</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(timeit.repeat(expr)))</span><br></pre></td></tr></table></figure></li>
<li><p>timeit.repeat()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">repeat</span>(<span class="params">stmt=<span class="string">&quot;pass&quot;</span>, setup=<span class="string">&quot;pass&quot;</span>, timer=default_timer,</span></span><br><span class="line"><span class="params">           repeat=default_repeat, number=default_number, <span class="built_in">globals</span>=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Convenience function to create Timer object and call repeat method.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> Timer(stmt, setup, timer, <span class="built_in">globals</span>).repeat(repeat, number)</span><br><span class="line">default_number = <span class="number">1000000</span></span><br><span class="line">default_repeat = <span class="number">5</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>方法二:cprofile</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m cProfile -s cumulative  待执行的文件.py</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Ordered by: cumulative time</span><br><span class="line">  </span><br><span class="line">ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span><br><span class="line">     <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.099</span>    <span class="number">0.099</span> &#123;built-<span class="keyword">in</span> method builtins.<span class="built_in">exec</span>&#125;</span><br><span class="line">     <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.099</span>    <span class="number">0.099</span> 待执行的文件.py:<span class="number">6</span>(&lt;module&gt;)</span><br><span class="line">     <span class="number">2</span>    <span class="number">0.088</span>    <span class="number">0.044</span>    <span class="number">0.088</span>    <span class="number">0.044</span> &#123;built-<span class="keyword">in</span> method builtins.<span class="built_in">print</span>&#125;</span><br><span class="line">     <span class="number">1</span>    <span class="number">0.006</span>    <span class="number">0.006</span>    <span class="number">0.008</span>    <span class="number">0.008</span> 待执行的文件.py:<span class="number">11</span>(test2)</span><br><span class="line"> <span class="number">30000</span>    <span class="number">0.003</span>    <span class="number">0.000</span>    <span class="number">0.003</span>    <span class="number">0.000</span> &#123;method <span class="string">&#x27;append&#x27;</span> of <span class="string">&#x27;list&#x27;</span> objects&#125;</span><br><span class="line">     <span class="number">1</span>    <span class="number">0.001</span>    <span class="number">0.001</span>    <span class="number">0.002</span>    <span class="number">0.002</span> 待执行的文件.py:<span class="number">6</span>(test1)</span><br><span class="line">     <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> &#123;method <span class="string">&#x27;disable&#x27;</span> of <span class="string">&#x27;_lsprof.Profiler&#x27;</span> objects&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<ul>
<li><strong>ncalls</strong>：表示函数调用的次数；</li>
<li><strong>tottime</strong>：表示指定函数的总的运行时间，除掉函数中调用子函数的运行时间；</li>
<li><strong>percall</strong>：（第一个percall）等于 tottime/ncalls；</li>
<li><strong>cumtime</strong>：表示该函数及其所有子函数的调用运行的时间，即函数开始调用到返回的时间；</li>
<li><strong>percall</strong>：（第二个percall）即函数运行一次的平均时间，等于 cumtime/ncalls；</li>
<li>**filename:lineno(function)**：每个函数调用的具体信息；</li>
<li>需要注意的是cProfile很难搞清楚函数内的每一行发生了什么，是针对整个函数来说的。</li>
</ul>
</li>
</ul>
<h1 id="005：python3-10以下版本实现switch-case"><a href="#005：python3-10以下版本实现switch-case" class="headerlink" title="005：python3.10以下版本实现switch-case"></a>005：python3.10以下版本实现switch-case</h1><ul>
<li><p>python3.10天然就支持了，不需要额外实现。</p>
</li>
<li><p>常规的处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">choice  = <span class="built_in">input</span>(<span class="string">&#x27;choice:&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> choice == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;choose 1&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> choice == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;choose 2&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;oops!&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>字典实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">choice_dict = &#123;</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;choose 1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;choose 2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">choice = <span class="built_in">input</span>(<span class="string">&#x27;choice: &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(choice_dict.get(choice,<span class="string">&#x27;oops!&#x27;</span>))</span><br></pre></td></tr></table></figure></li>
<li><p>如果要做很多事情，用函数封装一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">choose_1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;choose 1&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choose_2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;choose 2&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choose_3</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;choose 3&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">choice_dict = &#123;</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>:choose_1,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>:choose_2,</span><br><span class="line">    <span class="string">&#x27;3&#x27;</span>:choose_3</span><br><span class="line">&#125;</span><br><span class="line">choice = <span class="built_in">input</span>(<span class="string">&#x27;choice: &#x27;</span>)</span><br><span class="line">choice_dict.get(choice,<span class="string">&#x27;oops!&#x27;</span>)()</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>待续</tag>
      </tags>
  </entry>
  <entry>
    <title>Git入门指南(一)</title>
    <url>/2022/04/10/TODO-Git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97-%E4%B8%80/</url>
    <content><![CDATA[<h1 id="Git入门指南-一"><a href="#Git入门指南-一" class="headerlink" title="Git入门指南(一)"></a>Git入门指南(一)</h1><blockquote>
<p>引用了 微信公众号 入门小站的内容</p>
<p>参考了pro git</p>
</blockquote>
<h2 id="概念-TODO"><a href="#概念-TODO" class="headerlink" title="概念 TODO"></a>概念 TODO</h2>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>待续</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git入门指南(二)</title>
    <url>/2022/04/13/TODO-Git%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97-%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="Git入门指南-二"><a href="#Git入门指南-二" class="headerlink" title="Git入门指南(二)"></a>Git入门指南(二)</h1><blockquote>
<p>引用了 微信公众号 入门小站的内容</p>
<p>参考了pro git</p>
</blockquote>
<h2 id="命令行-拓展"><a href="#命令行-拓展" class="headerlink" title="命令行 - 拓展"></a>命令行 - 拓展</h2><h3 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure>

<h3 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h3><p>Git 的设置文件为. gitconfig，它可以在用户主目录下 (全局配置)，也可以在项目目录下 (项目配置)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">$ git config --list</span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ git config -e [--global]</span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">$ git config [--global] user.email &quot;[email address]&quot;</span><br><span class="line"># 颜色设置</span><br><span class="line">git config --global color.ui true                         # git status等命令自动着色</span><br><span class="line">git config --global color.status auto</span><br><span class="line">git config --global color.diff auto</span><br><span class="line">git config --global color.branch auto</span><br><span class="line">git config --global color.interactive auto</span><br><span class="line">git config --global --unset http.proxy    # remove  proxy configuration on git</span><br></pre></td></tr></table></figure>

<h3 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加 / 删除文件"></a>三、增加 / 删除文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>

<h3 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"># 将add和commit合为一步</span><br><span class="line">$ git commit -am &#x27;message&#x27;</span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>

<h3 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"># 切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br><span class="line"># 检出版本v2.0</span><br><span class="line">$ git checkout v2.0</span><br><span class="line"># 从远程分支develop创建新本地分支devel并检出</span><br><span class="line">$ git checkout -b devel origin/develop</span><br><span class="line"># 检出head版本的README文件（可用于修改错误回退）</span><br><span class="line">git checkout -- README</span><br></pre></td></tr></table></figure>

<h3 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag]</span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>

<h3 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty=format:%s</span><br><span class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"># 显示过去5次提交</span><br><span class="line">$ git log -5 --pretty --oneline</span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ git shortlog -sn</span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"># 显示暂存区和工作区的差异</span><br><span class="line">$ git diff</span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure>

<h3 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure>

<h3 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>

<h3 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init                                                  # 初始化本地git仓库（创建新仓库）</span><br><span class="line">git config --global user.name &quot;xxx&quot;                       # 配置用户名</span><br><span class="line">git config --global user.email &quot;xxx@xxx.com&quot;              # 配置邮件</span><br><span class="line">git config --global color.ui true                         # git status等命令自动着色</span><br><span class="line">git config --global color.status auto</span><br><span class="line">git config --global color.diff auto</span><br><span class="line">git config --global color.branch auto</span><br><span class="line">git config --global color.interactive auto</span><br><span class="line">git config --global --unset http.proxy           # remove  proxy configuration on git</span><br><span class="line">git clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库</span><br><span class="line">git status                                                # 查看当前版本状态（是否修改）</span><br><span class="line">git add xyz                                               # 添加xyz文件至index</span><br><span class="line">git add .                                                 # 增加当前子目录下所有更改过的文件至index</span><br><span class="line">git commit -m &#x27;xxx&#x27;                                       # 提交</span><br><span class="line">git commit --amend -m &#x27;xxx&#x27;                               # 合并上一次提交（用于反复修改）</span><br><span class="line">git commit -am &#x27;xxx&#x27;                                      # 将add和commit合为一步</span><br><span class="line">git rm xxx                                                # 删除index中的文件</span><br><span class="line">git rm -r *                                               # 递归删除</span><br><span class="line">git log                                                   # 显示提交日志</span><br><span class="line">git log -1                                                # 显示1行日志 -n为n行</span><br><span class="line">git log -5</span><br><span class="line">git log --stat                                            # 显示提交日志及相关变动文件</span><br><span class="line">git log -p -m</span><br><span class="line">git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容</span><br><span class="line">git show dfb02                                            # 可只用commitid的前几位</span><br><span class="line">git show HEAD                                             # 显示HEAD提交日志</span><br><span class="line">git show HEAD^          # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span><br><span class="line">git tag                                                   # 显示已存在的tag</span><br><span class="line">git tag -a v2.0 -m &#x27;xxx&#x27;                                  # 增加v2.0的tag</span><br><span class="line">git show v2.0                                             # 显示v2.0的日志及详细内容</span><br><span class="line">git log v2.0                                              # 显示v2.0的日志</span><br><span class="line">git diff                                                  # 显示所有未添加至index的变更</span><br><span class="line">git diff --cached                                         # 显示所有已添加index但还未commit的变更</span><br><span class="line">git diff HEAD^                                            # 比较与上一个版本的差异</span><br><span class="line">git diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异</span><br><span class="line">git diff origin/master..master          # 比较远程分支master上有本地分支master上没有的</span><br><span class="line">git diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容</span><br><span class="line">git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）</span><br><span class="line">git branch                                                # 显示本地分支</span><br><span class="line">git branch --contains 50089                               # 显示包含提交50089的分支</span><br><span class="line">git branch -a                                             # 显示所有分支</span><br><span class="line">git branch -r                                             # 显示所有原创分支</span><br><span class="line">git branch --merged                                       # 显示所有已合并到当前分支的分支</span><br><span class="line">git branch --no-merged                                    # 显示所有未合并到当前分支的分支</span><br><span class="line">git branch -m master master_copy                          # 本地分支改名</span><br><span class="line">git checkout -b master_copy              # 从当前分支创建新分支master_copy并检出</span><br><span class="line">git checkout -b master master_copy                        # 上面的完整版</span><br><span class="line">git checkout features/performance                         # 检出已存在的features/performance分支</span><br><span class="line">git checkout --track hotfixes/BJVEP933      # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span><br><span class="line">git checkout v2.0                                         # 检出版本v2.0</span><br><span class="line">git checkout -b devel origin/develop      # 从远程分支develop创建新本地分支devel并检出</span><br><span class="line">git checkout -- README                      # 检出head版本的README文件（可用于修改错误回退）</span><br><span class="line">git merge origin/master                                   # 合并远程master分支至当前分支</span><br><span class="line">git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改</span><br><span class="line">git push origin master                                    # 将当前分支push到远程master分支</span><br><span class="line">git push origin :hotfixes/BJVEP933           # 删除远程仓库的hotfixes/BJVEP933分支</span><br><span class="line">git push --tags                                           # 把所有tag推送到远程仓库</span><br><span class="line">git fetch                        # 获取所有远程分支（不更新本地分支，另需merge）</span><br><span class="line">git fetch --prune                       # 获取所有原创分支并清除服务器上已删掉的分支</span><br><span class="line">git pull origin master                               # 获取远程分支master并merge到当前分支</span><br><span class="line">git mv README README2                                     # 重命名文件README为README2</span><br><span class="line">git reset --hard HEAD               # 将当前版本重置为HEAD（通常用于merge失败回退）</span><br><span class="line">git rebase</span><br><span class="line">git branch -d hotfixes/BJVEP933        # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</span><br><span class="line">git branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933</span><br><span class="line">git ls-files                                              # 列出git index包含的文件</span><br><span class="line">git show-branch                                           # 图示当前分支历史</span><br><span class="line">git show-branch --all                                     # 图示所有分支历史</span><br><span class="line">git whatchanged                                           # 显示提交历史对应的文件修改</span><br><span class="line">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</span><br><span class="line">git ls-tree HEAD                                          # 内部命令：显示某个git对象</span><br><span class="line">git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH</span><br><span class="line">git reflog                                                # 显示所有提交，包括孤立节点</span><br><span class="line">git show HEAD@&#123;5&#125;</span><br><span class="line">git show master@&#123;yesterday&#125;                               # 显示master分支昨天的状态</span><br><span class="line">git log --pretty=format:&#x27;%h %s&#x27; --graph                   # 图示提交日志</span><br><span class="line">git show HEAD~3</span><br><span class="line">git show -s --pretty=raw 2be7fcb476</span><br><span class="line">git stash                                                 # 暂存当前修改，将所有至为HEAD状态</span><br><span class="line">git stash list                                            # 查看所有暂存</span><br><span class="line">git stash show -p stash@&#123;0&#125;                               # 参考第一次暂存</span><br><span class="line">git stash apply stash@&#123;0&#125;                                 # 应用第一次暂存</span><br><span class="line">git grep &quot;delete from&quot;                                    # 文件中搜索文本“delete from”</span><br><span class="line">git grep -e &#x27;#define&#x27; --and -e SORT_DIRENT</span><br><span class="line">git gc</span><br><span class="line">git fsck</span><br><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>待续</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Python第三方库_pycryptodome_RSA加密</title>
    <url>/2022/04/09/TODO-Python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93pycryptodome%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h1 id="Python第三方库pycryptodome加密"><a href="#Python第三方库pycryptodome加密" class="headerlink" title="Python第三方库pycryptodome加密"></a>Python第三方库pycryptodome加密</h1><blockquote>
<p><a href="https://www.pycryptodome.org/en/latest/src/introduction.html">https://www.pycryptodome.org/en/latest/src/introduction.html</a></p>
</blockquote>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul>
<li><strong>处理加密的一个第三方库</strong></li>
<li>It supports Python 2.7, Python 3.5 and newer, and PyPy.</li>
<li>PyCryptodome is a fork of PyCrypto。但是PyCrypto在2015年就停止更新了，而且也不支持现在的python版本</li>
<li>安装后所有的内容都是在<code>Crypto</code> 这个包下</li>
</ul>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>Authenticated encryption modes (GCM, CCM, EAX, SIV, OCB)</li>
<li>Accelerated AES on Intel platforms via AES-NI</li>
<li>First class support for PyPy</li>
<li>Elliptic curves cryptography (NIST P-256, P-384 and P-521 curves only)</li>
<li>Better and more compact API (nonce and iv attributes for ciphers, automatic generation of random nonces and IVs, simplified CTR cipher mode, and more)</li>
<li>SHA-3 (including SHAKE XOFs) and BLAKE2 hash algorithms</li>
<li>Salsa20 and ChaCha20 stream ciphers</li>
<li>scrypt and HKDF</li>
<li>Deterministic (EC)DSA</li>
<li>Password-protected PKCS#8 key containers</li>
<li>Shamir’s Secret Sharing scheme</li>
<li>Random numbers get sourced directly from the OS (and not from a CSPRNG in userspace)</li>
<li>Simplified install process, including better support for Windows</li>
<li>Cleaner RSA and DSA key generation (largely based on FIPS 186-4)</li>
<li>Major clean ups and simplification of the code base</li>
</ul>
<h1 id="官方示例"><a href="#官方示例" class="headerlink" title="官方示例"></a>官方示例</h1><h2 id="AES加密"><a href="#AES加密" class="headerlink" title="AES加密"></a>AES加密</h2><ul>
<li><p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"></span><br><span class="line">data = <span class="string">b&#x27;secret data&#x27;</span></span><br><span class="line"></span><br><span class="line">key = get_random_bytes(<span class="number">16</span>)</span><br><span class="line">cipher = AES.new(key, AES.MODE_EAX)</span><br><span class="line">ciphertext, tag = cipher.encrypt_and_digest(data)</span><br><span class="line"></span><br><span class="line">file_out = <span class="built_in">open</span>(<span class="string">&quot;encrypted.bin&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">[ file_out.write(x) <span class="keyword">for</span> x <span class="keyword">in</span> (cipher.nonce, tag, ciphertext) ]</span><br><span class="line">file_out.close()</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="AES解密"><a href="#AES解密" class="headerlink" title="AES解密"></a>AES解密</h2><ul>
<li><p>示例代码：承上！key非常重要</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">file_in = <span class="built_in">open</span>(<span class="string">&quot;encrypted.bin&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">nonce, tag, ciphertext = [ file_in.read(x) <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">16</span>, <span class="number">16</span>, -<span class="number">1</span>) ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># let&#x27;s assume that the key is somehow available again</span></span><br><span class="line">cipher = AES.new(key, AES.MODE_EAX, nonce)</span><br><span class="line">data = cipher.decrypt_and_verify(ciphertext, tag)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="生成RSA-key"><a href="#生成RSA-key" class="headerlink" title="生成RSA key"></a>生成RSA key</h2><ul>
<li><p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line">secret_code = <span class="string">&quot;Unguessable&quot;</span></span><br><span class="line">key = RSA.generate(<span class="number">2048</span>)</span><br><span class="line">encrypted_key = key.export_key(passphrase=secret_code, pkcs=<span class="number">8</span>,</span><br><span class="line">                              protection=<span class="string">&quot;scryptAndAES128-CBC&quot;</span>)</span><br><span class="line"></span><br><span class="line">file_out = <span class="built_in">open</span>(<span class="string">&quot;rsa_key.bin&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">file_out.write(encrypted_key)</span><br><span class="line">file_out.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(key.publickey().export_key())</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="读RSA-key"><a href="#读RSA-key" class="headerlink" title="读RSA key"></a>读RSA key</h2><ul>
<li><p>示例代码：承上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line">secret_code = <span class="string">&quot;Unguessable&quot;</span></span><br><span class="line">encoded_key = <span class="built_in">open</span>(<span class="string">&quot;rsa_key.bin&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">key = RSA.import_key(encoded_key, passphrase=secret_code)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(key.publickey().export_key())</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="生成公钥和私钥"><a href="#生成公钥和私钥" class="headerlink" title="生成公钥和私钥"></a>生成公钥和私钥</h2><ul>
<li><p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line">key = RSA.generate(<span class="number">2048</span>)</span><br><span class="line">private_key = key.export_key()</span><br><span class="line">file_out = <span class="built_in">open</span>(<span class="string">&quot;private.pem&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">file_out.write(private_key)</span><br><span class="line">file_out.close()</span><br><span class="line"></span><br><span class="line">public_key = key.publickey().export_key()</span><br><span class="line">file_out = <span class="built_in">open</span>(<span class="string">&quot;receiver.pem&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">file_out.write(public_key)</span><br><span class="line">file_out.close()</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="RSA加密"><a href="#RSA加密" class="headerlink" title="RSA加密"></a>RSA加密</h2><ul>
<li><p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES, PKCS1_OAEP</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;I met aliens in UFO. Here is the map.&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">file_out = <span class="built_in">open</span>(<span class="string">&quot;encrypted_data.bin&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line"></span><br><span class="line">recipient_key = RSA.import_key(<span class="built_in">open</span>(<span class="string">&quot;receiver.pem&quot;</span>).read())</span><br><span class="line">session_key = get_random_bytes(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Encrypt the session key with the public RSA key</span></span><br><span class="line">cipher_rsa = PKCS1_OAEP.new(recipient_key)</span><br><span class="line">enc_session_key = cipher_rsa.encrypt(session_key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Encrypt the data with the AES session key</span></span><br><span class="line">cipher_aes = AES.new(session_key, AES.MODE_EAX)</span><br><span class="line">ciphertext, tag = cipher_aes.encrypt_and_digest(data)</span><br><span class="line">[ file_out.write(x) <span class="keyword">for</span> x <span class="keyword">in</span> (enc_session_key, cipher_aes.nonce, tag, ciphertext) ]</span><br><span class="line">file_out.close()</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="RSA解密"><a href="#RSA解密" class="headerlink" title="RSA解密"></a>RSA解密</h2><ul>
<li><p>示例代码：承上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES, PKCS1_OAEP</span><br><span class="line"></span><br><span class="line">file_in = <span class="built_in">open</span>(<span class="string">&quot;encrypted_data.bin&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line"></span><br><span class="line">private_key = RSA.import_key(<span class="built_in">open</span>(<span class="string">&quot;private.pem&quot;</span>).read())</span><br><span class="line"></span><br><span class="line">enc_session_key, nonce, tag, ciphertext = \</span><br><span class="line">   [ file_in.read(x) <span class="keyword">for</span> x <span class="keyword">in</span> (private_key.size_in_bytes(), <span class="number">16</span>, <span class="number">16</span>, -<span class="number">1</span>) ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decrypt the session key with the private RSA key</span></span><br><span class="line">cipher_rsa = PKCS1_OAEP.new(private_key)</span><br><span class="line">session_key = cipher_rsa.decrypt(enc_session_key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decrypt the data with the AES session key</span></span><br><span class="line">cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)</span><br><span class="line">data = cipher_aes.decrypt_and_verify(ciphertext, tag)</span><br><span class="line"><span class="built_in">print</span>(data.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="自己的整理"><a href="#自己的整理" class="headerlink" title="自己的整理"></a>自己的整理</h1><ul>
<li>官方的示例仅供参考，需要连起来看。</li>
</ul>
<h2 id="RSA加密解密简易版"><a href="#RSA加密解密简易版" class="headerlink" title="RSA加密解密简易版"></a>RSA加密解密简易版</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="comment"># 得到公钥和私钥</span></span><br><span class="line">key = RSA.generate(<span class="number">2048</span>)</span><br><span class="line">private_key = key.export_key()</span><br><span class="line">public_key = key.publickey().export_key()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 加密的过程</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"><span class="comment">#需要加密的数据</span></span><br><span class="line">data = <span class="string">b&quot;123456&quot;</span>  <span class="comment">#测试数据是bytes类型的</span></span><br><span class="line"><span class="comment">#导入公钥</span></span><br><span class="line">publicKey = RSA.import_key(public_key)</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">cipher = PKCS1_OAEP.new(publicKey)</span><br><span class="line"><span class="comment">#加密，每次运行加密后的数据其实会改变的</span></span><br><span class="line">encrypted_data = cipher.encrypt(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 解密的过程</span></span><br><span class="line"><span class="comment"># 导入私钥</span></span><br><span class="line">privateKey = RSA.import_key(private_key)</span><br><span class="line">cipher = PKCS1_OAEP.new(privateKey)</span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">data = cipher.decrypt(encrypted_data)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure>

<h2 id="RSA加解密封装"><a href="#RSA加解密封装" class="headerlink" title="RSA加解密封装"></a>RSA加解密封装</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSAcrypto</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.key = RSA.generate(<span class="number">2048</span>)</span><br><span class="line">        self.private_key = self.key.export_key()</span><br><span class="line">        self.public_key = self.key.publickey().export_key()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rsa_encrypt</span>(<span class="params">self,data:<span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        publicKey = RSA.import_key(self.public_key)</span><br><span class="line">        cipher = PKCS1_OAEP.new(publicKey)</span><br><span class="line">        encrypted_data = cipher.encrypt(data.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> encrypted_data</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rsa_decrypto</span>(<span class="params">self,encrypted_data:<span class="built_in">bytes</span></span>) -&gt;<span class="built_in">str</span>:</span><br><span class="line">        privateKey = RSA.import_key(self.private_key)</span><br><span class="line">        cipher = PKCS1_OAEP.new(privateKey)</span><br><span class="line">        decrypted_data = cipher.decrypt(encrypted_data).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> decrypted_data</span><br><span class="line">test_data = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">rsa_obj = RSAcrypto()</span><br><span class="line">encrypto_data = rsa_obj.rsa_encrypt(test_data)</span><br><span class="line"><span class="built_in">print</span>(rsa_obj.rsa_decrypto(encrypto_data))  <span class="comment">#输出加密前的数据 123456</span></span><br></pre></td></tr></table></figure>



<h2 id="TODO-抽空再写个FILE的"><a href="#TODO-抽空再写个FILE的" class="headerlink" title="TODO 抽空再写个FILE的"></a>TODO 抽空再写个FILE的</h2><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p><strong>简介</strong></p>
<ul>
<li>RSA是一种非对称加密算法，它是由三位数学家（Rivest、Shamir、Adleman）设计出来的</li>
<li>非对称加密是相对于对称加密而言的。对称加密算法是指加密解密使用的是同一个秘钥，而非对称加密是由两个密钥（公钥、私钥）来进行加密解密的，由此可见非对称加密安全性更高。</li>
<li>公钥顾名思义就是公开的密钥会发放给多个持有人</li>
<li>私钥是私有密码往往只有一个持有人</li>
</ul>
<p><strong>公私钥特性</strong></p>
<ul>
<li>公钥与私钥是成对出现的；</li>
<li>私钥文件中包含了公钥数据，所以可以基于私钥导出公钥；</li>
<li>密钥越长，越难破解，所以2048位密钥比1024位密钥要更安全；</li>
<li>公钥和私钥都是密钥，被公开的那个就是公钥，没有被公开的那个就是私钥</li>
</ul>
<hr>
<ul>
<li>公钥和私钥都可以用于加解密操作，用公钥加密的数据只能由对应的私钥解密，反之亦然。</li>
<li>私钥可以用于签名<ul>
<li>签名和加密作用不同，签名并不是为了保密，而是为了保证这个签名是由特定的某个人签名的，而不是被其它人伪造的签名，所以私钥的私有性就适合用在签名用途上。</li>
</ul>
</li>
<li>推荐：公钥用于加密、私钥用于解密<ul>
<li>这才能起到加密作用</li>
<li>因为公钥是公开的，很多人可以持有公钥。若用私钥加密，那所有持有公钥的人都可以进行解密，这是不安全的！</li>
<li>若用公钥加密，那只能由私钥解密，而私钥是私有不公开的，只能由特定的私钥持有人解密，保证的数据的安全性。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>待续</tag>
        <tag>第三方库</tag>
      </tags>
  </entry>
  <entry>
    <title>Postman测试脚本</title>
    <url>/2022/04/05/TODO-Postman%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="Postman测试脚本"><a href="#Postman测试脚本" class="headerlink" title="Postman测试脚本"></a>Postman测试脚本</h1><blockquote>
<p><a href="https://learning.postman.com/docs/writing-scripts/script-references/test-examples/">https://learning.postman.com/docs/writing-scripts/script-references/test-examples/</a></p>
</blockquote>
<h1 id="SNIPPETS"><a href="#SNIPPETS" class="headerlink" title="SNIPPETS"></a>SNIPPETS</h1><blockquote>
<p>POSTMAN界面提供的</p>
</blockquote>
<h2 id="响应体包含字符串"><a href="#响应体包含字符串" class="headerlink" title="响应体包含字符串"></a>响应体包含字符串</h2><blockquote>
<p><em>{<strong>retcode: 0</strong>} 这是响应体</em></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pm.test(<span class="string">&quot;Body matches string&quot;</span>, function () &#123;</span><br><span class="line">    pm.expect(pm.response.text()).to.include(<span class="string">&quot;retcode&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="响应体JSON数据"><a href="#响应体JSON数据" class="headerlink" title="响应体JSON数据"></a>响应体JSON数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pm.test(<span class="string">&quot;Your test name&quot;</span>, function () &#123;</span><br><span class="line">    var jsonData = pm.response.json();</span><br><span class="line">    pm.expect(jsonData.retcode).to.eql(<span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="响应体数据"><a href="#响应体数据" class="headerlink" title="响应体数据"></a>响应体数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pm.test(<span class="string">&quot;Body is correct&quot;</span>, function () &#123;</span><br><span class="line">    pm.response.to.have.body(&#123;retcode: <span class="number">0</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="响应头数据"><a href="#响应头数据" class="headerlink" title="响应头数据"></a>响应头数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pm.test(<span class="string">&quot;Content-Type is present&quot;</span>, function () &#123;</span><br><span class="line">    pm.response.to.have.header(<span class="string">&quot;Content-Type&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pm.test(<span class="string">&quot;Response time is less than 200ms&quot;</span>, function () &#123;</span><br><span class="line">    pm.expect(pm.response.responseTime).to.be.below(<span class="number">200</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="响应码"><a href="#响应码" class="headerlink" title="响应码"></a>响应码</h2><ul>
<li><p>方式一</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pm.test(<span class="string">&quot;Successful POST request&quot;</span>, function () &#123;</span><br><span class="line">    pm.expect(pm.response.code).to.be.oneOf([<span class="number">200</span>, <span class="number">201</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>方式二</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pm.test(<span class="string">&quot;Status code is 200&quot;</span>, function () &#123;</span><br><span class="line">  pm.response.to.have.status(<span class="number">200</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="响应码字符串"><a href="#响应码字符串" class="headerlink" title="响应码字符串"></a>响应码字符串</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pm.test(<span class="string">&quot;Status code name has string&quot;</span>, function () &#123;</span><br><span class="line">    pm.response.to.have.status(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<ul>
<li></li>
</ul>
<h1 id="pm-Obj"><a href="#pm-Obj" class="headerlink" title="pm Obj"></a>pm Obj</h1><h2 id="脚本中使用变量"><a href="#脚本中使用变量" class="headerlink" title="脚本中使用变量"></a>脚本中使用变量</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量??</span></span><br><span class="line">pm.<span class="property">variables</span>.<span class="title function_">has</span>(<span class="attr">variableName</span>:<span class="title class_">String</span>):<span class="keyword">function</span> → <span class="title class_">Boolean</span>   <span class="comment">//较少使用</span></span><br><span class="line">pm.<span class="property">variables</span>.<span class="title function_">get</span>(<span class="attr">variableName</span>:<span class="title class_">String</span>):<span class="keyword">function</span> → *         <span class="comment">//多用get或者set</span></span><br><span class="line">pm.<span class="property">variables</span>.<span class="title function_">set</span>(<span class="attr">variableName</span>:<span class="title class_">String</span>, <span class="attr">variableValue</span>:*):<span class="keyword">function</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//环境变量</span></span><br><span class="line">pm.<span class="property">environment</span>.<span class="property">name</span>:<span class="title class_">String</span></span><br><span class="line">pm.<span class="property">environment</span>.<span class="title function_">has</span>(<span class="attr">variableName</span>:<span class="title class_">String</span>):<span class="keyword">function</span> → <span class="title class_">Boolean</span></span><br><span class="line">pm.<span class="property">environment</span>.<span class="title function_">get</span>(<span class="attr">variableName</span>:<span class="title class_">String</span>):<span class="keyword">function</span> → *</span><br><span class="line">pm.<span class="property">environment</span>.<span class="title function_">set</span>(<span class="attr">variableName</span>:<span class="title class_">String</span>, <span class="attr">variableValue</span>:*):<span class="keyword">function</span></span><br><span class="line">pm.<span class="property">environment</span>.<span class="title function_">unset</span>(<span class="attr">variableName</span>:<span class="title class_">String</span>):<span class="keyword">function</span></span><br><span class="line">pm.<span class="property">environment</span>.<span class="title function_">clear</span>():<span class="keyword">function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合变量</span></span><br><span class="line">pm.<span class="property">collectionVariables</span>.<span class="title function_">get</span>(<span class="attr">variableName</span>:<span class="title class_">String</span>):<span class="keyword">function</span> → *</span><br><span class="line">pm.<span class="property">collectionVariables</span>.<span class="title function_">set</span>(<span class="attr">variableName</span>:<span class="title class_">String</span>, <span class="attr">variableValue</span>:*):<span class="keyword">function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line">pm.<span class="property">globals</span>.<span class="title function_">get</span>(<span class="attr">variableName</span>:<span class="title class_">String</span>):<span class="keyword">function</span> → *</span><br><span class="line">pm.<span class="property">globals</span>.<span class="title function_">set</span>(<span class="attr">variableName</span>:<span class="title class_">String</span>, <span class="attr">variableValue</span>:*):<span class="keyword">function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// data 变量，在run collection的时候</span></span><br><span class="line">pm.<span class="property">iterationData</span>.<span class="title function_">has</span>(<span class="attr">variableName</span>:<span class="title class_">String</span>):<span class="keyword">function</span> → boolean</span><br><span class="line">pm.<span class="property">iterationData</span>.<span class="title function_">get</span>(<span class="attr">variableName</span>:<span class="title class_">String</span>):<span class="keyword">function</span> → *</span><br><span class="line">pm.<span class="property">iterationData</span>.<span class="title function_">toObject</span>():<span class="keyword">function</span> → <span class="title class_">Object</span></span><br><span class="line">pm.<span class="property">iterationData</span>.<span class="title function_">toJSON</span>():<span class="keyword">function</span> → *</span><br><span class="line">pm.<span class="property">iterationData</span>.<span class="title function_">unset</span>(<span class="attr">key</span>:<span class="title class_">String</span>):<span class="keyword">function</span></span><br></pre></td></tr></table></figure>

<p><strong>变量的有效范围，从大到小</strong></p>
<ul>
<li>Global</li>
<li>Collection</li>
<li>Environment</li>
<li>Data</li>
<li>Local</li>
</ul>
<h2 id="脚本中使用request和response数据"><a href="#脚本中使用request和response数据" class="headerlink" title="脚本中使用request和response数据"></a>脚本中使用request和response数据</h2><table>
<thead>
<tr>
<th>对象方法</th>
<th>属性</th>
</tr>
</thead>
<tbody><tr>
<td>pm.request</td>
<td>pm.request.url:Url</td>
</tr>
<tr>
<td></td>
<td>pm.request.headers:HeaderList</td>
</tr>
<tr>
<td></td>
<td>pm.request.method:String</td>
</tr>
<tr>
<td></td>
<td>pm.request.body:RequestBody</td>
</tr>
<tr>
<td></td>
<td>pm.request.headers.add(header:Header):function</td>
</tr>
<tr>
<td></td>
<td>pm.request.headers.remove(headerName:String):function</td>
</tr>
<tr>
<td></td>
<td>pm.request.headers.upsert({key: headerName:String, value: headerValue:String}):function)</td>
</tr>
<tr>
<td>pm.response</td>
<td>pm.response.code:Number</td>
</tr>
<tr>
<td></td>
<td>pm.response.status:String</td>
</tr>
<tr>
<td></td>
<td>pm.response.headers:HeaderList</td>
</tr>
<tr>
<td></td>
<td>pm.response.responseTime:Number</td>
</tr>
<tr>
<td></td>
<td>pm.response.responseSize:Number</td>
</tr>
<tr>
<td></td>
<td>pm.response.text():Function → String</td>
</tr>
<tr>
<td></td>
<td>pm.response.json():Function → Object</td>
</tr>
<tr>
<td>pm.info</td>
<td>pm.info.eventName:String</td>
</tr>
<tr>
<td></td>
<td>pm.info.iteration:Number</td>
</tr>
<tr>
<td></td>
<td>pm.info.iterationCount:Number</td>
</tr>
<tr>
<td></td>
<td>pm.info.requestName:String</td>
</tr>
<tr>
<td></td>
<td>pm.info.requestId:String</td>
</tr>
<tr>
<td>pm.cookies</td>
<td>pm.cookies.has(cookieName:String):Function → Boolean</td>
</tr>
<tr>
<td></td>
<td>pm.cookies.get(cookieName:String):Function → String</td>
</tr>
<tr>
<td></td>
<td>pm.cookies.toObject():Function → Object</td>
</tr>
<tr>
<td></td>
<td>pm.cookies.jar():Function → Object</td>
</tr>
<tr>
<td>pm.sendRequest</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li><p>示例1</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pm.<span class="property">request</span>.<span class="property">headers</span>.<span class="title function_">add</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&quot;client-id&quot;</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&quot;abcdef&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>示例2</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jar = pm.<span class="property">cookies</span>.<span class="title function_">jar</span>();</span><br><span class="line">jar.<span class="title function_">set</span>(<span class="attr">URL</span>:<span class="title class_">String</span>, cookie <span class="attr">name</span>:<span class="title class_">String</span>, cookie <span class="attr">value</span>:<span class="title class_">String</span>, <span class="title function_">callback</span>(error, cookie)):<span class="title class_">Function</span> → <span class="title class_">Object</span></span><br><span class="line">    </span><br><span class="line">jar.<span class="title function_">set</span>(<span class="attr">URL</span>:<span class="title class_">String</span>, &#123; <span class="attr">name</span>:<span class="title class_">String</span>, <span class="attr">value</span>:<span class="title class_">String</span>, <span class="attr">httpOnly</span>:<span class="title class_">Bool</span> &#125;, <span class="title function_">callback</span>(error, cookie)):<span class="title class_">Function</span> → <span class="title class_">Object</span></span><br><span class="line"></span><br><span class="line">jar.<span class="title function_">get</span>(<span class="attr">URL</span>:<span class="title class_">String</span>, <span class="attr">cookieName</span>:<span class="title class_">String</span>, callback (error, value)):<span class="title class_">Function</span> → <span class="title class_">Object</span></span><br><span class="line"></span><br><span class="line">jar.<span class="title function_">getAll</span>(<span class="attr">URL</span>:<span class="title class_">String</span>, callback (error, cookies)):<span class="title class_">Function</span></span><br><span class="line"></span><br><span class="line">jar.<span class="title function_">unset</span>(<span class="attr">URL</span>:<span class="title class_">String</span>, <span class="attr">token</span>:<span class="title class_">String</span>, <span class="title function_">callback</span>(error)):<span class="title class_">Function</span> → <span class="title class_">Object</span></span><br><span class="line">  </span><br><span class="line">jar.<span class="title function_">clear</span>(<span class="attr">URL</span>:<span class="title class_">String</span>, callback (error)):<span class="title class_">Function</span> → <span class="title class_">Object</span></span><br></pre></td></tr></table></figure></li>
<li><p>示例3</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jar = pm.<span class="property">cookies</span>.<span class="title function_">jar</span>();</span><br><span class="line">jar.<span class="title function_">set</span>(<span class="string">&quot;httpbin.org&quot;</span>, <span class="string">&quot;session-id&quot;</span>, <span class="string">&quot;abc123&quot;</span>, <span class="function">(<span class="params">error, cookie</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`An error occurred: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Cookie saved: <span class="subst">$&#123;cookie&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>示例4</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Example with a plain string URL</span></span><br><span class="line">pm.<span class="title function_">sendRequest</span>(<span class="string">&#x27;https://postman-echo.com/get&#x27;</span>, <span class="function">(<span class="params">error, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example with a full-fledged request</span></span><br><span class="line"><span class="keyword">const</span> postRequest = &#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;https://postman-echo.com/post&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">header</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X-Foo&#x27;</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">body</span>: &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;raw&#x27;</span>,</span><br><span class="line">    <span class="attr">raw</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">key</span>: <span class="string">&#x27;this is json&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">pm.<span class="title function_">sendRequest</span>(postRequest, <span class="function">(<span class="params">error, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error ? error : response.<span class="title function_">json</span>());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example containing a test</span></span><br><span class="line">pm.<span class="title function_">sendRequest</span>(<span class="string">&#x27;https://postman-echo.com/get&#x27;</span>, <span class="function">(<span class="params">error, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pm.<span class="title function_">test</span>(<span class="string">&#x27;response should be okay to process&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    pm.<span class="title function_">expect</span>(error).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="literal">null</span>);</span><br><span class="line">    pm.<span class="title function_">expect</span>(response).<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">property</span>(<span class="string">&#x27;code&#x27;</span>, <span class="number">200</span>);</span><br><span class="line">    pm.<span class="title function_">expect</span>(response).<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">property</span>(<span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="pm-test"><a href="#pm-test" class="headerlink" title="pm.test()"></a>pm.test()</h2><ul>
<li><p>语法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pm.<span class="title function_">test</span>(<span class="attr">testName</span>:<span class="title class_">String</span>, <span class="attr">specFunction</span>:<span class="title class_">Function</span>):<span class="title class_">Function</span></span><br><span class="line">参数<span class="number">1</span>: 函数执行成功后输出的字符串</span><br><span class="line">参数<span class="number">2</span>：测试函数，格式 ===&gt;函数: <span class="keyword">function</span>(<span class="params"></span>) &#123; 函数体&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>示例1</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#下面要结合pm.<span class="property">expect</span></span><br><span class="line">pm.<span class="property">response</span>.<span class="title function_">text</span>()</span><br><span class="line">pm.<span class="property">response</span>.<span class="title function_">json</span>()</span><br><span class="line">pm.<span class="property">response</span>.<span class="property">code</span></span><br><span class="line">pm.<span class="property">response</span>.<span class="property">responseTime</span></span><br><span class="line">#下面可以直接断言</span><br><span class="line">pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="property">body</span></span><br><span class="line">pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="property">header</span></span><br><span class="line">pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="property">status</span></span><br></pre></td></tr></table></figure></li>
<li><p>示例2</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;response should be okay to process&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">not</span>.<span class="property">be</span>.<span class="property">error</span>;</span><br><span class="line">  pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">jsonBody</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">not</span>.<span class="property">have</span>.<span class="title function_">jsonBody</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;);	</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="pm-expect"><a href="#pm-expect" class="headerlink" title="pm.expect()"></a>pm.expect()</h2><ul>
<li><p>往往嵌入到pm.test()中使用</p>
</li>
<li><p>语法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pm.<span class="title function_">expect</span>(<span class="attr">assertion</span>:*):<span class="title class_">Function</span> → <span class="title class_">Assertion</span></span><br></pre></td></tr></table></figure></li>
<li><p>请结合上面的SNIPPETS来使用</p>
</li>
</ul>
<hr>
<blockquote>
<p>写不下去了，这玩意没啥营养，真做POSTMAN做到这个层面，写代码自动化不香吗？</p>
</blockquote>
]]></content>
      <categories>
        <category>postman</category>
      </categories>
      <tags>
        <tag>完结</tag>
        <tag>postman</tag>
        <tag>api</tag>
      </tags>
  </entry>
  <entry>
    <title>本博客使用说明</title>
    <url>/2022/04/07/%E6%9C%AC%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h1 id="本博客使用说明"><a href="#本博客使用说明" class="headerlink" title="本博客使用说明"></a>本博客使用说明</h1><ul>
<li>面向初学者</li>
<li>主要是Python，涉及Selenium、API、爬虫等等</li>
<li>注意看标签。完结的基本不会再更新了（除非你评论了有BUG），待续的抽空更新。</li>
<li>转载若有侵权请及时告知删除。</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>完结</category>
      </categories>
      <tags>
        <tag>完结</tag>
      </tags>
  </entry>
  <entry>
    <title>网络资源整理</title>
    <url>/2022/04/11/TODO-%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="网络资源整理"><a href="#网络资源整理" class="headerlink" title="网络资源整理"></a>网络资源整理</h1><h1 id="IT博客"><a href="#IT博客" class="headerlink" title="IT博客"></a>IT博客</h1><table>
<thead>
<tr>
<th>博客</th>
<th>地址</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>阮一峰的网络日志</td>
<td><a href="http://www.ruanyifeng.com/blog/">http://www.ruanyifeng.com/blog/</a></td>
<td></td>
</tr>
<tr>
<td>廖雪峰的官方网站</td>
<td><a href="https://www.liaoxuefeng.com/">https://www.liaoxuefeng.com/</a></td>
<td>Mysql/Python/JAVA/JS/区块链/GIT</td>
</tr>
<tr>
<td>刘江的博客</td>
<td><a href="https://www.liujiangblog.com/blog/">https://www.liujiangblog.com/blog/</a></td>
<td>Python/Django3.1/Vue3/数据分析</td>
</tr>
<tr>
<td>网道</td>
<td><a href="https://wangdoc.com/javascript/">https://wangdoc.com/javascript/</a></td>
<td>HTML/JS/ES6/C/SHELL/SSH/WEB API</td>
</tr>
<tr>
<td>为什么这么设计</td>
<td><a href="https://draveness.me/">https://draveness.me/</a></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="IT各大排行榜"><a href="#IT各大排行榜" class="headerlink" title="IT各大排行榜"></a>IT各大排行榜</h1><table>
<thead>
<tr>
<th>排行榜</th>
<th>URL</th>
</tr>
</thead>
<tbody><tr>
<td>编程语言</td>
<td><a href="https://www.tiobe.com/tiobe-index/">https://www.tiobe.com/tiobe-index/</a></td>
</tr>
<tr>
<td>数据库</td>
<td><a href="https://db-engines.com/en/ranking">https://db-engines.com/en/ranking</a></td>
</tr>
<tr>
<td>杂类</td>
<td><a href="https://w3techs.com/">https://w3techs.com/</a></td>
</tr>
<tr>
<td>Linux</td>
<td><a href="https://distrowatch.com/dwres.php?resource=popularity">https://distrowatch.com/dwres.php?resource=popularity</a></td>
</tr>
</tbody></table>
<h1 id="知名软件"><a href="#知名软件" class="headerlink" title="知名软件"></a>知名软件</h1><table>
<thead>
<tr>
<th>软件</th>
<th>说明</th>
<th>下载位置</th>
</tr>
</thead>
<tbody><tr>
<td>scrcpy</td>
<td>投屏软件</td>
<td><a href="https://github.com/Genymobile/scrcpy/releases/download/v1.23/scrcpy-win64-v1.23.zip">https://github.com/Genymobile/scrcpy/releases/download/v1.23/scrcpy-win64-v1.23.zip</a></td>
</tr>
<tr>
<td>7z</td>
<td>压缩软件</td>
<td><a href="https://www.7-zip.org/">https://www.7-zip.org/</a></td>
</tr>
<tr>
<td>geek</td>
<td>安装卸载</td>
<td><a href="https://geekuninstaller.com/">https://geekuninstaller.com/</a></td>
</tr>
<tr>
<td>everything</td>
<td>搜索软件</td>
<td><a href="https://www.voidtools.com/zh-cn/">https://www.voidtools.com/zh-cn/</a></td>
</tr>
<tr>
<td>git</td>
<td>版本管理</td>
<td><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></td>
</tr>
<tr>
<td>allure</td>
<td>测试报告</td>
<td><a href="https://github.com/allure-framework/allure2/releases">https://github.com/allure-framework/allure2/releases</a></td>
</tr>
<tr>
<td></td>
<td></td>
<td><a href="https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/">https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/</a></td>
</tr>
<tr>
<td>adb</td>
<td></td>
<td><a href="https://adbinstaller.com/">https://adbinstaller.com/</a></td>
</tr>
<tr>
<td>moco</td>
<td>MOCK SERVER</td>
<td><a href="https://github.com/dreamhead/moco/tags">https://github.com/dreamhead/moco/tags</a></td>
</tr>
<tr>
<td>jenkins</td>
<td>CICD</td>
<td><a href="https://updates.jenkins-ci.org/download/war/">https://updates.jenkins-ci.org/download/war/</a></td>
</tr>
<tr>
<td></td>
<td></td>
<td><a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins">https://mirrors.tuna.tsinghua.edu.cn/jenkins</a></td>
</tr>
<tr>
<td>winmerge</td>
<td>对比工具</td>
<td><a href="https://winmerge.org/downloads/?lang=en">https://winmerge.org/downloads/?lang=en</a></td>
</tr>
<tr>
<td>*potplayer</td>
<td>播放软件</td>
<td><a href="https://t1.daumcdn.net/potplayer/PotPlayer/Version/Latest/PotPlayerSetup64.exe">https://t1.daumcdn.net/potplayer/PotPlayer/Version/Latest/PotPlayerSetup64.exe</a></td>
</tr>
<tr>
<td>vim</td>
<td>编辑器</td>
<td><a href="https://www.vim.org/download.php">https://www.vim.org/download.php</a></td>
</tr>
<tr>
<td>sublime text</td>
<td>编辑器</td>
<td><a href="https://download.sublimetext.com/sublime_text_build_4126_x64_setup.exe">https://download.sublimetext.com/sublime_text_build_4126_x64_setup.exe</a></td>
</tr>
<tr>
<td>notepad++</td>
<td>编辑器</td>
<td><a href="https://notepad-plus-plus.org/download/">https://notepad-plus-plus.org/download/</a></td>
</tr>
<tr>
<td>VScode</td>
<td>IDE</td>
<td><a href="https://code.visualstudio.com/Download#">https://code.visualstudio.com/Download#</a><br/><a href="https://code.visualstudio.com/sha/download?build=stable&amp;os=win32-x64-user">https://code.visualstudio.com/sha/download?build=stable&amp;os=win32-x64-user</a></td>
</tr>
<tr>
<td>pycharm</td>
<td>IDE</td>
<td><a href="https://www.jetbrains.com.cn/en-us/pycharm/download/other.html">https://www.jetbrains.com.cn/en-us/pycharm/download/other.html</a></td>
</tr>
<tr>
<td>svn</td>
<td>版本管理</td>
<td><a href="https://tortoisesvn.net/downloads.html">https://tortoisesvn.net/downloads.html</a></td>
</tr>
</tbody></table>
<ul>
<li><p>带*的可能要翻一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">「PotPlayerSetup64.exe」https://www.aliyundrive.com/s/pn9oW7TMCJZ</span><br><span class="line">点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="PIP安装源"><a href="#PIP安装源" class="headerlink" title="PIP安装源"></a>PIP安装源</h1><table>
<thead>
<tr>
<th>源</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>清华</td>
<td><a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a></td>
</tr>
<tr>
<td>豆瓣</td>
<td><a href="http://pypi.doubanio.com/simple/">http://pypi.doubanio.com/simple/</a></td>
</tr>
<tr>
<td>腾讯</td>
<td><a href="https://mirrors.cloud.tencent.com/pypi/simple/">https://mirrors.cloud.tencent.com/pypi/simple/</a></td>
</tr>
<tr>
<td>阿里云</td>
<td><a href="https://mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi/simple/</a></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li><p>使用方式：临时的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install selenium -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></li>
<li><p>永久的，执行如下命令，以后敲命令自动找这个仓库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> <span class="keyword">global</span>.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<ul>
<li><p>这样会生成一个pip.ini，WIN10大概位置是C:\Users\用户名\AppData\Roaming\pip\pip.ini</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="SELENIUM相关"><a href="#SELENIUM相关" class="headerlink" title="SELENIUM相关"></a>SELENIUM相关</h1><h2 id="驱动下载位置"><a href="#驱动下载位置" class="headerlink" title="驱动下载位置"></a>驱动下载位置</h2><table>
<thead>
<tr>
<th>驱动</th>
<th>位置</th>
</tr>
</thead>
<tbody><tr>
<td>chromedriver</td>
<td><a href="https://registry.npmmirror.com/binary.html?path=chromedriver">https://registry.npmmirror.com/binary.html?path=chromedriver</a></td>
</tr>
<tr>
<td>geckodriver</td>
<td><a href="https://registry.npmmirror.com/binary.html?path=geckodriver">https://registry.npmmirror.com/binary.html?path=geckodriver</a></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><table>
<thead>
<tr>
<th>地址</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.seleniumhq.org/selenium-ide/docs/en/api/commands/">https://www.seleniumhq.org/selenium-ide/docs/en/api/commands/</a></td>
<td>IDE相关命令</td>
</tr>
<tr>
<td><a href="https://w3c.github.io/webdriver/#get-title">https://w3c.github.io/webdriver/#get-title</a></td>
<td>WEBDRIVER官网</td>
</tr>
<tr>
<td><a href="https://chromedriver.chromium.org/home">https://chromedriver.chromium.org/home</a></td>
<td>CHROMEDRIVER官网</td>
</tr>
<tr>
<td><a href="https://pypi.org/project/selenium">https://pypi.org/project/selenium</a></td>
<td>SELENIUM的PYPI</td>
</tr>
<tr>
<td><a href="https://github.com/SeleniumHQ/selenium/blob/trunk/py/CHANGES">https://github.com/SeleniumHQ/selenium/blob/trunk/py/CHANGES</a></td>
<td>SELENIUM的changelog</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="PO"><a href="#PO" class="headerlink" title="PO"></a>PO</h2><table>
<thead>
<tr>
<th>地址</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://martinfowler.com/bliki/PageObject.html">https://martinfowler.com/bliki/PageObject.html</a></td>
<td>出身</td>
</tr>
<tr>
<td><a href="https://github.com/SeleniumHQ/selenium/wiki/PageObjects">https://github.com/SeleniumHQ/selenium/wiki/PageObjects</a></td>
<td>SELENIUM官网对PO的说明</td>
</tr>
<tr>
<td><a href="https://selenium-python.readthedocs.io/page-objects.html#">https://selenium-python.readthedocs.io/page-objects.html#</a></td>
<td>selenium托管的文档对PO的说明</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="Appium相关"><a href="#Appium相关" class="headerlink" title="Appium相关"></a>Appium相关</h1><table>
<thead>
<tr>
<th>地址</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://github.com/appium/appium-inspector/releases">https://github.com/appium/appium-inspector/releases</a></td>
<td>inspector</td>
</tr>
<tr>
<td><a href="https://github.com/appium/appium-desktop/releases">https://github.com/appium/appium-desktop/releases</a></td>
<td>appium-desktop</td>
</tr>
<tr>
<td><a href="https://pypi.org/project/Appium-Python-Client/">https://pypi.org/project/Appium-Python-Client/</a></td>
<td>Appium Python Client</td>
</tr>
<tr>
<td><a href="https://github.com/appium/appium/blob/master/docs/cn/writing-running-appium/caps.md">https://github.com/appium/appium/blob/master/docs/cn/writing-running-appium/caps.md</a></td>
<td>能力值中文</td>
</tr>
<tr>
<td><a href="https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/caps.md">https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/caps.md</a></td>
<td>能力值英文</td>
</tr>
<tr>
<td><a href="https://appium.io/docs/en/about-appium/intro/">https://appium.io/docs/en/about-appium/intro/</a></td>
<td>官网文档</td>
</tr>
<tr>
<td><a href="https://appium.io/docs/cn/about-appium/intro/">https://appium.io/docs/cn/about-appium/intro/</a></td>
<td>官网文档</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><table>
<thead>
<tr>
<th>说明</th>
<th>位置</th>
</tr>
</thead>
<tbody><tr>
<td>MDN关于HTTP协议详解</td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP">https://developer.mozilla.org/zh-CN/docs/Web/HTTP</a></td>
</tr>
</tbody></table>
<h1 id="Devops"><a href="#Devops" class="headerlink" title="Devops"></a>Devops</h1><h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><table>
<thead>
<tr>
<th>地址</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a></td>
<td>升级站点</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>资源</category>
      </categories>
      <tags>
        <tag>待续</tag>
        <tag>资源</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记_python源码剖析</title>
    <url>/2022/03/30/TODO-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-python%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</url>
    <content><![CDATA[<h1 id="读书笔记-python源码剖析"><a href="#读书笔记-python源码剖析" class="headerlink" title="读书笔记_python源码剖析"></a>读书笔记_python源码剖析</h1>]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>待续</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo技巧</title>
    <url>/2022/03/31/TODO-hexo/</url>
    <content><![CDATA[<h1 id="hexo技巧"><a href="#hexo技巧" class="headerlink" title="hexo技巧"></a>hexo技巧</h1><blockquote>
<p>当前博客是用hexo+ayer主题结合github搭建而成</p>
</blockquote>
<h1 id="添加分类"><a href="#添加分类" class="headerlink" title="添加分类"></a>添加分类</h1><p><strong>步骤一：添加分类</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<ul>
<li><p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">songqin008@DESKTOP-6PNR7SB MINGW64 /e/github/myblog/hexo</span><br><span class="line">$ hexo new page categories</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: E:\github\myblog\hexo\source\categories\index.md</span><br></pre></td></tr></table></figure></li>
<li><p>index.md的内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: categories</span><br><span class="line">date: 2022-03-30 13:46:23</span><br><span class="line">type: categories   #网上都说是这句话，但有点奇怪的，感觉不太对。</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>步骤二：在文章中增加对应信息</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: hexo技巧</span><br><span class="line">date: </span><br><span class="line">categories: </span><br><span class="line">- hexo</span><br></pre></td></tr></table></figure>

<ul>
<li>效果是有的，但在分类标签中看不到</li>
</ul>
<h1 id="添加标签"><a href="#添加标签" class="headerlink" title="添加标签"></a>添加标签</h1><p><strong>步骤一：添加标签</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<ul>
<li>输出</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">songqin008@DESKTOP-6PNR7SB MINGW64 /e/github/myblog/hexo</span><br><span class="line">$ hexo new page tags</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: E:\github\myblog\hexo\source\tags\index.md</span><br></pre></td></tr></table></figure>

<ul>
<li><p>index.md的内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: 2022-03-30 13:55:59</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>步骤二：在文章中增加对应信息</strong></p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: hexo技巧</span><br><span class="line">date: </span><br><span class="line">tags: </span><br><span class="line">- hexo</span><br></pre></td></tr></table></figure>

<ul>
<li>效果是有的，但在标签中看不到</li>
</ul>
<h1 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h1><ul>
<li><p>执行2个命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure></li>
<li><p>在文件头部信息加入top: True</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">title: hexo技巧</span><br><span class="line">date: </span><br><span class="line">categories: </span><br><span class="line">- hexo</span><br><span class="line">tags:</span><br><span class="line">- hexo</span><br><span class="line">top: <span class="literal">True</span>   <span class="comment">#关键是这个</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h1><ul>
<li>本地的显然不行，上传到images目录下也没通过；</li>
<li>找免费图床，推荐SM.MS</li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>待续</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫_下载王者荣耀英雄图片</title>
    <url>/2022/04/05/%E7%88%AC%E8%99%AB-%E4%B8%8B%E8%BD%BD%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E8%8B%B1%E9%9B%84%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h1 id="下载王者荣耀英雄图片"><a href="#下载王者荣耀英雄图片" class="headerlink" title="下载王者荣耀英雄图片"></a>下载王者荣耀英雄图片</h1><ul>
<li><p>此处用到的小知识</p>
<ul>
<li>pyquery</li>
<li>UserAgent</li>
<li>pathlib</li>
<li>open方法</li>
</ul>
</li>
<li><p>最终代码，没有做啥异常处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span>  PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line">ua = UserAgent()</span><br><span class="line">hero_url = pq(url=<span class="string">&#x27;https://pvp.qq.com/web201605/herolist.shtml&#x27;</span>,headers=&#123;<span class="string">&#x27;user-agent&#x27;</span>:ua.chrome&#125;,encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">heros = hero_url(<span class="string">&#x27;.herolist img&#x27;</span>).items()</span><br><span class="line">Path(<span class="string">&#x27;./hero&#x27;</span>).mkdir(exist_ok=<span class="literal">True</span>)   <span class="comment">#在你运行代码下建一个hero目录来存放英雄图片</span></span><br><span class="line"><span class="keyword">for</span> hero <span class="keyword">in</span> heros:</span><br><span class="line">    img_url = <span class="string">&#x27;https:&#x27;</span> + hero.attr.src</span><br><span class="line">    hero_name = hero.attr.alt</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;./hero/<span class="subst">&#123;hero_name&#125;</span>.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(requests.get(img_url).content)</span><br></pre></td></tr></table></figure></li>
<li><p>依赖于王者官网URL、英雄图片URL及属性，这几点不变该代码正常应该都能爬取。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>完结</tag>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
</search>
