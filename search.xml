<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python小技巧</title>
    <url>/2022/03/31/Python%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="Python小技巧"><a href="#Python小技巧" class="headerlink" title="Python小技巧"></a>Python小技巧</h1><blockquote>
<p>参考文档： <a href="https://therenegadecoder.com/code/python-code-snippets-for-everyday-problems/#code-snippet-repository">https://therenegadecoder.com/code/python-code-snippets-for-everyday-problems/#code-snippet-repository</a></p>
<p>计划：先翻译上述文档；再把工作中遇到的到逐步移植过来。</p>
</blockquote>
<h1 id="001：合并字典的多种方式"><a href="#001：合并字典的多种方式" class="headerlink" title="001：合并字典的多种方式"></a>001：合并字典的多种方式</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#原始的字典</span></span><br><span class="line">orig_dict = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;wuxianfeng&quot;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#新的key</span></span><br><span class="line">new_dict = &#123;<span class="string">&#x27;country&#x27;</span>:<span class="string">&#x27;china&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#重复的key</span></span><br><span class="line">dupe_dict = &#123;<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;female&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#合并方式1</span></span><br><span class="line">orig_dict.update(new_dict)</span><br><span class="line"><span class="built_in">print</span>(orig_dict)</span><br><span class="line"></span><br><span class="line"><span class="comment">#合并方式2 遍历2个字典   注意与方式1要分开测试，因为方式1已经改变了原始的字典，下面的是新的字典不影响</span></span><br><span class="line">merge_dict2 = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> (orig_dict, new_dict):</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> _.items():</span><br><span class="line">        merge_dict2[key] = value</span><br><span class="line"><span class="built_in">print</span>(merge_dict2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#合并方式3 字典推导式</span></span><br><span class="line">merge_dict3 = &#123;key: value <span class="keyword">for</span> d <span class="keyword">in</span> (orig_dict, new_dict) <span class="keyword">for</span> key, value <span class="keyword">in</span> d.items()&#125;</span><br><span class="line"><span class="built_in">print</span>(merge_dict3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并方式4  字典解包</span></span><br><span class="line"><span class="comment"># Dictionary unpacking (Python 3.5+)</span></span><br><span class="line">merge_dict4 = &#123;**orig_dict, **new_dict&#125;</span><br><span class="line"><span class="built_in">print</span>(merge_dict4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式5 联合字典</span></span><br><span class="line"><span class="comment"># # Dictionary union operator (Python 3.9+ maybe?)</span></span><br><span class="line">merge_dict5 = orig_dict | dupe_dict</span><br><span class="line">merge_dict6 = dupe_dict | orig_dict</span><br><span class="line"><span class="built_in">print</span>(merge_dict5)</span><br><span class="line"><span class="built_in">print</span>(merge_dict6)</span><br></pre></td></tr></table></figure>



<h1 id="002：-转置字典的多种方式"><a href="#002：-转置字典的多种方式" class="headerlink" title="002： 转置字典的多种方式"></a>002： 转置字典的多种方式</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ori_dict = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;wuxianfeng&#x27;</span>,<span class="string">&#x27;city&#x27;</span>:<span class="string">&#x27;suzhou&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 方法一：推导式</span></span><br><span class="line">reverse_dict2 = &#123;value:key <span class="keyword">for</span> key,value <span class="keyword">in</span> ori_dict.items()&#125;</span><br><span class="line"><span class="built_in">print</span>(reverse_dict2)</span><br><span class="line"><span class="comment"># 方法二：map映射 结合reversed转置</span></span><br><span class="line">reverse_dict1 = <span class="built_in">dict</span>(<span class="built_in">map</span>(<span class="built_in">reversed</span>,ori_dict.items()))</span><br><span class="line"><span class="built_in">print</span>(reverse_dict1)</span><br></pre></td></tr></table></figure>





<h1 id="003：输出在同一行"><a href="#003：输出在同一行" class="headerlink" title="003：输出在同一行"></a>003：输出在同一行</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello china&#x27;</span>)  <span class="comment">#这一行跟上一行在一起</span></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.stdout.write(<span class="string">&#x27;hello nanjing&#x27;</span>)</span><br><span class="line">sys.stdout.write(<span class="string">&#x27;hello jiangning&#x27;</span>)  <span class="comment">#这一行跟上一行在一起</span></span><br></pre></td></tr></table></figure>



<h1 id="004：代码运行时间"><a href="#004：代码运行时间" class="headerlink" title="004：代码运行时间"></a>004：代码运行时间</h1><ul>
<li><p><strong>方法一:timeit</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line">expr = <span class="string">&#x27;[(a, b) for a in (1, 3, 5) for b in (2, 4, 6)]&#x27;</span>  <span class="comment">#被测代码</span></span><br><span class="line"><span class="built_in">print</span>(timeit.timeit(expr,number=<span class="number">1000000</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(timeit.repeat(expr)))</span><br></pre></td></tr></table></figure></li>
<li><p>timeit.repeat()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">repeat</span>(<span class="params">stmt=<span class="string">&quot;pass&quot;</span>, setup=<span class="string">&quot;pass&quot;</span>, timer=default_timer,</span></span><br><span class="line"><span class="params">           repeat=default_repeat, number=default_number, <span class="built_in">globals</span>=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Convenience function to create Timer object and call repeat method.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> Timer(stmt, setup, timer, <span class="built_in">globals</span>).repeat(repeat, number)</span><br><span class="line">default_number = <span class="number">1000000</span></span><br><span class="line">default_repeat = <span class="number">5</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>方法二:cprofile</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m cProfile -s cumulative  待执行的文件.py</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Ordered by: cumulative time</span><br><span class="line">  </span><br><span class="line">ncalls  tottime  percall  cumtime  percall filename:lineno(function)</span><br><span class="line">     <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.099</span>    <span class="number">0.099</span> &#123;built-<span class="keyword">in</span> method builtins.<span class="built_in">exec</span>&#125;</span><br><span class="line">     <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.099</span>    <span class="number">0.099</span> 待执行的文件.py:<span class="number">6</span>(&lt;module&gt;)</span><br><span class="line">     <span class="number">2</span>    <span class="number">0.088</span>    <span class="number">0.044</span>    <span class="number">0.088</span>    <span class="number">0.044</span> &#123;built-<span class="keyword">in</span> method builtins.<span class="built_in">print</span>&#125;</span><br><span class="line">     <span class="number">1</span>    <span class="number">0.006</span>    <span class="number">0.006</span>    <span class="number">0.008</span>    <span class="number">0.008</span> 待执行的文件.py:<span class="number">11</span>(test2)</span><br><span class="line"> <span class="number">30000</span>    <span class="number">0.003</span>    <span class="number">0.000</span>    <span class="number">0.003</span>    <span class="number">0.000</span> &#123;method <span class="string">&#x27;append&#x27;</span> of <span class="string">&#x27;list&#x27;</span> objects&#125;</span><br><span class="line">     <span class="number">1</span>    <span class="number">0.001</span>    <span class="number">0.001</span>    <span class="number">0.002</span>    <span class="number">0.002</span> 待执行的文件.py:<span class="number">6</span>(test1)</span><br><span class="line">     <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> &#123;method <span class="string">&#x27;disable&#x27;</span> of <span class="string">&#x27;_lsprof.Profiler&#x27;</span> objects&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<ul>
<li><strong>ncalls</strong>：表示函数调用的次数；</li>
<li><strong>tottime</strong>：表示指定函数的总的运行时间，除掉函数中调用子函数的运行时间；</li>
<li><strong>percall</strong>：（第一个percall）等于 tottime/ncalls；</li>
<li><strong>cumtime</strong>：表示该函数及其所有子函数的调用运行的时间，即函数开始调用到返回的时间；</li>
<li><strong>percall</strong>：（第二个percall）即函数运行一次的平均时间，等于 cumtime/ncalls；</li>
<li>**filename:lineno(function)**：每个函数调用的具体信息；</li>
<li>需要注意的是cProfile很难搞清楚函数内的每一行发生了什么，是针对整个函数来说的。</li>
</ul>
</li>
</ul>
<h1 id="005：python3-10以下版本实现switch-case"><a href="#005：python3-10以下版本实现switch-case" class="headerlink" title="005：python3.10以下版本实现switch-case"></a>005：python3.10以下版本实现switch-case</h1><ul>
<li><p>常规的处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">choice  = <span class="built_in">input</span>(<span class="string">&#x27;choice:&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> choice == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;choose 1&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> choice == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;choose 2&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;oops!&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>字典实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">choice_dict = &#123;</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;choose 1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;choose 2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">choice = <span class="built_in">input</span>(<span class="string">&#x27;choice: &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(choice_dict.get(choice,<span class="string">&#x27;oops!&#x27;</span>))</span><br></pre></td></tr></table></figure></li>
<li><p>如果要做很多事情，用函数封装一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">choose_1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;choose 1&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choose_2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;choose 2&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choose_3</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;choose 3&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">choice_dict = &#123;</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>:choose_1,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>:choose_2,</span><br><span class="line">    <span class="string">&#x27;3&#x27;</span>:choose_3</span><br><span class="line">&#125;</span><br><span class="line">choice = <span class="built_in">input</span>(<span class="string">&#x27;choice: &#x27;</span>)</span><br><span class="line">choice_dict.get(choice,<span class="string">&#x27;oops!&#x27;</span>)()</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>待续</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>网络资源整理</title>
    <url>/2022/03/31/%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="网络资源整理"><a href="#网络资源整理" class="headerlink" title="网络资源整理"></a>网络资源整理</h1><h1 id="IT博客"><a href="#IT博客" class="headerlink" title="IT博客"></a>IT博客</h1><table>
<thead>
<tr>
<th>博客</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>阮一峰的网络日志</td>
<td><a href="http://www.ruanyifeng.com/blog/">http://www.ruanyifeng.com/blog/</a></td>
</tr>
<tr>
<td>廖雪峰的官方网站</td>
<td><a href="https://www.liaoxuefeng.com/">https://www.liaoxuefeng.com/</a></td>
</tr>
<tr>
<td>刘江的博客</td>
<td><a href="https://www.liujiangblog.com/blog/">https://www.liujiangblog.com/blog/</a></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="知名软件"><a href="#知名软件" class="headerlink" title="知名软件"></a>知名软件</h1><table>
<thead>
<tr>
<th>软件</th>
<th>下载位置</th>
</tr>
</thead>
<tbody><tr>
<td>投屏软件scrcpy</td>
<td><a href="https://github.com/Genymobile/scrcpy/releases/download/v1.23/scrcpy-win64-v1.23.zip">https://github.com/Genymobile/scrcpy/releases/download/v1.23/scrcpy-win64-v1.23.zip</a></td>
</tr>
<tr>
<td>压缩软件7z</td>
<td><a href="https://www.7-zip.org/">https://www.7-zip.org/</a></td>
</tr>
<tr>
<td>安装卸载geek</td>
<td><a href="https://geekuninstaller.com/">https://geekuninstaller.com/</a></td>
</tr>
<tr>
<td>everything</td>
<td><a href="https://www.voidtools.com/zh-cn/">https://www.voidtools.com/zh-cn/</a></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="PIP安装源"><a href="#PIP安装源" class="headerlink" title="PIP安装源"></a>PIP安装源</h1><table>
<thead>
<tr>
<th>源</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>清华</td>
<td><a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a></td>
</tr>
<tr>
<td>豆瓣</td>
<td><a href="http://pypi.doubanio.com/simple/">http://pypi.doubanio.com/simple/</a></td>
</tr>
<tr>
<td>腾讯</td>
<td><a href="https://mirrors.cloud.tencent.com/pypi/simple/">https://mirrors.cloud.tencent.com/pypi/simple/</a></td>
</tr>
<tr>
<td>阿里云</td>
<td><a href="https://mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi/simple/</a></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li><p>使用方式：临时的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install selenium -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></li>
<li><p>永久的，执行如下命令，以后敲命令自动找这个仓库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> <span class="keyword">global</span>.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<ul>
<li><p>这样会生成一个pip.ini，WIN10大概位置是C:\Users\用户名\AppData\Roaming\pip\pip.ini</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="SELENIUM相关"><a href="#SELENIUM相关" class="headerlink" title="SELENIUM相关"></a>SELENIUM相关</h1><h2 id="驱动下载位置"><a href="#驱动下载位置" class="headerlink" title="驱动下载位置"></a>驱动下载位置</h2><table>
<thead>
<tr>
<th>驱动</th>
<th>位置</th>
</tr>
</thead>
<tbody><tr>
<td>chromedriver</td>
<td><a href="https://registry.npmmirror.com/binary.html?path=chromedriver">https://registry.npmmirror.com/binary.html?path=chromedriver</a></td>
</tr>
<tr>
<td>geckodriver</td>
<td><a href="https://registry.npmmirror.com/binary.html?path=geckodriver">https://registry.npmmirror.com/binary.html?path=geckodriver</a></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>资源</category>
      </categories>
      <tags>
        <tag>待续</tag>
        <tag>资源</tag>
      </tags>
  </entry>
  <entry>
    <title>Postman生成报告</title>
    <url>/2022/03/31/Postman%E7%94%9F%E6%88%90%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<h1 id="Postman生成报告"><a href="#Postman生成报告" class="headerlink" title="Postman生成报告"></a>Postman生成报告</h1><blockquote>
<p>POSTMAN的企业版是支持生成一个漂亮的报告的</p>
</blockquote>
<h2 id="newman安装"><a href="#newman安装" class="headerlink" title="newman安装"></a>newman安装</h2><ul>
<li><p>安装newman</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">npm install -g newman</span><br></pre></td></tr></table></figure></li>
<li><p>new报告插件安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">newman-reporter-html</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="POSTMAN中导出"><a href="#POSTMAN中导出" class="headerlink" title="POSTMAN中导出"></a>POSTMAN中导出</h2><ul>
<li><p>导出用例</p>
<p><img src="https://s2.loli.net/2022/03/31/4nt3yOgQGKlJBU1.png" alt="1648712267412.png"></p>
<p><img src="https://s2.loli.net/2022/03/31/JdifKSGBZg5WaRI.png" alt="1648712363265.png"></p>
</li>
<li><p>导出环境变量</p>
<p><img src="https://s2.loli.net/2022/03/31/4nt3yOgQGKlJBU1.png" alt="1648712267412.png"></p>
</li>
<li><p>这样会生成两个json文件</p>
<ul>
<li>教官系统.postman_collection.json</li>
<li>教官系统环境变量.postman_environment.json</li>
</ul>
</li>
</ul>
<h2 id="newman生成报告"><a href="#newman生成报告" class="headerlink" title="newman生成报告"></a>newman生成报告</h2><ul>
<li><p>newman其实是个命令行工具</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;newman -h</span><br><span class="line">Usage: newman [options] [command]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -v, --version               output the version number</span><br><span class="line">  -h, --<span class="built_in">help</span>                  display <span class="built_in">help</span> <span class="keyword">for</span> command</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  run [options] &lt;collection&gt;  Initiate a Postman Collection run <span class="keyword">from</span> a given URL <span class="keyword">or</span> path</span><br><span class="line"></span><br><span class="line">To get available options <span class="keyword">for</span> a command:</span><br><span class="line">  newman &lt;command&gt; -h</span><br></pre></td></tr></table></figure></li>
<li><p>可以看到关键是run命令，主要的参数和用法如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">newman run 用例.json -e 环境.json -r html  <span class="comment">#生成一个html报告</span></span><br><span class="line">newman run 用例.json -e 环境.json --bail newman  <span class="comment">#console打印</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>cmd示例,html的就不看了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">newman run 教官系统.postman_collection.json -e 教官系统环境变量.postman_environment.json --bail newman</span></span><br><span class="line">newman</span><br><span class="line"></span><br><span class="line">教官系统</span><br><span class="line"></span><br><span class="line">→ 登录</span><br><span class="line">  POST http://124.223.33.41:7081/api/mgr/loginReq ―[200 OK, 256B, 214ms]</span><br><span class="line">  1. Response time is less than 200ms</span><br><span class="line">  √  Status code name has string</span><br><span class="line">  √  Status code is 200</span><br><span class="line">  ┌</span><br><span class="line">  │ &#x27;&#123;&quot;retcode&quot;: 0&#125;&#x27;</span><br><span class="line">  │ [</span><br><span class="line">  │   &#123;</span><br><span class="line">  │     name: &#x27;sessionid&#x27;,</span><br><span class="line">  │     expires: null,</span><br><span class="line">  │     maxAge: 0,</span><br><span class="line">  │     domain: &#x27;124.223.33.41&#x27;,</span><br><span class="line">  │     path: &#x27;/&#x27;,</span><br><span class="line">  │     secure: false,</span><br><span class="line">  │     httpOnly: true,</span><br><span class="line">  │     hostOnly: true,</span><br><span class="line">  │     value: &#x27;5nhn3fuygio2bddi1vodi7nk79vnusdr&#x27;</span><br><span class="line">  │   &#125;</span><br><span class="line">  │ ]</span><br><span class="line">  └</span><br><span class="line"></span><br><span class="line">→ 添加课程</span><br><span class="line">  POST http://124.223.33.41:7081/api/mgr/sq_mgr/ [200 OK, 194B, 36ms]</span><br><span class="line">  √  Status code is 200</span><br><span class="line"></span><br><span class="line">→ 列出课程</span><br><span class="line">  GET http://124.223.33.41:7081/api/mgr/sq_mgr/?action=list_course&amp;pagenum=1&amp;pagesize=20 [200 OK, 546B, 20ms]</span><br><span class="line"></span><br><span class="line">→ 修改课程</span><br><span class="line">  PUT http://124.223.33.41:7081/api/mgr/sq_mgr/ [200 OK, 182B, 49ms]</span><br><span class="line"></span><br><span class="line">→ 删除课程</span><br><span class="line">  DELETE http://124.223.33.41:7081/api/mgr/sq_mgr/ [200 OK, 182B, 39ms]</span><br><span class="line"></span><br><span class="line">┌─────────────────────────┬───────────────────┬───────────────────┐</span><br><span class="line">│                         │          executed │            failed │</span><br><span class="line">├─────────────────────────┼───────────────────┼───────────────────┤</span><br><span class="line">│              iterations │                 1 │                 0 │</span><br><span class="line">├─────────────────────────┼───────────────────┼───────────────────┤</span><br><span class="line">│                requests │                 5 │                 0 │</span><br><span class="line">├─────────────────────────┼───────────────────┼───────────────────┤</span><br><span class="line">│            test-scripts │                 3 │                 0 │</span><br><span class="line">├─────────────────────────┼───────────────────┼───────────────────┤</span><br><span class="line">│      prerequest-scripts │                 1 │                 0 │</span><br><span class="line">├─────────────────────────┼───────────────────┼───────────────────┤</span><br><span class="line">│              assertions │                 4 │                 1 │</span><br><span class="line">├─────────────────────────┴───────────────────┴───────────────────┤</span><br><span class="line">│ total run duration: 793ms                                       │</span><br><span class="line">├─────────────────────────────────────────────────────────────────┤</span><br><span class="line">│ total data received: 445B (approx)                              │</span><br><span class="line">├─────────────────────────────────────────────────────────────────┤</span><br><span class="line">│ average response time: 71ms [min: 20ms, max: 214ms, s.d.: 71ms] │</span><br><span class="line">└─────────────────────────────────────────────────────────────────┘</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"> failure                detail</span></span><br><span class="line"></span><br><span class="line"> 1.  AssertionError         Response time is less than 200ms</span><br><span class="line">                            expected 214 to be below 200</span><br><span class="line">                            at assertion:0 in test-script</span><br><span class="line">                            inside &quot;登录&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="附录：run命令所有帮助"><a href="#附录：run命令所有帮助" class="headerlink" title="附录：run命令所有帮助"></a>附录：run命令所有帮助</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;newman run -h</span><br><span class="line">Usage: newman run &lt;collection&gt; [options]</span><br><span class="line"></span><br><span class="line">Initiate a Postman Collection run <span class="keyword">from</span> a given URL <span class="keyword">or</span> path</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -e, --environment &lt;path&gt;              Specify a URL <span class="keyword">or</span> path to a Postman Environment</span><br><span class="line">  -g, --<span class="built_in">globals</span> &lt;path&gt;                  Specify a URL <span class="keyword">or</span> path to a file containing Postman Globals</span><br><span class="line">  -r, --reporters [reporters]           Specify the reporters to use <span class="keyword">for</span> this run (default: [<span class="string">&quot;cli&quot;</span>])</span><br><span class="line">  -n, --iteration-count &lt;n&gt;             Define the number of iterations to run</span><br><span class="line">  -d, --iteration-data &lt;path&gt;           Specify a data file to use <span class="keyword">for</span> iterations (either JSON <span class="keyword">or</span> CSV)</span><br><span class="line">  --folder &lt;path&gt;                       Specify the folder to run <span class="keyword">from</span> a collection. Can be specified multiple times to</span><br><span class="line">                                        run multiple folders (default: [])</span><br><span class="line">  --<span class="keyword">global</span>-var &lt;value&gt;                  Allows the specification of <span class="keyword">global</span> variables via the command line, <span class="keyword">in</span> a</span><br><span class="line">                                        key=value <span class="built_in">format</span> (default: [])</span><br><span class="line">  --env-var &lt;value&gt;                     Allows the specification of environment variables via the command line, <span class="keyword">in</span> a</span><br><span class="line">                                        key=value <span class="built_in">format</span> (default: [])</span><br><span class="line">  --export-environment &lt;path&gt;           Exports the final environment to a file after completing the run</span><br><span class="line">  --export-<span class="built_in">globals</span> &lt;path&gt;               Exports the final <span class="built_in">globals</span> to a file after completing the run</span><br><span class="line">  --export-collection &lt;path&gt;            Exports the executed collection to a file after completing the run</span><br><span class="line">  --postman-api-key &lt;apiKey&gt;            API Key used to load the resources <span class="keyword">from</span> the Postman API</span><br><span class="line">  --bail [modifiers]                    Specify whether <span class="keyword">or</span> <span class="keyword">not</span> to gracefully stop a collection run on encountering an</span><br><span class="line">                                        error <span class="keyword">and</span> whether to end the run <span class="keyword">with</span> an error based on the optional modifier</span><br><span class="line">  --ignore-redirects                    Prevents Newman <span class="keyword">from</span> automatically following 3XX redirect responses</span><br><span class="line">  -x , --suppress-exit-code             Specify whether <span class="keyword">or</span> <span class="keyword">not</span> to override the default exit code <span class="keyword">for</span> the current run</span><br><span class="line">  --silent                              Prevents Newman <span class="keyword">from</span> showing output to CLI</span><br><span class="line">  --disable-unicode                     Forces Unicode compliant symbols to be replaced by their plain text equivalents</span><br><span class="line">  --color &lt;value&gt;                       Enable/Disable colored output (auto|on|off) (default: <span class="string">&quot;auto&quot;</span>)</span><br><span class="line">  --delay-request [n]                   Specify the extent of delay between requests (milliseconds) (default: <span class="number">0</span>)</span><br><span class="line">  --timeout [n]                         Specify a timeout <span class="keyword">for</span> collection run (milliseconds) (default: <span class="number">0</span>)</span><br><span class="line">  --timeout-request [n]                 Specify a timeout <span class="keyword">for</span> requests (milliseconds) (default: <span class="number">0</span>)</span><br><span class="line">  --timeout-script [n]                  Specify a timeout <span class="keyword">for</span> scripts (milliseconds) (default: <span class="number">0</span>)</span><br><span class="line">  --working-<span class="built_in">dir</span> &lt;path&gt;                  Specify the path to the working directory</span><br><span class="line">  --no-insecure-file-read               Prevents reading the files situated outside of the working directory</span><br><span class="line">  -k, --insecure                        Disables SSL validations</span><br><span class="line">  --ssl-client-cert-<span class="built_in">list</span> &lt;path&gt;         Specify the path to a client certificates configurations (JSON)</span><br><span class="line">  --ssl-client-cert &lt;path&gt;              Specify the path to a client certificate (PEM)</span><br><span class="line">  --ssl-client-key &lt;path&gt;               Specify the path to a client certificate private key</span><br><span class="line">  --ssl-client-passphrase &lt;passphrase&gt;  Specify the client certificate passphrase (<span class="keyword">for</span> protected key)</span><br><span class="line">  --ssl-extra-ca-certs &lt;path&gt;           Specify additionally trusted CA certificates (PEM)</span><br><span class="line">  --cookie-jar &lt;path&gt;                   Specify the path to a custom cookie jar (serialized tough-cookie JSON)</span><br><span class="line">  --export-cookie-jar &lt;path&gt;            Exports the cookie jar to a file after completing the run</span><br><span class="line">  --verbose                             Show detailed information of collection run <span class="keyword">and</span> each request sent</span><br><span class="line">  -h, --<span class="built_in">help</span>                            display <span class="built_in">help</span> <span class="keyword">for</span> command</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>postman</category>
      </categories>
      <tags>
        <tag>postman</tag>
        <tag>api</tag>
        <tag>完结</tag>
      </tags>
  </entry>
  <entry>
    <title>Python小程序_简单加密</title>
    <url>/2022/03/31/Python%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AE%80%E5%8D%95%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h1 id="Python之禅-THIS-PY"><a href="#Python之禅-THIS-PY" class="headerlink" title="Python之禅:THIS.PY"></a>Python之禅:THIS.PY</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;&quot;&quot;Gur Mra bs Clguba, ol Gvz Crgref&quot;&quot;&quot;</span>  <span class="comment">#编码后的字符串，我删除了很多信息</span></span><br><span class="line"></span><br><span class="line">d = &#123;&#125;  <span class="comment">#空字典</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> (<span class="number">65</span>, <span class="number">97</span>):  <span class="comment">#c就是2个值，65和97</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):  <span class="comment">#26个字母</span></span><br><span class="line">        d[<span class="built_in">chr</span>(i+c)] = <span class="built_in">chr</span>((i+<span class="number">13</span>) % <span class="number">26</span> + c)  <span class="comment">#建立字典对应关系</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join([d.get(c, c) <span class="keyword">for</span> c <span class="keyword">in</span> s]))  <span class="comment">#将新的字符串加密（rot13）得到一个新的字符串。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">The Zen of Python, by Tim Peters</span><br></pre></td></tr></table></figure>



<h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><ul>
<li><p>chr：返回指定数字的unicode字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chr</span>(i, /)</span><br><span class="line">    Return a Unicode string of one character <span class="keyword">with</span> ordinal i; <span class="number">0</span> &lt;= i &lt;= <span class="number">0x10ffff</span>.</span><br><span class="line">    </span><br><span class="line"><span class="built_in">chr</span>(<span class="number">65</span>)  是A  <span class="built_in">chr</span>(<span class="number">90</span>)是Z ,差<span class="number">25</span></span><br><span class="line"><span class="built_in">chr</span>(<span class="number">97</span>)  是a  <span class="built_in">chr</span>(<span class="number">122</span>)是z，差<span class="number">25</span>(<span class="number">26</span>个英文字母)</span><br></pre></td></tr></table></figure></li>
<li><p>chr(i+c)，i从0到25</p>
</li>
<li><p>两个for循环建立了一个字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d[<span class="built_in">chr</span>(i+c)] = <span class="built_in">chr</span>((i+<span class="number">13</span>) % <span class="number">26</span> + c)  <span class="comment">#超出26个字符要求余数+C，这是关键</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;A&#x27;</span>: <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;B&#x27;</span>: <span class="string">&#x27;O&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;C&#x27;</span>: <span class="string">&#x27;P&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;D&#x27;</span>: <span class="string">&#x27;Q&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;E&#x27;</span>: <span class="string">&#x27;R&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;F&#x27;</span>: <span class="string">&#x27;S&#x27;</span>) <span class="comment">#省略了很多  A后第13个字符串后的N</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="代码改造成函数"><a href="#代码改造成函数" class="headerlink" title="代码改造成函数"></a>代码改造成函数</h1><ul>
<li><p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rot_n</span>(<span class="params">s,n=<span class="number">13</span></span>):</span><br><span class="line">    d = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> (<span class="number">65</span>, <span class="number">97</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">            d[<span class="built_in">chr</span>(i+c)] = <span class="built_in">chr</span>((i+n) % <span class="number">26</span> + c)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([d.get(c, c) <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line">sen = <span class="string">&#x27;i love china&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(rot_n(sen,<span class="number">13</span>))   <span class="comment">#v ybir puvan</span></span><br></pre></td></tr></table></figure></li>
<li><p>解码代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">de_rot_n</span>(<span class="params">s,n=<span class="number">13</span></span>):</span><br><span class="line">    d = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> (<span class="number">65</span>, <span class="number">97</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">            d[<span class="built_in">chr</span>(i+c)] = <span class="built_in">chr</span>((i-n) % <span class="number">26</span> + c)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([d.get(c, c) <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line">sen = <span class="string">&#x27;v ybir puvan&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(de_rot_n(sen,<span class="number">13</span>))  <span class="comment">#i love china</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>完结</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python第三方库arrow</title>
    <url>/2022/03/31/Python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93arrow/</url>
    <content><![CDATA[<h1 id="Python第三方库arrow"><a href="#Python第三方库arrow" class="headerlink" title="Python第三方库arrow"></a>Python第三方库arrow</h1><blockquote>
<p><a href="https://pypi.org/project/arrow/">https://pypi.org/project/arrow/</a></p>
</blockquote>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul>
<li><strong>处理时间日期的一个第三方库</strong></li>
<li><strong>Arrow</strong> is a Python library that offers a sensible and human-friendly approach to creating, manipulating, formatting and converting <strong>dates, times and timestamps</strong>. It implements and updates the datetime type, plugging gaps in functionality and providing an intelligent module API that supports many common creation scenarios. Simply put, it helps you work with dates and times with fewer imports and a lot less code.</li>
</ul>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>Too many modules: datetime, time, calendar, dateutil, pytz and more</li>
<li>Too many types: date, time, datetime, tzinfo, timedelta, relativedelta, etc.</li>
<li>Timezones and timestamp conversions are verbose and unpleasant</li>
<li>Timezone naivety is the norm</li>
<li>Gaps in functionality: ISO 8601 parsing, timespans, humanization</li>
</ul>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>Fully-implemented, drop-in replacement for datetime</li>
<li>Support for Python 3.6+</li>
<li>Timezone-aware and UTC by default</li>
<li>Super-simple creation options for many common input scenarios</li>
<li><code>shift</code> method with support for relative offsets, including weeks</li>
<li>Format and parse strings automatically</li>
<li>Wide support for the <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> standard</li>
<li>Timezone conversion</li>
<li>Support for <code>dateutil</code>, <code>pytz</code>, and <code>ZoneInfo</code> tzinfo objects</li>
<li>Generates time spans, ranges, floors and ceilings for time frames ranging from microsecond to year</li>
<li>Humanize dates and times with a growing list of contributed locales</li>
<li>Extensible for your own Arrow-derived types</li>
<li>Full support for PEP 484-style type hints</li>
</ul>
<h1 id="官方示例"><a href="#官方示例" class="headerlink" title="官方示例"></a>官方示例</h1><blockquote>
<p>稍作补充</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> arrow</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arrow.get(<span class="string">&#x27;2013-05-11T21:23:58.970460+07:00&#x27;</span>)</span><br><span class="line">&lt;Arrow [<span class="number">2013</span>-05-11T21:<span class="number">23</span>:<span class="number">58.970460</span>+07:<span class="number">00</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>utc = arrow.utcnow()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>utc</span><br><span class="line">&lt;Arrow [<span class="number">2013</span>-05-11T21:<span class="number">23</span>:<span class="number">58.970460</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now = arrow.now()  <span class="comment">#当前时间</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now</span><br><span class="line">&lt;Arrow [<span class="number">2022</span>-03-31T11:06:<span class="number">21.477106</span>+08:<span class="number">00</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>utc = utc.shift(hours=-<span class="number">1</span>)  <span class="comment">#偏移，前面1个小时</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>utc</span><br><span class="line">&lt;Arrow [<span class="number">2013</span>-05-11T20:<span class="number">23</span>:<span class="number">58.970460</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>local = utc.to(<span class="string">&#x27;US/Pacific&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>local</span><br><span class="line">&lt;Arrow [<span class="number">2013</span>-05-11T13:<span class="number">23</span>:<span class="number">58.970460</span>-07:<span class="number">00</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>local.timestamp()</span><br><span class="line"><span class="number">1368303838.970460</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>local.<span class="built_in">format</span>()   <span class="comment">#时间格式化</span></span><br><span class="line"><span class="string">&#x27;2013-05-11 13:23:58 -07:00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>local.<span class="built_in">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss ZZ&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;2013-05-11 13:23:58 -07:00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>local.humanize()  <span class="comment">#人性化输出</span></span><br><span class="line"><span class="string">&#x27;an hour ago&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>local.humanize(locale=<span class="string">&#x27;ko-kr&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;한시간 전&#x27;</span></span><br></pre></td></tr></table></figure>



<h1 id="引申"><a href="#引申" class="headerlink" title="引申"></a>引申</h1><h2 id="关于时间偏移shift"><a href="#关于时间偏移shift" class="headerlink" title="关于时间偏移shift"></a>关于时间偏移shift</h2><ul>
<li><p>源码部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">shift</span>(<span class="params">self, **kwargs: <span class="type">Any</span></span>) -&gt; <span class="string">&quot;Arrow&quot;</span>:</span><br><span class="line">    relative_kwargs = &#123;&#125;</span><br><span class="line">    additional_attrs = [<span class="string">&quot;weeks&quot;</span>, <span class="string">&quot;quarters&quot;</span>, <span class="string">&quot;weekday&quot;</span>]</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self._ATTRS_PLURAL <span class="keyword">or</span> key <span class="keyword">in</span> additional_attrs:</span><br><span class="line">            relative_kwargs[key] = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            supported_attr = <span class="string">&quot;, &quot;</span>.join(self._ATTRS_PLURAL + additional_attrs)</span><br><span class="line">            <span class="keyword">raise</span> ValueError(</span><br><span class="line">                <span class="string">f&quot;Invalid shift time frame. Please select one of the following: <span class="subst">&#123;supported_attr&#125;</span>.&quot;</span></span><br><span class="line">            )</span><br><span class="line">_ATTRS: Final[<span class="type">List</span>[<span class="built_in">str</span>]] = [</span><br><span class="line">    <span class="string">&quot;year&quot;</span>,</span><br><span class="line">    <span class="string">&quot;month&quot;</span>,</span><br><span class="line">    <span class="string">&quot;day&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hour&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minute&quot;</span>,</span><br><span class="line">    <span class="string">&quot;second&quot;</span>,</span><br><span class="line">    <span class="string">&quot;microsecond&quot;</span>,</span><br><span class="line">]</span><br><span class="line">_ATTRS_PLURAL: Final[<span class="type">List</span>[<span class="built_in">str</span>]] = [<span class="string">f&quot;<span class="subst">&#123;a&#125;</span>s&quot;</span> <span class="keyword">for</span> a <span class="keyword">in</span> _ATTRS]</span><br><span class="line">    additional_attrs = [<span class="string">&quot;weeks&quot;</span>, <span class="string">&quot;quarters&quot;</span>, <span class="string">&quot;weekday&quot;</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>测试代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> arrow</span><br><span class="line">now = arrow.now() </span><br><span class="line">now.shift(fenzhong=<span class="number">1</span>)  <span class="comment">#这是不支持的，支持的如下提示</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ValueError: Invalid shift time frame. Please select one of the following: years, months, days, hours, minutes, seconds, microseconds, weeks, quarters, weekday.</span><br></pre></td></tr></table></figure></li>
<li><p>示例代码：对shift的weeks和weekday的说明，其他的几个参数都比较简单</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> arrow</span><br><span class="line">now = arrow.now()</span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;YYYY-MM-DD&#x27;</span>))  <span class="comment">#当前时间  2022-03-31</span></span><br><span class="line"><span class="built_in">print</span>(now.shift(weeks=<span class="number">1</span>))    <span class="comment">#1周后      #2022-04-07T11:22:56.715460+08:00</span></span><br><span class="line"><span class="built_in">print</span>(now.shift(weekday=<span class="number">1</span>))  <span class="comment">#最近的周二  #2022-04-05T11:22:56.715460+08:00</span></span><br></pre></td></tr></table></figure>

<ul>
<li>weekday的取值范围是0~6,<strong>0代表周1,6代表周日</strong>，依次类推。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="关于时间格式化format"><a href="#关于时间格式化format" class="headerlink" title="关于时间格式化format"></a>关于时间格式化format</h2><ul>
<li><p>源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_format_token</span>(<span class="params">self, dt: datetime, token: <span class="type">Optional</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="type">Optional</span>[<span class="built_in">str</span>]:</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token <span class="keyword">and</span> token.startswith(<span class="string">&quot;[&quot;</span>) <span class="keyword">and</span> token.endswith(<span class="string">&quot;]&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> token[<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;YYYY&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> self.locale.year_full(dt.year)</span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;YY&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> self.locale.year_abbreviation(dt.year)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;MMMM&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> self.locale.month_name(dt.month)</span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;MMM&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> self.locale.month_abbreviation(dt.month)</span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;MM&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.month:02d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;M&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.month&#125;</span>&quot;</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;DDDD&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.timetuple().tm_yday:03d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;DDD&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.timetuple().tm_yday&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;DD&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.day:02d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;D&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.day&#125;</span>&quot;</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;Do&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> self.locale.ordinal_number(dt.day)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;dddd&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> self.locale.day_name(dt.isoweekday())</span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;ddd&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> self.locale.day_abbreviation(dt.isoweekday())</span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;d&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.isoweekday()&#125;</span>&quot;</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;HH&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.hour:02d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;H&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.hour&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;hh&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.hour <span class="keyword">if</span> <span class="number">0</span> &lt; dt.hour &lt; <span class="number">13</span> <span class="keyword">else</span> <span class="built_in">abs</span>(dt.hour - <span class="number">12</span>):02d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;h&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.hour <span class="keyword">if</span> <span class="number">0</span> &lt; dt.hour &lt; <span class="number">13</span> <span class="keyword">else</span> <span class="built_in">abs</span>(dt.hour - <span class="number">12</span>)&#125;</span>&quot;</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;mm&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.minute:02d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;m&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.minute&#125;</span>&quot;</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;ss&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.second:02d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;s&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.second&#125;</span>&quot;</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;SSSSSS&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.microsecond:06d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;SSSSS&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.microsecond // <span class="number">10</span>:05d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;SSSS&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.microsecond // <span class="number">100</span>:04d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;SSS&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.microsecond // <span class="number">1000</span>:03d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;SS&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.microsecond // <span class="number">10000</span>:02d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;S&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.microsecond // <span class="number">100000</span>&#125;</span>&quot;</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;X&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.timestamp()&#125;</span>&quot;</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;x&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;dt.timestamp() * <span class="number">1_000_000</span>:<span class="number">.0</span>f&#125;</span>&quot;</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;ZZZ&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> dt.tzname()</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token <span class="keyword">in</span> [<span class="string">&quot;ZZ&quot;</span>, <span class="string">&quot;Z&quot;</span>]:</span><br><span class="line">        separator = <span class="string">&quot;:&quot;</span> <span class="keyword">if</span> token == <span class="string">&quot;ZZ&quot;</span> <span class="keyword">else</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        tz = dateutil_tz.tzutc() <span class="keyword">if</span> dt.tzinfo <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> dt.tzinfo</span><br><span class="line">        <span class="comment"># `dt` must be aware object. Otherwise, this line will raise AttributeError</span></span><br><span class="line">        <span class="comment"># https://github.com/arrow-py/arrow/pull/883#discussion_r529866834</span></span><br><span class="line">        <span class="comment"># datetime awareness: https://docs.python.org/3/library/datetime.html#aware-and-naive-objects</span></span><br><span class="line">        total_minutes = <span class="built_in">int</span>(cast(timedelta, tz.utcoffset(dt)).total_seconds() / <span class="number">60</span>)</span><br><span class="line">  </span><br><span class="line">        sign = <span class="string">&quot;+&quot;</span> <span class="keyword">if</span> total_minutes &gt;= <span class="number">0</span> <span class="keyword">else</span> <span class="string">&quot;-&quot;</span></span><br><span class="line">        total_minutes = <span class="built_in">abs</span>(total_minutes)</span><br><span class="line">        hour, minute = <span class="built_in">divmod</span>(total_minutes, <span class="number">60</span>)</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;sign&#125;</span><span class="subst">&#123;hour:02d&#125;</span><span class="subst">&#123;separator&#125;</span><span class="subst">&#123;minute:02d&#125;</span>&quot;</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token <span class="keyword">in</span> (<span class="string">&quot;a&quot;</span>, <span class="string">&quot;A&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> self.locale.meridian(dt.hour, token)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">&quot;W&quot;</span>:</span><br><span class="line">        year, week, day = dt.isocalendar()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;year&#125;</span>-W<span class="subst">&#123;week:02d&#125;</span>-<span class="subst">&#123;day&#125;</span>&quot;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<ul>
<li><p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> arrow</span><br><span class="line">now = arrow.now()</span><br><span class="line"><span class="built_in">print</span>(now)  <span class="comment">#2022-03-31T11:47:45.684950+08:00</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;YYYY&#x27;</span>)) <span class="comment">#四位的年  2022</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;YY&#x27;</span>))   <span class="comment">#两位的年  22</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;MMMM&#x27;</span>))  <span class="comment">#月份英文全拼   March</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;MMM&#x27;</span>)) <span class="comment">#月份简写 Mar</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;MM&#x27;</span>)) <span class="comment">#03</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;M&#x27;</span>))  <span class="comment">#3</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;DDDD&#x27;</span>))  <span class="comment">#090  这是啥?</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;DDD&#x27;</span>)) <span class="comment">#90</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;DD&#x27;</span>)) <span class="comment">#31 </span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;D&#x27;</span>)) <span class="comment">#31 </span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;dddd&#x27;</span>)) <span class="comment">#Thursday</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;ddd&#x27;</span>)) <span class="comment">#Thu</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;HH&#x27;</span>)) <span class="comment">#11</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;H&#x27;</span>)) <span class="comment">#11</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;hh&#x27;</span>)) <span class="comment">#11</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;h&#x27;</span>)) <span class="comment">#11</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;mm&#x27;</span>)) <span class="comment">#47</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;m&#x27;</span>)) <span class="comment">#47</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;ss&#x27;</span>)) <span class="comment">#45</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;s&#x27;</span>)) <span class="comment">#45</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;SSSSSS&#x27;</span>)) <span class="comment">#684950</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;SSSSS&#x27;</span>)) <span class="comment">#68495</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;SSSS&#x27;</span>)) <span class="comment">#6849</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;SSS&#x27;</span>)) <span class="comment">#684</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;SS&#x27;</span>)) <span class="comment">#68</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;S&#x27;</span>))  <span class="comment">#6</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;X&#x27;</span>)) <span class="comment">#1648698465.68495</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;x&#x27;</span>)) <span class="comment">#1648698465684950</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;ZZZ&#x27;</span>)) <span class="comment">#中国标准时间</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;ZZ&#x27;</span>)) <span class="comment">#+08:00</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;Z&#x27;</span>)) <span class="comment">#+0800</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;a&#x27;</span>)) <span class="comment">#am</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;A&#x27;</span>)) <span class="comment">#AM</span></span><br><span class="line"><span class="built_in">print</span>(now.<span class="built_in">format</span>(<span class="string">&#x27;W&#x27;</span>)) <span class="comment">#2022-W13-4</span></span><br></pre></td></tr></table></figure></li>
<li><p>补充</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(now.weekday())  <span class="comment">#输出当前周几</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="关于人性化humanize"><a href="#关于人性化humanize" class="headerlink" title="关于人性化humanize"></a>关于人性化humanize</h2><ul>
<li><p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> arrow</span><br><span class="line">now = arrow.now()</span><br><span class="line">past = now.shift(hours=-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(past.humanize()) <span class="comment">#an hour ago</span></span><br><span class="line">furture = now.shift(hours=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(furture.humanize())  <span class="comment">#in an hour</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="其他操作（属性、时间戳、替换）"><a href="#其他操作（属性、时间戳、替换）" class="headerlink" title="其他操作（属性、时间戳、替换）"></a>其他操作（属性、时间戳、替换）</h2><ul>
<li><p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> arrow</span><br><span class="line">now = arrow.now() </span><br><span class="line"><span class="built_in">print</span>(now)  <span class="comment">#2022-03-31T13:40:13.711922+08:00</span></span><br><span class="line"><span class="built_in">print</span>(now.year) </span><br><span class="line"><span class="built_in">print</span>(now.month)</span><br><span class="line"><span class="built_in">print</span>(now.day)</span><br><span class="line"><span class="built_in">print</span>(now.hour)</span><br><span class="line"><span class="built_in">print</span>(now.minute)</span><br><span class="line"><span class="built_in">print</span>(now.second)</span><br><span class="line"><span class="built_in">print</span>(now.microsecond)</span><br><span class="line"><span class="built_in">print</span>(now.timestamp()) <span class="comment">#1648705213.711922</span></span><br><span class="line"><span class="built_in">print</span>(now.int_timestamp) <span class="comment">#时间戳的整数部分 1648705213</span></span><br></pre></td></tr></table></figure></li>
<li><p>对于时间戳，可以通过get反过来获取时间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> arrow</span><br><span class="line">time1 = arrow.get(<span class="number">1648705213</span>)  <span class="comment">#注意不能使用引号</span></span><br><span class="line"><span class="built_in">print</span>(time1.year)</span><br></pre></td></tr></table></figure></li>
<li><p>计算毫秒的一个示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> arrow</span><br><span class="line">t1 = arrow.now().timestamp()</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">t2 = arrow.now().timestamp()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="built_in">round</span>(t2-t1,<span class="number">3</span>))*<span class="number">1000</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>替换时间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> arrow</span><br><span class="line">t1 = arrow.now()</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line">t2 = t1.replace(year=<span class="number">2018</span>)  <span class="comment">#替换个年份</span></span><br><span class="line"><span class="built_in">print</span>(t2)</span><br><span class="line">t3 = t1.replace(month=<span class="number">11</span>,day=<span class="number">14</span>) <span class="comment">#替换月和日</span></span><br><span class="line"><span class="built_in">print</span>(t3)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>完结</tag>
        <tag>python</tag>
        <tag>第三方库</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo技巧</title>
    <url>/2022/03/31/hexo/</url>
    <content><![CDATA[<h1 id="hexo技巧"><a href="#hexo技巧" class="headerlink" title="hexo技巧"></a>hexo技巧</h1><blockquote>
<p>当前博客是用hexo+ayer主题结合github搭建而成</p>
</blockquote>
<h1 id="添加分类"><a href="#添加分类" class="headerlink" title="添加分类"></a>添加分类</h1><p><strong>步骤一：添加分类</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<ul>
<li><p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">songqin008@DESKTOP-6PNR7SB MINGW64 /e/github/myblog/hexo</span><br><span class="line">$ hexo new page categories</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: E:\github\myblog\hexo\source\categories\index.md</span><br></pre></td></tr></table></figure></li>
<li><p>index.md的内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: categories</span><br><span class="line">date: 2022-03-30 13:46:23</span><br><span class="line">type: categories   #网上都说是这句话，但有点奇怪的，感觉不太对。</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>步骤二：在文章中增加对应信息</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: hexo技巧</span><br><span class="line">date: </span><br><span class="line">categories: </span><br><span class="line">- hexo</span><br></pre></td></tr></table></figure>

<ul>
<li>效果是有的，但在分类标签中看不到</li>
</ul>
<h1 id="添加标签"><a href="#添加标签" class="headerlink" title="添加标签"></a>添加标签</h1><p><strong>步骤一：添加标签</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<ul>
<li>输出</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">songqin008@DESKTOP-6PNR7SB MINGW64 /e/github/myblog/hexo</span><br><span class="line">$ hexo new page tags</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: E:\github\myblog\hexo\source\tags\index.md</span><br></pre></td></tr></table></figure>

<ul>
<li><p>index.md的内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: 2022-03-30 13:55:59</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>步骤二：在文章中增加对应信息</strong></p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: hexo技巧</span><br><span class="line">date: </span><br><span class="line">tags: </span><br><span class="line">- hexo</span><br></pre></td></tr></table></figure>

<ul>
<li>效果是有的，但在标签中看不到</li>
</ul>
<h1 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h1><ul>
<li><p>执行2个命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure></li>
<li><p>在文件头部信息加入top: True</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">title: hexo技巧</span><br><span class="line">date: </span><br><span class="line">categories: </span><br><span class="line">- hexo</span><br><span class="line">tags:</span><br><span class="line">- hexo</span><br><span class="line">top: <span class="literal">True</span>   <span class="comment">#关键是这个</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h1><ul>
<li>本地的显然不行，上传到images目录下也没通过；</li>
<li>找免费图床，推荐SM.MS</li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>待续</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Postman测试脚本</title>
    <url>/2022/03/30/Postman%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="Postman测试脚本"><a href="#Postman测试脚本" class="headerlink" title="Postman测试脚本"></a>Postman测试脚本</h1><blockquote>
<p><a href="https://learning.postman.com/docs/writing-scripts/script-references/test-examples/">https://learning.postman.com/docs/writing-scripts/script-references/test-examples/</a></p>
</blockquote>
<h1 id="SNIPPETS"><a href="#SNIPPETS" class="headerlink" title="SNIPPETS"></a>SNIPPETS</h1><blockquote>
<p>POSTMAN界面提供的</p>
</blockquote>
<h2 id="响应体包含字符串"><a href="#响应体包含字符串" class="headerlink" title="响应体包含字符串"></a>响应体包含字符串</h2><blockquote>
<p><em>{<strong>retcode: 0</strong>} 这是响应体</em></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pm.test(<span class="string">&quot;Body matches string&quot;</span>, function () &#123;</span><br><span class="line">    pm.expect(pm.response.text()).to.include(<span class="string">&quot;retcode&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="响应体JSON数据"><a href="#响应体JSON数据" class="headerlink" title="响应体JSON数据"></a>响应体JSON数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pm.test(<span class="string">&quot;Your test name&quot;</span>, function () &#123;</span><br><span class="line">    var jsonData = pm.response.json();</span><br><span class="line">    pm.expect(jsonData.retcode).to.eql(<span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="响应体数据"><a href="#响应体数据" class="headerlink" title="响应体数据"></a>响应体数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pm.test(<span class="string">&quot;Body is correct&quot;</span>, function () &#123;</span><br><span class="line">    pm.response.to.have.body(&#123;retcode: <span class="number">0</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="响应头数据"><a href="#响应头数据" class="headerlink" title="响应头数据"></a>响应头数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pm.test(<span class="string">&quot;Content-Type is present&quot;</span>, function () &#123;</span><br><span class="line">    pm.response.to.have.header(<span class="string">&quot;Content-Type&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pm.test(<span class="string">&quot;Response time is less than 200ms&quot;</span>, function () &#123;</span><br><span class="line">    pm.expect(pm.response.responseTime).to.be.below(<span class="number">200</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="响应码"><a href="#响应码" class="headerlink" title="响应码"></a>响应码</h2><ul>
<li><p>方式一</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pm.test(<span class="string">&quot;Successful POST request&quot;</span>, function () &#123;</span><br><span class="line">    pm.expect(pm.response.code).to.be.oneOf([<span class="number">200</span>, <span class="number">201</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>方式二</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pm.test(<span class="string">&quot;Status code is 200&quot;</span>, function () &#123;</span><br><span class="line">  pm.response.to.have.status(<span class="number">200</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="响应码字符串"><a href="#响应码字符串" class="headerlink" title="响应码字符串"></a>响应码字符串</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pm.test(<span class="string">&quot;Status code name has string&quot;</span>, function () &#123;</span><br><span class="line">    pm.response.to.have.status(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h2 id="语法总结"><a href="#语法总结" class="headerlink" title="语法总结"></a>语法总结</h2><ul>
<li><p>语法1</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pm.<span class="title function_">test</span>(参数<span class="number">1</span>,函数)</span><br><span class="line">	参数<span class="number">1</span>: 函数执行成功后输出的字符串</span><br><span class="line">    函数: <span class="keyword">function</span>(<span class="params"></span>) &#123; 函数体&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>语法2</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#下面要结合pm.<span class="property">expect</span></span><br><span class="line">pm.<span class="property">response</span>.<span class="title function_">text</span>()</span><br><span class="line">pm.<span class="property">response</span>.<span class="title function_">json</span>()</span><br><span class="line">pm.<span class="property">response</span>.<span class="property">code</span></span><br><span class="line">pm.<span class="property">response</span>.<span class="property">responseTime</span></span><br><span class="line">#下面可以直接断言</span><br><span class="line">pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="property">body</span></span><br><span class="line">pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="property">header</span></span><br><span class="line">pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="property">status</span></span><br></pre></td></tr></table></figure></li>
<li><p>语法3</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pm.<span class="title function_">expect</span>(要断言的内容).<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">oneOf</span>(列表中存储多个值)</span><br><span class="line">pm.<span class="title function_">expect</span>(要断言的内容).<span class="property">to</span>.<span class="title function_">include</span>(字符串)</span><br><span class="line">pm.<span class="title function_">expect</span>(要断言的内容).<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">below</span>(比较数值)</span><br><span class="line">pm.<span class="title function_">expect</span>(要断言的内容).<span class="property">to</span>.<span class="title function_">eql</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>postman</category>
      </categories>
      <tags>
        <tag>待续</tag>
        <tag>postman</tag>
        <tag>api</tag>
      </tags>
  </entry>
  <entry>
    <title>Github仓库整理</title>
    <url>/2022/03/30/Github%E4%BB%93%E5%BA%93%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="Github仓库整理"><a href="#Github仓库整理" class="headerlink" title="Github仓库整理"></a>Github仓库整理</h1><blockquote>
<p>采集于 hellogithub，也有自己发现的，二道贩子</p>
</blockquote>
<h1 id="python相关"><a href="#python相关" class="headerlink" title="python相关"></a>python相关</h1><h1 id="杂类"><a href="#杂类" class="headerlink" title="杂类"></a>杂类</h1><h2 id="hashcat"><a href="#hashcat" class="headerlink" title="hashcat"></a>hashcat</h2><ul>
<li><p>地址：<a href="https://github.com/hashcat/hashcat">https://github.com/hashcat/hashcat</a></p>
</li>
<li><p>简介：破解密码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hashcat <span class="keyword">is</span> the world<span class="string">&#x27;s fastest and most advanced password recovery utility, supporting five unique modes of attack for over 300 highly-optimized hashing algorithms. hashcat currently supports CPUs, GPUs, and other hardware accelerators on Linux, Windows, and macOS, and has facilities to help enable distributed password cracking</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="reveal-js"><a href="#reveal-js" class="headerlink" title="reveal.js"></a>reveal.js</h2><ul>
<li><p>地址：<a href="https://github.com/hakimel/reveal.js">https://github.com/hakimel/reveal.js</a></p>
</li>
<li><p>简介：HTML演示框架</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reveal.js <span class="keyword">is</span> an <span class="built_in">open</span> source HTML presentation framework. It enables anyone <span class="keyword">with</span> a web browser to create beautiful presentations <span class="keyword">for</span> free. Check out the live demo at revealjs.com</span><br></pre></td></tr></table></figure></li>
<li><p>备注：我一直在用哈</p>
</li>
</ul>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>待续</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记_python源码剖析</title>
    <url>/2022/03/30/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-python%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</url>
    <content><![CDATA[<h1 id="读书笔记-python源码剖析"><a href="#读书笔记-python源码剖析" class="headerlink" title="读书笔记_python源码剖析"></a>读书笔记_python源码剖析</h1>]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>待续</tag>
        <tag>python</tag>
      </tags>
  </entry>
</search>
